import prisma from './lib/prisma.js'

async function seedAllAddressDataKongvut() {
  try {
    console.log('üèóÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å kongvut API...')
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    console.log('üóëÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...')
    await prisma.subdistrict.deleteMany({})
    await prisma.district.deleteMany({})
    await prisma.province.deleteMany({})
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å earthchie API ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    console.log('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å earthchie API...')
    const response = await fetch('https://raw.githubusercontent.com/earthchie/jquery.Thailand.js/master/jquery.Thailand.js/database/raw_database/raw_database.json')
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    console.log(`üìä ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const provinces = new Map()
    const districts = new Map()
    const subdistricts = []

    for (const item of data) {
      // ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (item.province_code && typeof item.province_code === 'number' && item.province) {
        provinces.set(item.province_code, {
          province_id: item.province_code,
          province_name: item.province
        })
      }
      
      // ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      if (item.amphoe_code && typeof item.amphoe_code === 'number' && 
          item.amphoe && item.province_code && typeof item.province_code === 'number') {
        districts.set(item.amphoe_code, {
          district_id: item.amphoe_code,
          district_name: item.amphoe,
          province_id: item.province_code
        })
      }
      
      // ‡∏ï‡∏≥‡∏ö‡∏• - ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ amphoe_code ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô districts
      if (item.district_code && typeof item.district_code === 'number' && 
          item.amphoe_code && typeof item.amphoe_code === 'number' &&
          item.district && item.zipcode && districts.has(item.amphoe_code)) {
        subdistricts.push({
          subdistrict_id: item.district_code,
          subdistrict_name: item.district,
          district_id: item.amphoe_code,
          zip_code: item.zipcode.toString()
        })
      }
    }

    const provincesData = Array.from(provinces.values())
    const districtsData = Array.from(districts.values())
    const subdistrictsData = subdistricts

    console.log(`üìä ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ: ${provincesData.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î, ${districtsData.length} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ${subdistrictsData.length} ‡∏ï‡∏≥‡∏ö‡∏•`)

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å
    console.log('üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö:', JSON.stringify(data[0], null, 2))
    console.log('üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°:')
    console.log('  ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:', JSON.stringify(provincesData[0], null, 2))
    console.log('  ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠:', JSON.stringify(districtsData[0], null, 2))
    console.log('  ‡∏ï‡∏≥‡∏ö‡∏•:', JSON.stringify(subdistrictsData[0], null, 2))

    // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    console.log('\nüèõÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î...')
    const provinceInsertData = provincesData

    await prisma.province.createMany({
      data: provinceInsertData,
      skipDuplicates: true
    })
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${provinceInsertData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
    console.log('\nüè¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≥‡πÄ‡∏†‡∏≠...')
    const districtInsertData = districtsData

    // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory overflow
    const batchSize = 200
    let createdDistricts = 0

    for (let i = 0; i < districtInsertData.length; i += batchSize) {
      const batch = districtInsertData.slice(i, i + batchSize)
      
      try {
        await prisma.district.createMany({
          data: batch,
          skipDuplicates: true
        })
        createdDistricts += batch.length
        console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÅ‡∏•‡πâ‡∏ß: ${createdDistricts}/${districtInsertData.length}`)
      } catch (error) {
        console.error(`‚ùå Error in district batch ${i}-${i + batch.length}:`, error.message)
      }
    }

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${createdDistricts} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡∏ö‡∏•
    console.log('\nüèòÔ∏è  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏ö‡∏•...')
    const subdistrictInsertData = subdistrictsData

    let createdSubdistricts = 0

    for (let i = 0; i < subdistrictInsertData.length; i += batchSize) {
      const batch = subdistrictInsertData.slice(i, i + batchSize)
      
      try {
        await prisma.subdistrict.createMany({
          data: batch,
          skipDuplicates: true
        })
        createdSubdistricts += batch.length
        console.log(`üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡∏ö‡∏•‡πÅ‡∏•‡πâ‡∏ß: ${createdSubdistricts}/${subdistrictInsertData.length}`)
      } catch (error) {
        console.error(`‚ùå Error in subdistrict batch ${i}-${i + batch.length}:`, error.message)
      }
    }

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡∏ö‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${createdSubdistricts} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const finalProvinceCount = await prisma.province.count()
    const finalDistrictCount = await prisma.district.count()
    const finalSubdistrictCount = await prisma.subdistrict.count()
    
    console.log('\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')
    console.log(`- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${finalProvinceCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    console.log(`- ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: ${finalDistrictCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`) 
    console.log(`- ‡∏ï‡∏≥‡∏ö‡∏•: ${finalSubdistrictCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const sampleData = await prisma.subdistrict.findMany({
      take: 5,
      include: {
        district: {
          include: {
            province: true
          }
        }
      }
    })
    
    console.log('\nüèòÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:')
    sampleData.forEach(item => {
      console.log(`- ${item.subdistrict_name}, ${item.district.district_name}, ${item.district.province.province_name} ${item.zip_code}`)
    })

    console.log('\nüéâ Setup ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!')

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message)
    console.error('Stack:', error.stack)
  } finally {
    console.log('üîö ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    await prisma.$disconnect()
  }
}

seedAllAddressDataKongvut()