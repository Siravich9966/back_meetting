// ===================================================================
// ‡∏™‡∏£‡πâ‡∏≤‡∏á Roles ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
// ===================================================================

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedRoles() {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á roles ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô...')

  try {
    // ‡∏•‡∏ö roles ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    await prisma.roles.deleteMany()

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á roles ‡πÉ‡∏´‡∏°‡πà
    const roles = [
      {
        role_id: 1,
        role_name: 'user',
        role_status: 'active'
      },
      {
        role_id: 2, 
        role_name: 'officer',
        role_status: 'active'
      },
      {
        role_id: 3,
        role_name: 'admin', 
        role_status: 'active'
      },
      {
        role_id: 4,
        role_name: 'executive',
        role_status: 'active'
      }
    ]

    for (const role of roles) {
      const createdRole = await prisma.roles.create({
        data: role
      })
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á role: ${createdRole.role_name} (ID: ${createdRole.role_id})`)
    }

    console.log('üéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á roles ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!')

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á roles:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

seedRoles()
