// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkUserData() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...')
    console.log('=' .repeat(60))
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ tonyou1234@gmail.com
    const targetUser = await prisma.users.findUnique({
      where: { email: 'tonyou1234@gmail.com' }
    })
    
    if (targetUser) {
      console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', targetUser.email)
      console.log('   - ID:', targetUser.user_id)
      console.log('   - ‡∏ä‡∏∑‡πà‡∏≠:', targetUser.first_name, targetUser.last_name)
      console.log('   - ‡πÅ‡∏ú‡∏ô‡∏Å:', targetUser.department)
      console.log('   - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:', targetUser.position)
      console.log('   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:', targetUser.created_at)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ
      const userReservations = await prisma.reservation.findMany({
        where: { user_id: targetUser.user_id },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              location_m: true
            }
          }
        },
        orderBy: { created_at: 'desc' }
      })
      
      console.log(`\nüìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${userReservations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):`)
      userReservations.forEach((reservation, index) => {
        console.log(`   ${index + 1}. ‡∏´‡πâ‡∏≠‡∏á: ${reservation.meeting_room.room_name}`)
        console.log(`      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${reservation.start_at.toISOString().split('T')[0]} - ${reservation.end_at.toISOString().split('T')[0]}`)
        console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤: ${reservation.start_time.toISOString().slice(11, 16)} - ${reservation.end_time.toISOString().slice(11, 16)}`)
        console.log(`      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${reservation.status_r}`)
        console.log(`      ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${reservation.details_r}`)
        console.log(`      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${reservation.created_at}`)
        console.log('')
      })
      
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ tonyou1234@gmail.com')
    }
    
    // 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    const allUsers = await prisma.users.findMany({
      select: {
        user_id: true,
        email: true,
        first_name: true,
        last_name: true,
        department: true,
        created_at: true
      },
      orderBy: { created_at: 'desc' }
    })
    
    console.log('\nüë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:')
    allUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (${user.first_name} ${user.last_name}) - ${user.department}`)
    })
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤)
    const recentReservations = await prisma.reservation.findMany({
      include: {
        users: {
          select: {
            email: true,
            first_name: true,
            last_name: true
          }
        },
        meeting_room: {
          select: {
            room_name: true
          }
        }
      },
      orderBy: { created_at: 'desc' },
      take: 10
    })
    
    console.log('\nüïê ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤):')
    recentReservations.forEach((reservation, index) => {
      const startTime = new Date(reservation.start_time)
      const endTime = new Date(reservation.end_time)
      
      console.log(`   ${index + 1}. ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${reservation.users.email}`)
      console.log(`      ‡∏´‡πâ‡∏≠‡∏á: ${reservation.meeting_room.room_name}`)
      console.log(`      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${reservation.start_at.toISOString().split('T')[0]}`)
      console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (UTC): ${startTime.toISOString()} - ${endTime.toISOString()}`)
      console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ (+7): ${startTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})} - ${endTime.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'})}`)
      console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö HH:MM: ${startTime.toTimeString().slice(0,5)} - ${endTime.toTimeString().slice(0,5)}`)
      console.log(`      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${reservation.status_r}`)
      console.log('')
    })
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timezone ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    console.log('\n‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timezone:')
    const now = new Date()
    console.log('   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (local):', now.toString())
    console.log('   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (UTC):', now.toISOString())
    console.log('   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÑ‡∏ó‡∏¢):', now.toLocaleString('th-TH', {timeZone: 'Asia/Bangkok'}))
    console.log('   - Timezone offset:', now.getTimezoneOffset(), '‡∏ô‡∏≤‡∏ó‡∏µ')
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

checkUserData()
