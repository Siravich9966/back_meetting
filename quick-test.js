// ===================================================================
// Simple Database Test - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á database ‡πÅ‡∏•‡∏∞ logic
// ===================================================================

import prisma from './lib/prisma.js'

console.log('üîç Simple Database Connection Test\n')

async function quickTest() {
  try {
    console.log('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database...')
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const roomCount = await prisma.meeting_room.count()
    const userCount = await prisma.users.count()
    const reservationCount = await prisma.reservation.count()
    
    console.log(`‚úÖ Database ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
    console.log(`   - ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${roomCount} ‡∏´‡πâ‡∏≠‡∏á`)
    console.log(`   - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${userCount} ‡∏Ñ‡∏ô`)
    console.log(`   - ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${reservationCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    
    console.log('\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
    
    // ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ user ‡πÅ‡∏£‡∏Å
    const room = await prisma.meeting_room.findFirst()
    const user = await prisma.users.findFirst({
      where: {
        roles: {
          role_name: 'user'
        }
      },
      include: { roles: true }
    })
    
    if (!room || !user) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö')
      return
    }
    
    console.log(`‚úÖ ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á: ${room.room_name} (ID: ${room.room_id})`)
    console.log(`‚úÖ ‡πÉ‡∏ä‡πâ user: ${user.first_name} ${user.last_name}`)
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    await prisma.reservation.deleteMany({
      where: { details_r: { contains: 'QUICK_TEST' } }
    })
    
    console.log('\n3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...')
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testReservation = await prisma.reservation.create({
      data: {
        user_id: user.user_id,
        room_id: room.room_id,
        start_at: new Date('2025-07-25'),
        end_at: new Date('2025-07-25'),
        start_time: new Date('2025-07-25T10:00:00'),
        end_time: new Date('2025-07-25T12:00:00'),
        details_r: 'QUICK_TEST - ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
        status_r: 'approved'
      }
    })
    
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ID ${testReservation.reservation_id}`)
    console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${testReservation.start_at.toISOString().split('T')[0]}`)
    console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${testReservation.start_time.toTimeString().slice(0,5)} - ${testReservation.end_time.toTimeString().slice(0,5)}`)
    
    console.log('\n4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const sameDayConflicts = await prisma.reservation.findMany({
      where: {
        room_id: room.room_id,
        status_r: { in: ['pending', 'approved'] },
        AND: [
          { start_at: { lte: new Date('2025-07-25') } },
          { end_at: { gte: new Date('2025-07-25') } }
        ]
      }
    })
    
    console.log(`‚úÖ Query conflicts ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô: ${sameDayConflicts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    
    if (sameDayConflicts.length > 0) {
      console.log('   üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:')
      sameDayConflicts.forEach((res, i) => {
        console.log(`      ${i+1}. ID: ${res.reservation_id}`)
        console.log(`         ‡πÄ‡∏ß‡∏•‡∏≤: ${res.start_time.toTimeString().slice(0,5)} - ${res.end_time.toTimeString().slice(0,5)}`)
        console.log(`         ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${res.status_r}`)
      })
    }
    
    console.log('\n5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö time overlap logic...')
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô
    const overlappingTime = {
      start: new Date('2025-07-25T11:00:00'), // 11:00
      end: new Date('2025-07-25T13:00:00')    // 13:00
    }
    
    const hasOverlap = sameDayConflicts.some(existing => {
      const existingStart = existing.start_time.getHours() * 60 + existing.start_time.getMinutes()
      const existingEnd = existing.end_time.getHours() * 60 + existing.end_time.getMinutes()
      const newStart = overlappingTime.start.getHours() * 60 + overlappingTime.start.getMinutes()
      const newEnd = overlappingTime.end.getHours() * 60 + overlappingTime.end.getMinutes()
      
      console.log(`   üîç ‡πÄ‡∏ä‡πá‡∏Ñ overlap:`)
      console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤: ${existingStart} - ${existingEnd} ‡∏ô‡∏≤‡∏ó‡∏µ`)
      console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ${newStart} - ${newEnd} ‡∏ô‡∏≤‡∏ó‡∏µ`)
      
      const overlap = (newStart < existingEnd) && (existingStart < newEnd)
      console.log(`      ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${overlap ? '‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‚ùå' : '‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‚úÖ'}`)
      
      return overlap
    })
    
    console.log(`\n6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...`)
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const nextMonthConflicts = await prisma.reservation.findMany({
      where: {
        room_id: room.room_id,
        status_r: { in: ['pending', 'approved'] },
        AND: [
          { start_at: { lte: new Date('2025-08-25') } },
          { end_at: { gte: new Date('2025-08-25') } }
        ]
      }
    })
    
    console.log(`‚úÖ Query conflicts ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: ${nextMonthConflicts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    console.log(`   (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞ 0 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°)`)
    
    console.log('\n7. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö...')
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await prisma.reservation.deleteMany({
      where: { details_r: { contains: 'QUICK_TEST' } }
    })
    
    console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
    
    console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:')
    console.log('‚úÖ Database connection: OK')
    console.log('‚úÖ Create reservation: OK')
    console.log('‚úÖ Query same day: OK')
    console.log('‚úÖ Time overlap logic: OK')
    console.log('‚úÖ Cross-month query: OK')
    console.log('‚úÖ Data cleanup: OK')
    console.log('\nüöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡πä‡∏Ñ!')
    
  } catch (error) {
    console.error('‚ùå Error during test:', error.message)
    console.error('Stack:', error.stack)
  } finally {
    await prisma.$disconnect()
    console.log('\nüîå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database')
  }
}

// ‡∏£‡∏±‡∏ô test
console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö...\n')
quickTest().then(() => {
  console.log('\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
  process.exit(0)
}).catch(error => {
  console.error('üí• ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error)
  process.exit(1)
})
