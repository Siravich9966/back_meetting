// ===================================================================
// р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕Хр╕▓р╕б TESTING-GUIDE.md
// ===================================================================

const API_BASE = 'http://localhost:8000/api'

// Test helper function
async function testAPI(method, endpoint, data = null) {
  try {
    const options = {
      method,
      headers: { 'Content-Type': 'application/json' }
    }
    
    if (data && method !== 'GET') {
      options.body = JSON.stringify(data)
    }
    
    const response = await fetch(`${API_BASE}${endpoint}`, options)
    const result = await response.json()
    
    return {
      status: response.status,
      success: result.success || response.ok,
      message: result.message || response.statusText,
      data: result.data || result,
      raw: result
    }
  } catch (error) {
    return {
      status: 500,
      success: false,
      message: `Connection error: ${error.message}`,
      data: null
    }
  }
}

console.log('ЁЯзк р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕Хр╕▓р╕б TESTING-GUIDE.md')
console.log('=' * 60)

// Test 1: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б
async function testRegistration() {
  console.log('\nЁЯФР Test 1: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕кр╕бр╕▒р╕Др╕гр╕кр╕бр╕▓р╕Кр╕┤р╕Б')
  console.log('-' * 50)
  
  const testCases = [
    {
      name: 'р╕кр╕бр╕▒р╕Др╕гр╣Ар╕Ыр╣Зр╕Щ User (р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М)',
      data: {
        email: `teacher${Date.now()}@test.com`,
        password: 'password123',
        first_name: 'Test',
        last_name: 'Teacher',
        citizen_id: '1234567890123',
        position: 'р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М',
        department: 'р╕Др╕Ур╕░р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕кр╕▓р╕гр╕кр╕Щр╣Ар╕Чр╕и'
      },
      expectedTable: 'users',
      expectedRole: 'user'
    },
    {
      name: 'р╕кр╕бр╕▒р╕Др╕гр╣Ар╕Ыр╣Зр╕Щ Officer (р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣И)',
      data: {
        email: `officer${Date.now()}@test.com`,
        password: 'password123',
        first_name: 'Test',
        last_name: 'Officer',
        citizen_id: '1234567890124',
        position: 'р╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Фр╕╣р╣Бр╕ер╕лр╣Йр╕нр╕Зр╕Ыр╕гр╕░р╕Кр╕╕р╕бр╕Др╕Ур╕░р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕кр╕▓р╕гр╕кр╕Щр╣Ар╕Чр╕и',
        department: 'р╕Др╕Ур╕░р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕кр╕▓р╕гр╕кр╕Щр╣Ар╕Чр╕и'
      },
      expectedTable: 'officer',
      expectedRole: 'officer'
    },
    {
      name: 'р╕кр╕бр╕▒р╕Др╕гр╣Ар╕Ыр╣Зр╕Щ Admin (р╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ)',
      data: {
        email: `admin${Date.now()}@test.com`,
        password: 'password123',
        first_name: 'Test',
        last_name: 'Admin',
        citizen_id: '1234567890125',
        position: 'р╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ',
        department: 'р╕ир╕╣р╕Щр╕вр╣Мр╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕кр╕▓р╕гр╕кр╕Щр╣Ар╕Чр╕и'
      },
      expectedTable: 'admin',
      expectedRole: 'admin'
    }
  ]
  
  let passedTests = 0
  let totalTests = testCases.length
  
  for (const testCase of testCases) {
    console.log(`\nЁЯУЭ ${testCase.name}`)
    
    const result = await testAPI('POST', '/auth/register', testCase.data)
    
    const success = result.success
    const icon = success ? 'тЬЕ' : 'тЭМ'
    
    console.log(`   ${icon} Status: ${result.status}`)
    console.log(`   ЁЯУД Message: ${result.message}`)
    
    if (success) {
      console.log(`   ЁЯУЛ Expected: ${testCase.expectedTable} table, ${testCase.expectedRole} role`)
      passedTests++
    } else {
      console.log(`   тЪая╕П  Registration failed: ${result.message}`)
    }
    
    await new Promise(resolve => setTimeout(resolve, 500))
  }
  
  console.log(`\nЁЯУК Registration Test Results: ${passedTests}/${totalTests} р╕Ьр╣Ир╕▓р╕Щ`)
  return { passed: passedTests, total: totalTests }
}

// Test 2: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕г Login
async function testLogin() {
  console.log('\nЁЯФС Test 2: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ')
  console.log('-' * 50)
  
  // р╕кр╕бр╕▒р╕Др╕гр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щ
  const testUser = {
    email: `logintest${Date.now()}@test.com`,
    password: 'password123',
    first_name: 'Login',
    last_name: 'Test',
    citizen_id: '1234567890199',
    position: 'р╕нр╕▓р╕Ир╕▓р╕гр╕вр╣М',
    department: 'р╕Др╕Ур╕░р╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡р╕кр╕▓р╕гр╕кр╕Щр╣Ар╕Чр╕и'
  }
  
  console.log('ЁЯУЛ р╕кр╕бр╕▒р╕Др╕гр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ъ...')
  const registerResult = await testAPI('POST', '/auth/register', testUser)
  
  if (!registerResult.success) {
    console.log('тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕бр╕▒р╕Др╕гр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ър╣Др╕Фр╣Й')
    return { passed: 0, total: 1 }
  }
  
  console.log('тЬЕ р╕кр╕бр╕▒р╕Др╕гр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕Фр╕кр╕нр╕Ър╕кр╕│р╣Ар╕гр╣Зр╕И')
  
  // р╕Чр╕Фр╕кр╕нр╕Ъ Login
  console.log('\nЁЯФР р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕г Login...')
  const loginResult = await testAPI('POST', '/auth/login', {
    email: testUser.email,
    password: testUser.password
  })
  
  const success = loginResult.success && loginResult.data?.token
  const icon = success ? 'тЬЕ' : 'тЭМ'
  
  console.log(`   ${icon} Status: ${loginResult.status}`)
  console.log(`   ЁЯУД Message: ${loginResult.message}`)
  
  if (success) {
    console.log(`   ЁЯОл Token received: ${loginResult.data.token.substring(0, 20)}...`)
    console.log(`   ЁЯСд User role: ${loginResult.data.user?.role || 'N/A'}`)
  }
  
  console.log(`\nЁЯУК Login Test Results: ${success ? 1 : 0}/1 р╕Ьр╣Ир╕▓р╕Щ`)
  return { passed: success ? 1 : 0, total: 1 }
}

// Test 3: р╕Чр╕Фр╕кр╕нр╕Ъ API Protection
async function testAPIProtection() {
  console.log('\nЁЯЫбя╕П Test 3: р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ Protected APIs')
  console.log('-' * 50)
  
  // р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З protected endpoint р╣Вр╕Фр╕вр╣Др╕бр╣Ир╕бр╕╡ token
  console.log('ЁЯУЛ р╕Чр╕Фр╕кр╕нр╕Ър╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╣Вр╕Фр╕вр╣Др╕бр╣Ир╕бр╕╡ token...')
  const noTokenResult = await testAPI('GET', '/protected/user/profile')
  
  const shouldBlock = !noTokenResult.success && noTokenResult.status === 401
  const icon1 = shouldBlock ? 'тЬЕ' : 'тЭМ'
  
  console.log(`   ${icon1} No Token Test: ${noTokenResult.status} - ${noTokenResult.message}`)
  
  // р╕Чр╕Фр╕кр╕нр╕Ър╕Фр╣Йр╕зр╕в invalid token
  console.log('\nЁЯУЛ р╕Чр╕Фр╕кр╕нр╕Ър╕Фр╣Йр╕зр╕в invalid token...')
  const invalidTokenResult = await testAPI('GET', '/protected/user/profile')
  
  const options = {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer invalid-token-here'
    }
  }
  
  try {
    const response = await fetch(`${API_BASE}/protected/user/profile`, options)
    const result = await response.json()
    
    const shouldBlock2 = !result.success && response.status === 401
    const icon2 = shouldBlock2 ? 'тЬЕ' : 'тЭМ'
    
    console.log(`   ${icon2} Invalid Token Test: ${response.status} - ${result.message}`)
    
    const totalPassed = (shouldBlock ? 1 : 0) + (shouldBlock2 ? 1 : 0)
    console.log(`\nЁЯУК API Protection Test Results: ${totalPassed}/2 р╕Ьр╣Ир╕▓р╕Щ`)
    return { passed: totalPassed, total: 2 }
    
  } catch (error) {
    console.log(`   тЭМ Invalid Token Test Error: ${error.message}`)
    console.log(`\nЁЯУК API Protection Test Results: ${shouldBlock ? 1 : 0}/2 р╕Ьр╣Ир╕▓р╕Щ`)
    return { passed: shouldBlock ? 1 : 0, total: 2 }
  }
}

// Main test runner
async function runSystemTests() {
  const startTime = Date.now()
  
  try {
    const results = []
    
    results.push(await testRegistration())
    results.push(await testLogin())
    results.push(await testAPIProtection())
    
    // р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
    const totalPassed = results.reduce((sum, result) => sum + result.passed, 0)
    const totalTests = results.reduce((sum, result) => sum + result.total, 0)
    const successRate = Math.round((totalPassed / totalTests) * 100)
    const duration = Math.round((Date.now() - startTime) / 1000)
    
    console.log('\n' + '=' * 60)
    console.log('ЁЯОп р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ')
    console.log('=' * 60)
    console.log(`ЁЯУК Total Tests: ${totalTests}`)
    console.log(`тЬЕ Passed: ${totalPassed}`)
    console.log(`тЭМ Failed: ${totalTests - totalPassed}`)
    console.log(`ЁЯУИ Success Rate: ${successRate}%`)
    console.log(`тП▒я╕П  Duration: ${duration} seconds`)
    
    if (successRate >= 90) {
      console.log('\nЁЯОЙ р╕гр╕░р╕Ър╕Ър╕Ьр╣Ир╕▓р╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Гр╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Фр╕╡р╣Ар╕вр╕╡р╣Ир╕вр╕б!')
    } else if (successRate >= 75) {
      console.log('\nтЬЕ р╕гр╕░р╕Ър╕Ър╕Ьр╣Ир╕▓р╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╣Гр╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Фр╕╡')
    } else {
      console.log('\nтЪая╕П  р╕гр╕░р╕Ър╕Ър╕Хр╣Йр╕нр╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З - р╕бр╕╡р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕лр╕ер╕▓р╕вр╕Вр╣Йр╕нр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ьр╣Ир╕▓р╕Щ')
    }
    
    console.log('\nЁЯУЛ р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:')
    console.log(`   ЁЯФР Registration: ${results[0]?.passed || 0}/${results[0]?.total || 0}`)
    console.log(`   ЁЯФС Login: ${results[1]?.passed || 0}/${results[1]?.total || 0}`)
    console.log(`   ЁЯЫбя╕П  API Protection: ${results[2]?.passed || 0}/${results[2]?.total || 0}`)
    
  } catch (error) {
    console.error('\nЁЯТе р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message)
  }
}

// р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ
runSystemTests()
