// ===================================================================
// Test Advanced Multi-day Booking Logic - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
// ===================================================================
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:
// ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1/1/68 ‡∏ñ‡∏∂‡∏á 5/2/68, ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° 07:00-17:00, ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î 07:00-12:00
// ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5/2/68, ‡πÄ‡∏ß‡∏•‡∏≤ 13:00-17:00 (‡∏Ñ‡∏ß‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö 07:00-12:00)

console.log('üß™ Testing Advanced Multi-day Booking Logic...\n')

// ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô logic: 
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ multi-day booking = ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô

function analyzeCurrentLogic(existingBooking, newBooking) {
  console.log('üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')
  console.log('=' .repeat(50))
  
  const existing = {
    start_at: new Date(existingBooking.start_at),
    end_at: new Date(existingBooking.end_at),
    start_time: new Date(existingBooking.start_time),
    end_time: new Date(existingBooking.end_time)
  }
  
  const newReq = {
    start_at: new Date(newBooking.start_at),
    end_at: new Date(newBooking.end_at),
    start_time: new Date(newBooking.start_time),
    end_time: new Date(newBooking.end_time)
  }
  
  console.log('üìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤:')
  console.log(`  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${existing.start_at.toDateString()} ‡∏ñ‡∏∂‡∏á ${existing.end_at.toDateString()}`)
  console.log(`  ‡πÄ‡∏ß‡∏•‡∏≤: ${existing.start_time.toTimeString().slice(0,5)} - ${existing.end_time.toTimeString().slice(0,5)}`)
  console.log(`  ‚ö†Ô∏è  ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (5/2/68) ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 07:00-12:00`)
  
  console.log('\nüÜï ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà:')
  console.log(`  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${newReq.start_at.toDateString()} ‡∏ñ‡∏∂‡∏á ${newReq.end_at.toDateString()}`)
  console.log(`  ‡πÄ‡∏ß‡∏•‡∏≤: ${newReq.start_time.toTimeString().slice(0,5)} - ${newReq.end_time.toTimeString().slice(0,5)}`)
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const hasDateOverlap = (newReq.start_at <= existing.end_at) && (existing.start_at <= newReq.end_at)
  console.log(`\nüîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:`)
  console.log(`  1. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö: ${hasDateOverlap}`)
  
  const isMultiDayExisting = existing.start_at.getTime() !== existing.end_at.getTime()
  const isMultiDayNew = newReq.start_at.getTime() !== newReq.end_at.getTime()
  
  console.log(`  2. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ${isMultiDayExisting}`)
  console.log(`  3. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ${isMultiDayNew}`)
  
  if (isMultiDayExisting || isMultiDayNew) {
    console.log('  4. ‚ùå Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: Multi-day = conflict ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')
    console.log('     (‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)')
    return true
  }
  
  // Same day logic
  const isSameDay = (
    newReq.start_at.getFullYear() === existing.start_at.getFullYear() &&
    newReq.start_at.getMonth() === existing.start_at.getMonth() &&
    newReq.start_at.getDate() === existing.start_at.getDate()
  )
  
  if (isSameDay) {
    const newStartMinutes = newReq.start_time.getHours() * 60 + newReq.start_time.getMinutes()
    const newEndMinutes = newReq.end_time.getHours() * 60 + newReq.end_time.getMinutes()
    const existingStartMinutes = existing.start_time.getHours() * 60 + existing.start_time.getMinutes()
    const existingEndMinutes = existing.end_time.getHours() * 60 + existing.end_time.getMinutes()
    
    const hasTimeConflict = (newStartMinutes < existingEndMinutes) && (existingStartMinutes < newEndMinutes)
    console.log(`  4. ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô: ${hasTimeConflict}`)
    return hasTimeConflict
  }
  
  return false
}

function proposeNewLogic(existingBooking, newBooking) {
  console.log('\nüí° Logic ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠:')
  console.log('=' .repeat(50))
  
  const existing = {
    start_at: new Date(existingBooking.start_at),
    end_at: new Date(existingBooking.end_at),
    start_time: new Date(existingBooking.start_time),
    end_time: new Date(existingBooking.end_time)
  }
  
  const newReq = {
    start_at: new Date(newBooking.start_at),
    end_at: new Date(newBooking.end_at),
    start_time: new Date(newBooking.start_time),
    end_time: new Date(newBooking.end_time)
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà):')
  console.log(`  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${existing.start_at.toDateString()} ‡∏ñ‡∏∂‡∏á ${existing.end_at.toDateString()}`)
  console.log(`  ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1-4): ${existing.start_time.toTimeString().slice(0,5)} - ${existing.end_time.toTimeString().slice(0,5)}`)
  console.log(`  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 5): 07:00 - 12:00`)
  
  console.log('\nüîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà:')
  
  // 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö
  const hasDateOverlap = (newReq.start_at <= existing.end_at) && (existing.start_at <= newReq.end_at)
  console.log(`  1. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö: ${hasDateOverlap}`)
  
  if (!hasDateOverlap) {
    console.log('  ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ conflict - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö')
    return false
  }
  
  // 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isLastDay = newReq.start_at.getTime() === existing.end_at.getTime()
  console.log(`  2. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${isLastDay}`)
  
  if (isLastDay) {
    // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const lastDayEndMinutes = 12 * 60 // 12:00 = 720 ‡∏ô‡∏≤‡∏ó‡∏µ
    const newStartMinutes = newReq.start_time.getHours() * 60 + newReq.start_time.getMinutes()
    const newEndMinutes = newReq.end_time.getHours() * 60 + newReq.end_time.getMinutes()
    
    console.log(`  3. ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: 07:00 - 12:00 (420-720 ‡∏ô‡∏≤‡∏ó‡∏µ)`)
    console.log(`  4. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ${newReq.start_time.toTimeString().slice(0,5)} - ${newReq.end_time.toTimeString().slice(0,5)} (${newStartMinutes}-${newEndMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ)`)
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô: (start1 < end2) AND (start2 < end1)
    const hasTimeConflict = (newStartMinutes < lastDayEndMinutes) && (420 < newEndMinutes)
    console.log(`  5. ‡∏°‡∏µ time conflict: ${hasTimeConflict}`)
    
    if (!hasTimeConflict) {
      console.log('  ‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ conflict - ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô (‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á)')
    } else {
      console.log('  ‚ùå ‡∏°‡∏µ conflict - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô')
    }
    
    return hasTimeConflict
  } else {
    // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
    console.log(`  3. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏•‡∏≤‡∏á - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ 07:00-17:00`)
    
    const newStartMinutes = newReq.start_time.getHours() * 60 + newReq.start_time.getMinutes()
    const newEndMinutes = newReq.end_time.getHours() * 60 + newReq.end_time.getMinutes()
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ 07:00-17:00 (420-1020 ‡∏ô‡∏≤‡∏ó‡∏µ)
    const hasTimeConflict = (newStartMinutes < 1020) && (420 < newEndMinutes)
    console.log(`  4. ‡∏°‡∏µ time conflict: ${hasTimeConflict}`)
    return hasTimeConflict
  }
}

// Test Case ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
console.log('üéØ Test Case: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢')
console.log('=' .repeat(60))

const existingBooking = {
  start_at: '2068-01-01',
  end_at: '2068-02-05',
  start_time: '2068-01-01T07:00:00.000Z',
  end_time: '2068-01-01T17:00:00.000Z'
  // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
}

const newBooking = {
  start_at: '2068-02-05',
  end_at: '2068-02-05',
  start_time: '2068-02-05T13:00:00.000Z',
  end_time: '2068-02-05T17:00:00.000Z'
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
const currentResult = analyzeCurrentLogic(existingBooking, newBooking)
console.log(`\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${currentResult ? '‚ùå Conflict' : '‚úÖ No Conflict'}`)

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡πÉ‡∏´‡∏°‡πà
const newResult = proposeNewLogic(existingBooking, newBooking)
console.log(`\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Logic ‡πÉ‡∏´‡∏°‡πà: ${newResult ? '‚ùå Conflict' : '‚úÖ No Conflict'}`)

console.log('\n' + '=' .repeat(60))
console.log('üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:')
console.log('‚ùå Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ multi-day booking ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ = conflict')
console.log('‚úÖ Logic ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô: ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢')
console.log('')
console.log('üí° ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:')
console.log('1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå end_time_final ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢')
console.log('2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç logic ‡πÉ‡∏ô routes/reservations.js ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô')
console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')

console.log('\nüîß ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:')
console.log('‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ block ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ')
console.log('‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ 13:00-17:00 ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö 07:00-12:00 ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢')
console.log('=' .repeat(60))

// Test ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
console.log('\nüóìÔ∏è  Test Case 2: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô')
console.log('=' .repeat(60))

const crossMonthExisting = {
  start_at: '2025-01-25',
  end_at: '2025-02-05',
  start_time: '2025-01-25T08:00:00.000Z',
  end_time: '2025-01-25T16:00:00.000Z'
}

const crossMonthNew = {
  start_at: '2025-03-01',
  end_at: '2025-03-01',
  start_time: '2025-03-01T10:00:00.000Z',
  end_time: '2025-03-01T14:00:00.000Z'
}

console.log('üìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤: 25 ‡∏°.‡∏Ñ. - 5 ‡∏Å.‡∏û.')
console.log('üìÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: 1 ‡∏°‡∏µ.‡∏Ñ.')
console.log('üîç ‡∏Ñ‡∏ß‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô')

const crossMonthResult = analyzeCurrentLogic(crossMonthExisting, crossMonthNew)
console.log(`\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${crossMonthResult ? '‚ùå Conflict (‡∏ú‡∏¥‡∏î)' : '‚úÖ No Conflict (‡∏ñ‡∏π‡∏Å)'}`)

console.log('\n‚ú® ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
