// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkDatabase() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    console.log('=' * 40)

    console.log('\n1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:')
    const allBookings = await prisma.reservation.findMany({
      include: {
        users: {
          select: {
            first_name: true,
            last_name: true
          }
        },
        meeting_room: {
          select: {
            room_name: true
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      },
      take: 10 // ‡πÅ‡∏™‡∏î‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    })

    console.log(`‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allBookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    allBookings.forEach((booking, i) => {
      console.log(`\n${i+1}. ID: ${booking.reservation_id}`)
      console.log(`   ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${booking.users?.first_name || 'N/A'} ${booking.users?.last_name || 'N/A'}`)
      console.log(`   ‡∏´‡πâ‡∏≠‡∏á: ${booking.meeting_room?.room_name || 'N/A'} (ID: ${booking.room_id})`)
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.start_at?.toISOString().split('T')[0]} ‡∏ñ‡∏∂‡∏á ${booking.end_at?.toISOString().split('T')[0]}`)
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.start_time?.toTimeString().slice(0,5)} - ${booking.end_time?.toTimeString().slice(0,5)}`)
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${booking.status_r}`)
      console.log(`   ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${booking.details_r}`)
      console.log(`   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${booking.created_at?.toISOString()}`)
    })

    console.log('\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2025:')
    const augustBookings = await prisma.reservation.findMany({
      where: {
        start_at: {
          gte: new Date('2025-08-01T00:00:00.000Z'),
          lt: new Date('2025-09-01T00:00:00.000Z')
        }
      },
      include: {
        users: {
          select: {
            first_name: true,
            last_name: true
          }
        },
        meeting_room: {
          select: {
            room_name: true
          }
        }
      },
      orderBy: {
        start_at: 'asc'
      }
    })

    console.log(`‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2025: ${augustBookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    augustBookings.forEach((booking, i) => {
      console.log(`\n${i+1}. ID: ${booking.reservation_id}`)
      console.log(`   ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á: ${booking.users?.first_name || 'N/A'} ${booking.users?.last_name || 'N/A'}`)
      console.log(`   ‡∏´‡πâ‡∏≠‡∏á: ${booking.meeting_room?.room_name || 'N/A'} (ID: ${booking.room_id})`)
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.start_at?.toISOString().split('T')[0]} ‡∏ñ‡∏∂‡∏á ${booking.end_at?.toISOString().split('T')[0]}`)
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.start_time?.toTimeString().slice(0,5)} - ${booking.end_time?.toTimeString().slice(0,5)}`)
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${booking.status_r}`)
    })

    console.log('\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:')
    const rooms = await prisma.meeting_room.findMany({
      orderBy: {
        room_id: 'asc'
      }
    })

    console.log(`‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${rooms.length} ‡∏´‡πâ‡∏≠‡∏á`)
    rooms.forEach((room, i) => {
      console.log(`${i+1}. ID: ${room.room_id} - ${room.room_name}`)
    })

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
checkDatabase()
