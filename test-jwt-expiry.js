// ===================================================================
// JWT Expiry Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ JWT Token ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Role
// ===================================================================

import jwt from 'jsonwebtoken'

// Mock JWT_SECRET (‡πÉ‡∏ä‡πâ secret ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ô backend)
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secure-jwt-secret-key'

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ role
function testTokenCreation() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token...\n')
  
  const roles = [
    { role: 'user', userId: 1, email: 'user@test.com', userTable: 'users' },
    { role: 'officer', userId: 2, email: 'officer@test.com', userTable: 'officer' },
    { role: 'admin', userId: 3, email: 'admin@test.com', userTable: 'admin' },
    { role: 'executive', userId: 4, email: 'executive@test.com', userTable: 'executive' }
  ]
  
  const tokens = {}
  
  for (const roleData of roles) {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á token (‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
      const token = jwt.sign(
        {
          userId: roleData.userId,
          email: roleData.email,
          role: roleData.role,
          userTable: roleData.userTable
        },
        JWT_SECRET,
        { expiresIn: '1h' }
      )
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payload
      const decoded = jwt.decode(token)
      const expiryTime = new Date(decoded.exp * 1000)
      const timeLeft = Math.round((decoded.exp * 1000 - Date.now()) / (1000 * 60))
      
      tokens[roleData.role] = token
      
      console.log(`‚úÖ Role: ${roleData.role.toUpperCase()}`)
      console.log(`   üìß Email: ${decoded.email}`)
      console.log(`   ‚è∞ Expires: ${expiryTime.toLocaleString('th-TH')}`)
      console.log(`   ‚è±Ô∏è  Time Left: ${timeLeft} minutes`)
      console.log('')
      
    } catch (error) {
      console.log(`‚ùå Error creating token for ${roleData.role}: ${error.message}`)
    }
  }
  
  return tokens
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ verify token
function testTokenVerification(tokens) {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Verify JWT Token...\n')
  
  for (const [role, token] of Object.entries(tokens)) {
    try {
      const decoded = jwt.verify(token, JWT_SECRET)
      const timeLeft = Math.round((decoded.exp * 1000 - Date.now()) / (1000 * 60))
      
      console.log(`‚úÖ Token Verification - Role: ${role.toUpperCase()}`)
      console.log(`   üë§ User ID: ${decoded.userId}`)
      console.log(`   üìß Email: ${decoded.email}`)
      console.log(`   üè¢ Table: ${decoded.userTable}`)
      console.log(`   ‚è±Ô∏è  Time Left: ${timeLeft} minutes`)
      console.log('')
      
    } catch (error) {
      console.log(`‚ùå Token Verification Failed - Role: ${role.toUpperCase()}`)
      console.log(`   Error: ${error.name} - ${error.message}`)
      console.log('')
    }
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
function testExpiredToken() {
  console.log('‚è∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Token ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏...\n')
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const shortToken = jwt.sign(
      {
        userId: 999,
        email: 'test@expired.com',
        role: 'user',
        userTable: 'users'
      },
      JWT_SECRET,
      { expiresIn: '1s' }
    )
    
    console.log('üïê ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏...')
    
    setTimeout(() => {
      try {
        jwt.verify(shortToken, JWT_SECRET)
        console.log('‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: Token ‡∏Ñ‡∏ß‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!')
      } catch (error) {
        if (error.name === 'TokenExpiredError') {
          console.log('‚úÖ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!')
          console.log(`   Error: ${error.name} - ${error.message}`)
        } else {
          console.log(`‚ùå Unexpected error: ${error.name} - ${error.message}`)
        }
      }
    }, 2000)
    
  } catch (error) {
    console.log(`‚ùå Error in expired token test: ${error.message}`)
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runTests() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö JWT Expiry System...\n')
  console.log('============================================================\n')
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token
  const tokens = testTokenCreation()
  
  console.log('============================================================\n')
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ verify token
  testTokenVerification(tokens)
  
  console.log('============================================================\n')
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  testExpiredToken()
}

// ‡∏£‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö
runTests()
