import { Elysia } from 'elysia'
import { authMiddleware } from '../middleware/index.js'
import prisma from '../lib/prisma.js'
import path from 'path'

// ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ filesystem ‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
const isValidImageFile = (filename) => {
  const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
  const ext = path.extname(filename).toLowerCase()
  return allowedExtensions.includes(ext)
}

export const uploadRoutes = new Elysia({ prefix: '/upload' })
  .derive(async ({ headers, set }) => {
    const user = await authMiddleware({ headers }, set)
    if (!user || user.success === false) {
      return { user: null }
    }
    return { user }
  })

  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  .post('/profile-image', async ({ body, user, set }) => {
    try {
      if (!body.profileImage || !(body.profileImage instanceof File)) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
        }
      }

      const file = body.profileImage

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
      if (!isValidImageFile(file.name)) {
        set.status = 400
        return {
          success: false,
          message: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPEG, JPG, PNG, GIF, WebP)'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
      if (file.size > 5 * 1024 * 1024) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB'
        }
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡πÅ‡∏•‡∏∞ field ‡∏ï‡∏≤‡∏° role
      const role = user.role || 'user'
      let tableName, idField, userId

      switch (role) {
        case 'admin':
          tableName = 'admin'
          idField = 'admin_id'
          userId = user.admin_id || user.user_id
          break
        case 'officer':
          tableName = 'officer'
          idField = 'officer_id'
          userId = user.officer_id || user.user_id
          break
        case 'executive':
          tableName = 'executive'
          idField = 'executive_id'
          userId = user.executive_id || user.user_id
          break
        default:
          tableName = 'users'
          idField = 'user_id'
          userId = user.user_id
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database
      const arrayBuffer = await file.arrayBuffer()
      const imageBuffer = Buffer.from(arrayBuffer)

      console.log('üì∑ Profile image converted to buffer, size:', imageBuffer.length, 'bytes')

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô binary data)
      const updatedUser = await prisma[tableName].update({
        where: { [idField]: userId },
        data: {
          profile_image: imageBuffer,
          updated_at: new Date()
        },
        select: {
          [idField]: true,
          first_name: true,
          last_name: true,
          email: true,
          profile_image: true,
          role_id: true,
          department: true,
          position: true
        }
      })

      // ‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÉ‡∏ô database ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

      return {
        success: true,
        message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: updatedUser,
        imageUrl: `/api/upload/profile-image/${userId}` // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ
      }

    } catch (error) {
      console.error('Error uploading profile image:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
        error: error.message
      }
    }
  })

  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  .delete('/profile-image', async ({ user, set }) => {
    try {
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡πÅ‡∏•‡∏∞ field ‡∏ï‡∏≤‡∏° role
      const role = user.role || 'user'
      let tableName, idField, userId

      switch (role) {
        case 'admin':
          tableName = 'admin'
          idField = 'admin_id'
          userId = user.admin_id || user.user_id
          break
        case 'officer':
          tableName = 'officer'
          idField = 'officer_id'
          userId = user.officer_id || user.user_id
          break
        case 'executive':
          tableName = 'executive'
          idField = 'executive_id'
          userId = user.executive_id || user.user_id
          break
        default:
          tableName = 'users'
          idField = 'user_id'
          userId = user.user_id
      }

      // ‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const currentUser = await prisma[tableName].findUnique({
        where: { [idField]: userId },
        select: { profile_image: true }
      })

      if (!currentUser.profile_image) {
        set.status = 400
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏•‡∏ö'
        }
      }

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ)
      const updatedUser = await prisma[tableName].update({
        where: { [idField]: userId },
        data: {
          profile_image: null,
          updated_at: new Date()
        },
        select: {
          [idField]: true,
          first_name: true,
          last_name: true,
          email: true,
          profile_image: true,
          role_id: true,
          department: true,
          position: true
        }
      })

      // ‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

      return {
        success: true,
        message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: updatedUser
      }

    } catch (error) {
      console.error('Error deleting profile image:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
        error: error.message
      }
    }
  })

// ‡∏™‡∏£‡πâ‡∏≤‡∏á public routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication)
export const publicUploadRoutes = new Elysia({ prefix: '/upload' })
  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (public - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authenticate)
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 2 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: /profile-image/:userId ‡∏´‡∏£‡∏∑‡∏≠ /profile-image/:userId/:role
  .get('/profile-image/:userId/:role?', async ({ params: { userId, role }, set }) => {
    try {
      const userIdInt = parseInt(userId)
      let user = null
      let searchedTable = 'unknown'

      console.log(`üîç [GET profile-image] Requesting userId: ${userIdInt}, role: ${role || 'auto-detect'}`)

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ role parameter ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô table ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
      if (role) {
        switch (role.toLowerCase()) {
          case 'user':
            user = await prisma.users.findUnique({
              where: { user_id: userIdInt },
              select: { profile_image: true }
            })
            searchedTable = 'users'
            break
          case 'officer':
            user = await prisma.officer.findUnique({
              where: { officer_id: userIdInt },
              select: { profile_image: true }
            })
            searchedTable = 'officer'
            break
          case 'admin':
            user = await prisma.admin.findUnique({
              where: { admin_id: userIdInt },
              select: { profile_image: true }
            })
            searchedTable = 'admin'
            break
          case 'executive':
            user = await prisma.executive.findUnique({
              where: { executive_id: userIdInt },
              select: { profile_image: true }
            })
            searchedTable = 'executive'
            break
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ role parameter ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å table (backward compatibility)
        // ‡πÅ‡∏ï‡πà‡πÉ‡∏´‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà: officer ‚Üí admin ‚Üí executive ‚Üí users
        user = await prisma.officer.findUnique({
          where: { officer_id: userIdInt },
          select: { profile_image: true }
        })
        if (user) searchedTable = 'officer'

        if (!user) {
          user = await prisma.admin.findUnique({
            where: { admin_id: userIdInt },
            select: { profile_image: true }
          })
          if (user) searchedTable = 'admin'
        }

        if (!user) {
          user = await prisma.executive.findUnique({
            where: { executive_id: userIdInt },
            select: { profile_image: true }
          })
          if (user) searchedTable = 'executive'
        }

        if (!user) {
          user = await prisma.users.findUnique({
            where: { user_id: userIdInt },
            select: { profile_image: true }
          })
          if (user) searchedTable = 'users'
        }
      }

      if (!user || !user.profile_image) {
        console.log(`‚ùå [GET profile-image] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô ${searchedTable} table ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ID ${userIdInt}`)
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
        }
      }

      // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö binary data ‡πÄ‡∏õ‡πá‡∏ô image
      set.headers['Content-Type'] = 'image/jpeg' // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô image/png ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      set.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate' // üî• ‡πÑ‡∏°‡πà cache ‡πÄ‡∏•‡∏¢!
      set.headers['Pragma'] = 'no-cache'
      set.headers['Expires'] = '0'

      console.log(`‚úÖ [GET profile-image] Returning image from ${searchedTable} table for ID ${userIdInt}`)
      return user.profile_image

    } catch (error) {
      console.error('Error fetching profile image:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
        error: error.message
      }
    }
  })
