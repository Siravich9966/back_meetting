// @ts-nocheck
// ===================================================================
// Authentication APIs - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
// - POST /api/auth/register - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏° Position-based routing)
// - POST /api/auth/login    - ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö JWT token
// ===================================================================

import { Elysia } from 'elysia'
import jwt from 'jsonwebtoken'
import prisma from '../lib/prisma.js'
import { validateRegisterData, formatValidationErrors } from '../validation.js'
import { isValidDepartment, getAllDepartments } from '../utils/departments.js'
import {
  isValidPosition,
  getTableFromPosition,
  getRoleIdFromPosition,
  getDepartmentFromPosition,
  getExecutivePositionType
} from '../utils/positions.js'
import { authMiddleware } from '../middleware/index.js'

export const authRoutes = new Elysia({ prefix: '/auth' })
  // API ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (Position-based)
  .post('/register', async ({ body, set }) => {
    try {
      console.log('üìù ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
      console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', body)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ validation
      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
      const validation = validateRegisterData(body)

      if (!validation.isValid) {
        console.log('‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô:', validation.errors)
        set.status = 400
        return {
          success: false,
          message: formatValidationErrors(validation.errors)
        }
      }

      console.log('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö position ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      if (!body.position) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á')
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'
        }
      }

      if (!isValidPosition(body.position)) {
        console.log('‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', body.position)
        set.status = 400
        return {
          success: false,
          message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        }
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞ role_id ‡∏à‡∏≤‡∏Å position
      const targetTable = getTableFromPosition(body.position)
      const roleId = getRoleIdFromPosition(body.position)
      const departmentFromPosition = getDepartmentFromPosition(body.position)
      const executiveType = getExecutivePositionType(body.position)

      console.log('üìã Position Analysis:', {
        position: body.position,
        targetTable,
        roleId,
        departmentFromPosition,
        executiveType
      })

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å table (users, officer, admin, executive)
      const existingInUsers = await prisma.users.findUnique({
        where: { email: body.email }
      })

      const existingInOfficer = await prisma.officer.findUnique({
        where: { email: body.email }
      })

      const existingInAdmin = await prisma.admin.findUnique({
        where: { email: body.email }
      })

      const existingInExecutive = await prisma.executive.findUnique({
        where: { email: body.email }
      })

      if (existingInUsers || existingInOfficer || existingInAdmin || existingInExecutive) {
        console.log('‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
        set.status = 409
        return {
          success: false,
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        }
      }

      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const bcrypt = await import('bcryptjs')
      const hashedPassword = await bcrypt.hash(body.password, 10)
      console.log('üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô')

      // üéØ Position-based Registration Logic
      let newUser = null

      if (targetTable === 'users') {
        // ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí users table
        newUser = await prisma.users.create({
          data: {
            email: body.email,
            password: hashedPassword,
            first_name: body.first_name,
            last_name: body.last_name,
            role_id: roleId, // 3 = user
            citizen_id: body.citizen_id || null,
            position: body.position,
            department: body.department || null,
            // Address fields - ‡∏£‡∏±‡∏ö IDs ‡πÅ‡∏•‡∏∞ zip_code
            province_id: body.province_id ? parseInt(body.province_id) : null,
            district_id: body.district_id ? parseInt(body.district_id) : null,
            subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
            zip_code: body.zip_code ? parseInt(body.zip_code) : null,
          }
        })

      } else if (targetTable === 'officer') {
        // ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‚Üí officer table
        newUser = await prisma.officer.create({
          data: {
            email: body.email,
            password: hashedPassword,
            first_name: body.first_name,
            last_name: body.last_name,
            role_id: roleId, // 2 = officer
            citizen_id: body.citizen_id || null,
            position: body.position,
            department: departmentFromPosition || body.department,
            // Address fields - ‡∏£‡∏±‡∏ö IDs ‡πÅ‡∏•‡∏∞ zip_code  
            province_id: body.province_id ? parseInt(body.province_id) : null,
            district_id: body.district_id ? parseInt(body.district_id) : null,
            subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
            zip_code: body.zip_code ? parseInt(body.zip_code) : null,
          }
        })

      } else if (targetTable === 'executive') {
        // ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ ‚Üí executive table
        newUser = await prisma.executive.create({
          data: {
            email: body.email,
            password: hashedPassword,
            first_name: body.first_name,
            last_name: body.last_name,
            role_id: roleId, // 4 = executive
            citizen_id: body.citizen_id || null,
            position: executiveType, // university_executive ‡∏´‡∏£‡∏∑‡∏≠ faculty_executive
            department: departmentFromPosition ||
              (executiveType === 'university_executive' ? '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ' : body.department),
            // Address fields - ‡∏£‡∏±‡∏ö IDs ‡πÅ‡∏•‡∏∞ zip_code
            province_id: body.province_id ? parseInt(body.province_id) : null,
            district_id: body.district_id ? parseInt(body.district_id) : null,
            subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
            zip_code: body.zip_code ? parseInt(body.zip_code) : null,
          }
        })
      }

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô ${targetTable} table`)

      // ‡∏•‡∏ö password ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å response
      const { password, ...userWithoutPassword } = newUser

      return {
        success: true,
        message: `‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ${targetTable} table`,
        user: {
          ...userWithoutPassword,
          userTable: targetTable,
          selectedPosition: body.position
        }
      }

    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å:', err)
      console.error('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', {
        message: err.message,
        code: err.code,
        meta: err.meta
      })

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
      if (err.code === 'P2002' && err.meta?.target?.includes('citizen_id')) {
        set.status = 409
        return {
          success: false,
          message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        }
      }

      if (err.code === 'P2002' && err.meta?.target?.includes('email')) {
        set.status = 409
        return {
          success: false,
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        }
      }

      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'
      }
    }
  })

  // API ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (4-table login)
  .post('/login', async ({ body, set }) => {
    try {
      console.log('üîê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (!body.email || !body.password) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å email ‡πÅ‡∏•‡∏∞ password'
        }
      }

      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')

      // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å 4 tables
      let user = null
      let userTable = null
      let userId = null

      // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô users table ‡∏Å‡πà‡∏≠‡∏ô
      user = await prisma.users.findUnique({
        where: { email: body.email },
        include: {
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      if (user) {
        userTable = 'users'
        userId = user.user_id
      } else {
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô officer table
        user = await prisma.officer.findUnique({
          where: { email: body.email },
          include: {
            roles: {
              select: {
                role_name: true
              }
            }
          }
        })

        if (user) {
          userTable = 'officer'
          userId = user.officer_id
        } else {
          // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô admin table
          user = await prisma.admin.findUnique({
            where: { email: body.email },
            include: {
              roles: {
                select: {
                  role_name: true
                }
              }
            }
          })

          if (user) {
            userTable = 'admin'
            userId = user.admin_id
          } else {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô executive table
            user = await prisma.executive.findUnique({
              where: { email: body.email },
              include: {
                roles: {
                  select: {
                    role_name: true
                  }
                }
              }
            })

            if (user) {
              userTable = 'executive'
              userId = user.executive_id
            }
          }
        }
      }

      if (!user) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
        set.status = 401
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        }
      }

      console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      const bcrypt = await import('bcryptjs')
      const isValidPassword = await bcrypt.compare(body.password, user.password)

      if (!isValidPassword) {
        console.log('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        set.status = 401
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        }
      }

      console.log('‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
      const jwt = await import('jsonwebtoken')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô test mode (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö expiry)
      const isTestMode = body.testExpiry === true
      const expiryTime = isTestMode ? '30s' : '1h' // Test: 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ, Production: 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

      const token = jwt.sign(
        {
          userId: userId,
          email: user.email,
          role: user.roles?.role_name || 'user',
          userTable: userTable
        },
        process.env.JWT_SECRET,
        { expiresIn: expiryTime }
      )

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token payload
      const decoded = jwt.decode(token)
      const expiryTimeReadable = new Date(decoded.exp * 1000)
      const minutesLeft = Math.round((decoded.exp * 1000 - Date.now()) / (1000 * 60))

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Role: ${decoded.role}, Expires: ${expiryTimeReadable.toLocaleString('th-TH')}`)
      console.log(`üìÖ Token ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô ${minutesLeft} ‡∏ô‡∏≤‡∏ó‡∏µ ${isTestMode ? '(TEST MODE)' : ''}`)

      if (isTestMode) {
        console.log('üß™ TEST MODE: Token ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö')
      }

      // ‡∏•‡∏ö password ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å response ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö user_id ‡πÉ‡∏´‡πâ consistent
      const { password, ...userWithoutPassword } = user

      // ‡∏õ‡∏£‡∏±‡∏ö field ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å table
      if (userTable === 'officer') {
        userWithoutPassword.user_id = userWithoutPassword.officer_id
        delete userWithoutPassword.officer_id
      } else if (userTable === 'admin') {
        userWithoutPassword.user_id = userWithoutPassword.admin_id
        delete userWithoutPassword.admin_id
      } else if (userTable === 'executive') {
        userWithoutPassword.user_id = userWithoutPassword.executive_id
        delete userWithoutPassword.executive_id
      }

      return {
        success: true,
        message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        user: {
          ...userWithoutPassword,
          role: user.roles?.role_name || 'user', // ‡πÄ‡∏û‡∏¥‡πà‡∏° role field
          userTable: userTable
        },
        token: token
      }

    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:', err)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'
      }
    }
  })

  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
  .put('/profile', async ({ request, set, body }) => {
    try {
      console.log('üìù ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
      const user = await authMiddleware(request, set)
      if (user.success === false) {
        return user
      }

      // ‡πÅ‡∏¢‡∏Å token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á original userId ‡∏à‡∏≤‡∏Å JWT
      const headersString = JSON.stringify(request.headers)
      const headersObj = JSON.parse(headersString)
      const authHeader = headersObj.authorization
      const token = authHeader.substring(7)
      const decoded = jwt.verify(token, process.env.JWT_SECRET)

      console.log('üîç ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', user.email, 'Role:', user.role)
      console.log('üóÇÔ∏è Original userId from token:', decoded.userId)

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      const allowedFields = [
        'first_name', 'last_name', 'email', 'citizen_id', 
        'department', 'position', // ‡πÄ‡∏û‡∏¥‡πà‡∏° department ‡πÅ‡∏•‡∏∞ position
        'province_id', 'district_id', 'subdistrict_id', 'zip_code'
      ]
      const updateData = {}

      // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
      for (const field of allowedFields) {
        if (body[field] !== undefined) {
          updateData[field] = body[field]
        }
      }

      console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:', updateData)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (Object.keys(updateData).length === 0) {
        set.status = 400
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'
        }
      }

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° role
      let tableName, idField, userId

      switch (user.role) {
        case 'user':
          tableName = 'users'
          idField = 'user_id'
          userId = decoded.userId  // ‡πÉ‡∏ä‡πâ original userId ‡∏à‡∏≤‡∏Å token
          break
        case 'officer':
          tableName = 'officer'
          idField = 'officer_id'
          userId = decoded.userId  // ‡πÉ‡∏ä‡πâ original officer_id ‡∏à‡∏≤‡∏Å token
          break
        case 'admin':
          tableName = 'admin'
          idField = 'admin_id'
          userId = decoded.userId  // ‡πÉ‡∏ä‡πâ original admin_id ‡∏à‡∏≤‡∏Å token
          break
        case 'executive':
          tableName = 'executive'
          idField = 'executive_id'
          userId = decoded.userId  // ‡πÉ‡∏ä‡πâ original executive_id ‡∏à‡∏≤‡∏Å token
          break
        default:
          set.status = 400
          return {
            success: false,
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ role ‡πÑ‡∏î‡πâ'
          }
      }

      console.log('üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï table:', tableName, 'ID:', userId)

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const updatedUser = await prisma[tableName].update({
        where: {
          [idField]: userId
        },
        data: {
          ...updateData,
          updated_at: new Date()
        },
        select: {
          [idField]: true,
          email: true,
          first_name: true,
          last_name: true,
          citizen_id: true,
          position: true,
          department: true,
          zip_code: true,
          subdistrict_id: true,  // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å tambon_id ‡πÄ‡∏õ‡πá‡∏ô subdistrict_id
          profile_image: true,
          created_at: true,
          updated_at: true,
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

      // ‡∏õ‡∏£‡∏±‡∏ö field ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å table (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô login API)
      let responseUser = { ...updatedUser }

      if (tableName === 'officer') {
        responseUser.user_id = responseUser.officer_id
        delete responseUser.officer_id
      } else if (tableName === 'admin') {
        responseUser.user_id = responseUser.admin_id
        delete responseUser.admin_id
      } else if (tableName === 'executive') {
        responseUser.user_id = responseUser.executive_id
        delete responseUser.executive_id
      }

      return {
        success: true,
        message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        updated_fields: Object.keys(updateData),
        user: {
          ...responseUser,
          role: responseUser.roles?.role_name || user.role,
          userTable: tableName
        }
      }

    } catch (error) {
      console.error('‚ùå Error updating profile:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: ' + error.message
      }
    }
  })

  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
  .get('/profile', async ({ request, set }) => {
    try {
      console.log('üìã ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
      const user = await authMiddleware(request, set)
      if (user.success === false) {
        return user
      }

      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        profile: user
      }

    } catch (error) {
      console.error('‚ùå Error getting profile:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
      }
    }
  })
