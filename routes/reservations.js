// ===================================================================
// Reservation APIs - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
// - User APIs: ‡∏à‡∏≠‡∏á, ‡∏î‡∏π, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// - Calendar APIs: ‡∏î‡∏π‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
// - Status tracking: pending -> approved/rejected
// 
// ‡∏ï‡∏≤‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ 4.2 ‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ (User):
// 4.2.4 ‡∏î‡∏π‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
// 4.2.5 ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
// 4.2.6 ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
// ===================================================================

import { Elysia } from 'elysia'
import prisma from '../lib/prisma.js'
import { authMiddleware, isUser, isOfficer } from '../middleware/index.js'
import { 
  notifyOfficersNewReservation, 
  notifyUserReservationApproved, 
  notifyUserReservationRejected 
} from '../utils/emailService.js'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function translateStatus(status) {
  const statusMap = {
    'pending': '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    'approved': '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß', 
    'rejected': '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
    'cancelled': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  }
  return statusMap[status] || status
}

// ===================================================================
// Public Reservation APIs (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
// ===================================================================
export const reservationRoutes = new Elysia({ prefix: '/reservations' })
  
  // ‡∏î‡∏π‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (4.2.4) - Enhanced with detailed availability
  .get('/calendar/:roomId', async ({ params, query, set }) => {
    try {
      const { roomId } = params
      const { month, year, detailed = false } = query
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const room = await prisma.meeting_room.findUnique({
        where: { room_id: parseInt(roomId) }
      })
      
      if (!room) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á date range ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      const startDate = month && year ? 
        new Date(parseInt(year), parseInt(month) - 1, 1) :
        new Date(new Date().getFullYear(), new Date().getMonth(), 1)
      
      const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0)
      
      // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö date range ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô
      if (parseInt(month) === 9 && parseInt(year) === 2025) {
        console.log('üîç [BACKEND-CALENDAR] Calendar Date Range for Sep 2025:', {
          startDate: startDate.toISOString(),
          endDate: endDate.toISOString(),
          totalDaysInMonth: endDate.getDate(),
          dateRange: `${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`
        })
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà approved ‡πÅ‡∏•‡∏∞ pending ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
      const reservations = await prisma.reservation.findMany({
        where: {
          room_id: parseInt(roomId),
          status_r: { in: ['approved', 'pending'] },
          start_at: {
            gte: startDate,
            lte: endDate
          }
        },
        select: {
          reservation_id: true,
          start_at: true,
          end_at: true,
          start_time: true,
          end_time: true,
          details_r: true,
          status_r: true,
          // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• multi-day ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á)
          booking_dates: true,
          is_multi_day: true,
          users: {
            select: {
              user_id: true,
              first_name: true,
              last_name: true,
              department: true,
              position: true
            }
          }
        },
        orderBy: { start_at: 'asc' }
      })

      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ detailed view ‡πÅ‡∏™‡∏î‡∏á availability slots
      if (detailed === 'true') {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á daily availability map
        const dailyAvailability = {}
        const workingHours = { 
          start: 8, end: 22,           // 8:00-22:00
          morningEnd: 12,              // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î 12:00
          afternoonStart: 13,          // ‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏° 13:00
          lunchBreak: { start: 12, end: 13 } // ‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á 12:00-13:00
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        const totalDaysInMonth = endDate.getDate()
        
        // Debug logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        console.log('üîç [BACKEND-CALENDAR] Creating daily slots:', {
          month: parseInt(month),
          year: parseInt(year),
          totalDaysInMonth,
          willCreateDays: `1 to ${totalDaysInMonth}`
        })
        
        for (let day = 1; day <= totalDaysInMonth; day++) {
          const currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), day)
          // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç timezone issue: ‡πÉ‡∏ä‡πâ local date ‡πÅ‡∏ó‡∏ô UTC
          const dateKey = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`
          
          // Debug ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 30
          if (day === 30) {
            console.log('üîç [BACKEND-CALENDAR] Creating day 30 data:', {
              day,
              currentDate: currentDate.toString(),
              dateKey,
              dayOfMonth: currentDate.getDate(),
              month: currentDate.getMonth() + 1,
              year: currentDate.getFullYear()
            })
          }
          
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á hourly slots (8:00-22:00) - ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
        const slots = []
        for (let hour = 8; hour < 22; hour++) {
          slots.push({
            time: `${hour.toString().padStart(2, '0')}:00`,
            start_time: `${hour.toString().padStart(2, '0')}:00:00`,
            end_time: `${(hour + 1).toString().padStart(2, '0')}:00:00`,
            available: true,
            reservations: []
          })
        }          dailyAvailability[dateKey] = {
            date: dateKey,
            day_of_week: currentDate.getDay(),
            slots: slots,
            total_reservations: 0
          }
        }
        
        // helper: ‡πÅ‡∏õ‡∏•‡∏á Date ‡πÄ‡∏õ‡πá‡∏ô key ‡πÅ‡∏ö‡∏ö Local (YYYY-MM-DD) ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á dailyAvailability
        const toLocalDateKey = (d) => {
          const dt = new Date(d)
          return `${dt.getFullYear()}-${String(dt.getMonth() + 1).padStart(2, '0')}-${String(dt.getDate()).padStart(2, '0')}`
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï availability ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö multi-day non-consecutive)
        reservations.forEach(reservation => {
          const startDate = new Date(reservation.start_at)
          const endDate = new Date(reservation.end_at)
          const startTime = new Date(reservation.start_time)
          const endTime = new Date(reservation.end_time)

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢
          let dateKeys = []
          if (reservation.is_multi_day && reservation.booking_dates) {
            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏ä‡πà‡∏ô 1,3,6,9 ‡∏´‡∏£‡∏∑‡∏≠ 1,8,15,22,29)
            dateKeys = reservation.booking_dates
              .split(',')
              .map(s => s.trim())
              .filter(Boolean)
              .map(ds => toLocalDateKey(new Date(ds)))
          } else {
            // ‡πÄ‡∏î‡∏¥‡∏°: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà start ‡∏ñ‡∏∂‡∏á end (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single-day ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á)
            const currentDate = new Date(startDate)
            while (currentDate <= endDate) {
              dateKeys.push(toLocalDateKey(currentDate))
              currentDate.setDate(currentDate.getDate() + 1)
            }
          }

          // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏° dateKeys
          dateKeys.forEach(dateKey => {
            if (!dailyAvailability[dateKey]) return

            dailyAvailability[dateKey].total_reservations++

            const startHour = startTime.getHours()
            const endHour = endTime.getHours()

            dailyAvailability[dateKey].slots.forEach(slot => {
              const slotHour = parseInt(slot.time.split(':')[0])
              if (slotHour >= startHour && slotHour < endHour) {
                slot.available = false
                slot.reservations.push({
                  reservation_id: reservation.reservation_id,
                  status: reservation.status_r,
                  details: reservation.details_r,
                  time_range: `${startTime.toTimeString().slice(0,5)}-${endTime.toTimeString().slice(0,5)}`,
                  reserved_by: reservation.users ? `${reservation.users.first_name} ${reservation.users.last_name}` : 'Unknown',
                  user_department: reservation.users?.department || '',
                  user_position: reservation.users?.position || ''
                })
              }
            })
          })
        })
        
        // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        const dailyAvailabilityArray = Object.values(dailyAvailability)
        console.log('üîç [BACKEND-CALENDAR] Final daily availability data:', {
          month: parseInt(month),
          year: parseInt(year),
          totalDaysCreated: dailyAvailabilityArray.length,
          datesCreated: dailyAvailabilityArray.map(day => day.date).slice(0, 5),
          lastDate: dailyAvailabilityArray[dailyAvailabilityArray.length - 1]?.date,
          hasLastDayOfMonth: dailyAvailabilityArray.some(day => 
            new Date(day.date).getDate() === totalDaysInMonth
          )
        })
        
        return {
          success: true,
          message: `‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.room_name} (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)`,
          room: {
            room_id: room.room_id,
            room_name: room.room_name,
            department: room.department
          },
          calendar: {
            month: startDate.getMonth() + 1,
            year: startDate.getFullYear(),
            working_hours: workingHours,
            daily_availability: dailyAvailabilityArray
          }
        }
      }
      
      // Basic calendar view
      return {
        success: true,
        message: `‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á ${room.room_name}`,
        room: {
          room_id: room.room_id,
          room_name: room.room_name,
          department: room.department
        },
        calendar: {
          month: startDate.getMonth() + 1,
          year: startDate.getFullYear(),
          reservations: reservations
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error fetching calendar:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô'
      }
    }
  })

  // ===== User Report Room Problem =====
  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
  .post('/report-problem', async ({ request, body, set }) => {
    const user = await authMiddleware(request, set)
    if (user.success === false) return user

    try {
      const { room_id, comment } = body

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      if (!room_id || !comment) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
      const room = await prisma.meeting_room.findUnique({
        where: { room_id: parseInt(room_id) }
      })

      if (!room) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        }
      }

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á review
      const report = await prisma.review.create({
        data: {
          user_id: user.user_id,
          room_id: parseInt(room_id),
          comment: comment.toString().trim(),
          rating: null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          created_at: new Date()
        },
        include: {
          users: {
            select: {
              user_id: true,
              first_name: true,  // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å firstname
              last_name: true,   // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å lastname
              email: true,
              position: true,       // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å position_department
              department: true      // ‡πÄ‡∏û‡∏¥‡πà‡∏° department
            }
          },
          meeting_room: {
            select: {
              room_id: true,
              room_name: true,
              department: true
            }
          }
        }
      })

      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á ${room.room_name} ‡πÇ‡∏î‡∏¢ ${user.first_name} ${user.last_name}`)  // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ field

      return {
        success: true,
        message: '‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
        report: {
          review_id: report.review_id,
          room_name: report.meeting_room ? report.meeting_room.room_name : '‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
          comment: report.comment,
          created_at: report.created_at,
          reporter: {
            name: `${report.users.first_name} ${report.users.last_name}`,  // ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ field
            email: report.users.email,
            position: report.users.position,       // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            department: report.users.department    // ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å position_department
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Report Problem Error:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
        error: error.message
      }
    }
  })

// ===================================================================
// Protected User Reservation APIs (‡∏ï‡πâ‡∏≠‡∏á auth)
// ===================================================================
export const userReservationRoutes = new Elysia({ prefix: '/protected/reservations' })
  
  // ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  .get('/my', async ({ request, set }) => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
      const user = await authMiddleware(request, set)
      
      // ‡∏ñ‡πâ‡∏≤ middleware return error response
      if (user.success === false) {
        return user
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const reservations = await prisma.reservation.findMany({
        where: {
          user_id: user.user_id
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              location_m: true,
              capacity: true,
              department: true
            }
          },
          users: {
            select: {
              first_name: true,
              last_name: true,
              department: true
            }
          },
          officer: {
            select: {
              first_name: true,
              last_name: true
            }
          }
        },
        orderBy: {
          created_at: 'desc'
        }
      })

      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const formattedReservations = reservations.map(reservation => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const isRoomDeleted = !reservation.meeting_room
        
        return {
        reservation_id: reservation.reservation_id,
        room_name: isRoomDeleted ? '‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : reservation.meeting_room.room_name,
        location: isRoomDeleted ? null : reservation.meeting_room.location_m,
        capacity: isRoomDeleted ? null : reservation.meeting_room.capacity,
        department: isRoomDeleted ? null : reservation.meeting_room.department,
        user_department: reservation.users.department, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        start_date: reservation.start_at,
        end_date: reservation.end_at,
        start_time: reservation.start_time,
        end_time: reservation.end_time,
        status: translateStatus(reservation.status_r),
        details: reservation.details_r,
        approved_by: reservation.officer ? `${reservation.officer.first_name} ${reservation.officer.last_name}` : null,
        rejected_reason: reservation.rejected_reason,
        created_at: reservation.created_at,
        updated_at: reservation.updated_at,
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° booking_dates ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å CSV ‡πÄ‡∏õ‡πá‡∏ô array
        booking_dates: reservation.booking_dates ? reservation.booking_dates.split(',').map(d => d.trim()) : null,
        is_multi_day: reservation.is_multi_day
        }
      })

      // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
      console.log('üîç [USER-API-DEBUG] Sample reservation data:')
      if (formattedReservations.length > 0) {
        console.log('üîç booking_dates:', formattedReservations[0].booking_dates)
        console.log('üîç is_multi_day:', formattedReservations[0].is_multi_day)
      }

      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
        data: formattedReservations,
        total: formattedReservations.length
      }
      
    } catch (error) {
      console.error('‚ùå Error getting user reservations:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        error: error.message
      }
    }
  })
  
  // ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (4.2.5)
  .post('/', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
      }
    }

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const { room_id, start_at, end_at, start_time, end_time, details_r, booking_dates, is_multi_day } = body

      if (!room_id || !start_at || !end_at || !start_time || !end_time || !details_r) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ‡∏´‡πâ‡∏≠‡∏á, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ß‡∏•‡∏≤, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const room = await prisma.meeting_room.findUnique({
        where: { room_id: parseInt(room_id) }
      })

      if (!room) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á
      if (room.status_m !== 'available') {
        set.status = 400
        return {
          success: false,
          message: '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
        }
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      const startDate = new Date(start_at)
      let endDate = new Date(end_at)
      const startTime = new Date(start_time)
      const endTime = new Date(end_time)

      console.log(`üîç Multi-day booking check:`, {
        is_multi_day,
        booking_dates: booking_dates?.length || 'N/A',
        start_at, 
        end_at,
        dates: booking_dates
      })

      // üöÄ Multi-day booking logic
      if (is_multi_day && booking_dates && booking_dates.length > 1) {
        console.log(`üìÖ Processing multi-day booking: ${booking_dates.length} days`)

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conflict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
        for (const dateStr of booking_dates) {
          const checkDate = new Date(dateStr)
          
          console.log(`üîç Checking conflict for date: ${dateStr}`)
          
          const conflictReservations = await prisma.reservation.findMany({
            where: {
              room_id: parseInt(room_id),
              status_r: {
                in: ['pending', 'approved']
              },
              start_at: checkDate,
              end_at: checkDate
            }
          })

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
          const hasTimeConflict = conflictReservations.some(existing => {
            const existingStartTime = new Date(existing.start_time)
            const existingEndTime = new Date(existing.end_time)
            
            const newStartMinutes = startTime.getHours() * 60 + startTime.getMinutes()
            const newEndMinutes = endTime.getHours() * 60 + endTime.getMinutes()
            const existingStartMinutes = existingStartTime.getHours() * 60 + existingStartTime.getMinutes()
            const existingEndMinutes = existingEndTime.getHours() * 60 + existingEndTime.getMinutes()

            return (newStartMinutes < existingEndMinutes) && (existingStartMinutes < newEndMinutes)
          })

          if (hasTimeConflict) {
            set.status = 409
            return {
              success: false,
              message: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date(dateStr).toLocaleDateString('th-TH')} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô`,
              conflict_date: dateStr
            }
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-day
        const newReservation = await prisma.reservation.create({
          data: {
            user_id: user.user_id,
            room_id: parseInt(room_id),
            start_at: startDate,      // ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            end_at: endDate,          // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            start_time: startTime,    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°
            end_time: endTime,        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
            details_r: details_r.trim(),
            status_r: 'pending',
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö multi-day
            booking_dates: booking_dates.join(','), // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô CSV string
            is_multi_day: true
          },
          include: {
            meeting_room: {
              select: {
                room_name: true,
                department: true
              }
            }
          }
        })

        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á multi-day reservation: ${user.first_name} ‡∏à‡∏≠‡∏á ${room.room_name} (${booking_dates.length} ‡∏ß‡∏±‡∏ô)`)

        // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
        try {
          const emailResult = await notifyOfficersNewReservation(newReservation.reservation_id)
          if (emailResult.success) {
            console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${emailResult.sentTo} ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`)
          } else {
            console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ${emailResult.reason || emailResult.error}`)
          }
        } catch (emailError) {
          console.error('‚ùå Error sending email notification:', emailError)
          // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Email error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        }

        return {
          success: true,
          message: `‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${booking_dates.length} ‡∏ß‡∏±‡∏ô ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`,
          reservation: {
            reservation_id: newReservation.reservation_id,
            room_name: newReservation.meeting_room.room_name,
            department: newReservation.meeting_room.department,
            start_at: newReservation.start_at,
            end_at: newReservation.end_at,
            start_time: newReservation.start_time,
            end_time: newReservation.end_time,
            details: newReservation.details_r,
            status: newReservation.status_r,
            booking_dates: booking_dates,
            is_multi_day: true,
            total_days: booking_dates.length,
            created_at: newReservation.created_at
          }
        }
      }

      // üîÑ Single day booking logic (existing code)
      console.log(`üîç Single day booking: ${start_at}`)
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ end_at ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏ß‡∏•‡∏≤ 22:00:00
      if (startDate.toDateString() === endDate.toDateString()) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á endDate ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö startDate ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 22:00
        endDate = new Date(startDate)
        endDate.setHours(22, 0, 0, 0) // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 22:00:00
        console.log(`üîß Fixed endDate for same day to 22:00: ${endDate.toISOString()}`)
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logic ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      if (startDate > endDate) {
        set.status = 400
        return {
          success: false,
          message: '‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
        }
      }

      if (startTime >= endTime) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
        }
      }

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà 08:00-22:00 (‡∏£‡∏ß‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á 12:00-13:00)
      const startHour = startTime.getHours()
      const endHour = endTime.getHours()
      const startMinutes = startTime.getMinutes()
      const endMinutes = endTime.getMinutes()
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ 08:00-22:00
      if (startHour < 8 || startHour > 22 || endHour < 8 || endHour > 22) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: 08:00-22:00 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 22:00
      if (endHour > 22 || (endHour === 22 && endMinutes > 0)) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 22:00 ‡∏ô.'
        }
      }

      // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á 12:00-13:00 ‡πÑ‡∏î‡πâ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ö‡∏≠‡∏Å)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö (Simplified Logic)
      console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conflict: room ${room_id}, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${start_at} ‡πÄ‡∏ß‡∏•‡∏≤ ${start_time}-${end_time}`)
      
      const conflictReservations = await prisma.reservation.findMany({
        where: {
          room_id: parseInt(room_id),
          status_r: {
            in: ['pending', 'approved'] // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö rejected
          },
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (single day booking)
          start_at: startDate, // ‡πÉ‡∏ä‡πâ DateTime object ‡πÅ‡∏ó‡∏ô string
          end_at: endDate     // ‡πÉ‡∏ä‡πâ DateTime object ‡πÅ‡∏ó‡∏ô string
        }
      })

      console.log(`üìä ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô: ${conflictReservations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
      const hasTimeConflict = conflictReservations.some(existing => {
        const existingStartTime = new Date(existing.start_time)
        const existingEndTime = new Date(existing.end_time)
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô minutes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        const newStartMinutes = startTime.getHours() * 60 + startTime.getMinutes()
        const newEndMinutes = endTime.getHours() * 60 + endTime.getMinutes()
        const existingStartMinutes = existingStartTime.getHours() * 60 + existingStartTime.getMinutes()
        const existingEndMinutes = existingEndTime.getHours() * 60 + existingEndTime.getMinutes()

        // Time overlap: (start1 < end2) AND (start2 < end1)
        const overlap = (newStartMinutes < existingEndMinutes) && (existingStartMinutes < newEndMinutes)
        
        if (overlap) {
          console.log(`‚ö†Ô∏è  Time conflict detected:`)
          console.log(`   Existing ID ${existing.reservation_id}: ${existingStartTime.toTimeString().slice(0,5)}-${existingEndTime.toTimeString().slice(0,5)}`)
          console.log(`   New request: ${startTime.toTimeString().slice(0,5)}-${endTime.toTimeString().slice(0,5)}`)
        }
        
        return overlap
      })

      if (hasTimeConflict) {
        set.status = 409
        return {
          success: false,
          message: '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)',
          conflicts: conflictReservations.map(r => ({
            reservation_id: r.reservation_id,
            start_at: r.start_at,
            end_at: r.end_at,
            start_time: r.start_time,
            end_time: r.end_time,
            status: r.status_r,
            details: r.details_r
          }))
        }
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (single day)
      const newReservation = await prisma.reservation.create({
        data: {
          user_id: user.user_id,
          room_id: parseInt(room_id),
          start_at: startDate,
          end_at: endDate,
          start_time: startTime,
          end_time: endTime,
          details_r: details_r.trim(),
          status_r: 'pending', // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
          is_multi_day: false  // single day booking
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true
            }
          }
        }
      })

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ${user.first_name} ‡∏à‡∏≠‡∏á ${room.room_name}`)

      // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
      try {
        const emailResult = await notifyOfficersNewReservation(newReservation.reservation_id)
        if (emailResult.success) {
          console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${emailResult.sentTo} ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`)
        } else {
          console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: ${emailResult.reason || emailResult.error}`)
        }
      } catch (emailError) {
        console.error('‚ùå Error sending email notification:', emailError)
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Email error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      }

      return {
        success: true,
        message: '‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
        reservation: {
          reservation_id: newReservation.reservation_id,
          room_name: newReservation.meeting_room.room_name,
          department: newReservation.meeting_room.department,
          start_at: newReservation.start_at,
          end_at: newReservation.end_at,
          start_time: newReservation.start_time,
          end_time: newReservation.end_time,
          details: newReservation.details_r,
          status: newReservation.status_r,
          created_at: newReservation.created_at
        }
      }

    } catch (error) {
      console.error('‚ùå Error creating reservation:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
      }
    }
  })

  // ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  .get('/', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }

    try {
      const { status, limit = 10, offset = 0 } = query
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter conditions
      const where = {
        user_id: user.user_id
      }
      
      if (status) {
        where.status_r = status
      }

      // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
      const reservations = await prisma.reservation.findMany({
        where,
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true,
              location_m: true
            }
          },
          officer: {
            select: {
              first_name: true,
              last_name: true
            }
          }
        },
        orderBy: { created_at: 'desc' },
        take: parseInt(limit),
        skip: parseInt(offset)
      })

      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const total = await prisma.reservation.count({ where })

      return {
        success: true,
        message: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ${user.first_name} ${user.last_name}`,
        reservations: reservations.map(r => {
          const isRoomDeleted = !r.meeting_room
          return {
          reservation_id: r.reservation_id,
          room_name: isRoomDeleted ? '‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : r.meeting_room.room_name,
          department: isRoomDeleted ? null : r.meeting_room.department,
          location: isRoomDeleted ? null : r.meeting_room.location_m,
          start_at: r.start_at,
          end_at: r.end_at,
          start_time: r.start_time,
          end_time: r.end_time,
          details: r.details_r,
          status: translateStatus(r.status_r),
          approved_by: r.officer ? `${r.officer.first_name} ${r.officer.last_name}` : null,
          created_at: r.created_at,
          updated_at: r.updated_at
          }
        }),
        pagination: {
          total,
          limit: parseInt(limit),
          offset: parseInt(offset),
          has_more: total > (parseInt(offset) + parseInt(limit))
        }
      }

    } catch (error) {
      console.error('‚ùå Error fetching user reservations:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  .get('/:id', async ({ request, params, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }

    try {
      const { id } = params

      const reservation = await prisma.reservation.findUnique({
        where: { 
          reservation_id: parseInt(id)
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true,
              location_m: true,
              capacity: true
            }
          },
          officer: {
            select: {
              first_name: true,
              last_name: true,
              department: true
            }
          }
        }
      })

      if (!reservation) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (reservation.user_id !== user.user_id) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô'
        }
      }

      return {
        success: true,
        message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
        reservation: {
          reservation_id: reservation.reservation_id,
          room: {
            room_name: reservation.meeting_room?.room_name,
            department: reservation.meeting_room?.department,
            location: reservation.meeting_room?.location_m,
            capacity: reservation.meeting_room?.capacity
          },
          booking_details: {
            start_at: reservation.start_at,
            end_at: reservation.end_at,
            start_time: reservation.start_time,
            end_time: reservation.end_time,
            details: reservation.details_r,
            status: translateStatus(reservation.status_r)
          },
          approval: {
            approved_by: reservation.officer ? 
              `${reservation.officer.first_name} ${reservation.officer.last_name}` : null,
            officer_department: reservation.officer?.department,
            rejected_reason: reservation.rejected_reason || null
          },
          timestamps: {
            created_at: reservation.created_at,
            updated_at: reservation.updated_at
          }
        }
      }

    } catch (error) {
      console.error('‚ùå Error fetching reservation details:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  .put('/:id', async ({ request, params, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }

    try {
      const { id } = params
      const { start_at, end_at, start_time, end_time, details_r } = body

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const existingReservation = await prisma.reservation.findUnique({
        where: { reservation_id: parseInt(id) },
        include: {
          meeting_room: {
            select: {
              room_name: true
            }
          }
        }
      })

      if (!existingReservation) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
      if (existingReservation.user_id !== user.user_id) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pending
      if (existingReservation.status_r !== 'pending') {
        set.status = 400
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${translateStatus(existingReservation.status_r)}" ‡πÑ‡∏î‡πâ`,
          current_status: translateStatus(existingReservation.status_r)
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      if (!start_at || !end_at || !start_time || !end_time || !details_r) {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
        }
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      const startDate = new Date(start_at)
      const endDate = new Date(end_at)
      const startTime = new Date(start_time)
      const endTime = new Date(end_time)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö logic ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      if (startDate > endDate) {
        set.status = 400
        return {
          success: false,
          message: '‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
        }
      }

      if (startTime >= endTime) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
      // ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const allReservationsInRoom = await prisma.reservation.findMany({
        where: {
          room_id: existingReservation.room_id,
          reservation_id: {
            not: parseInt(id) // ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          },
          status_r: {
            in: ['pending', 'approved']
          }
        }
      })

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conflict ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      const conflictReservations = allReservationsInRoom.filter(reservation => {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        const reservationStartDate = new Date(reservation.start_at)
        const reservationEndDate = new Date(reservation.end_at)
        
        const datesOverlap = (reservationStartDate <= endDate && reservationEndDate >= startDate)
        
        if (!datesOverlap) {
          return false // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
        const reservationStartTime = new Date(reservation.start_time)
        const reservationEndTime = new Date(reservation.end_time)
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: ‡∏ñ‡πâ‡∏≤ (start < other_end) ‡πÅ‡∏•‡∏∞ (end > other_start) = ‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        const timesOverlap = (startTime < reservationEndTime && endTime > reservationStartTime)
        
        return timesOverlap
      })

      console.log('üîç Conflict check details:', {
        roomId: existingReservation.room_id,
        excludeReservationId: parseInt(id),
        newTimeRange: `${startTime.toISOString()} - ${endTime.toISOString()}`,
        allReservationsCount: allReservationsInRoom.length,
        conflictsFound: conflictReservations.length,
        conflicts: conflictReservations.map(r => ({
          id: r.reservation_id,
          time: `${new Date(r.start_time).toISOString()} - ${new Date(r.end_time).toISOString()}`
        }))
      })

      if (conflictReservations.length > 0) {
        set.status = 409
        return {
          success: false,
          message: '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô'
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const updatedReservation = await prisma.reservation.update({
        where: { reservation_id: parseInt(id) },
        data: {
          start_at: startDate,
          end_at: endDate,
          start_time: startTime,
          end_time: endTime,
          details_r: details_r.trim(),
          updated_at: new Date()
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true
            }
          }
        }
      })

      console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${user.first_name} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${existingReservation.meeting_room.room_name}`)

      return {
        success: true,
        message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        reservation: {
          reservation_id: updatedReservation.reservation_id,
          room_name: updatedReservation.meeting_room.room_name,
          department: updatedReservation.meeting_room.department,
          start_at: updatedReservation.start_at,
          end_at: updatedReservation.end_at,
          start_time: updatedReservation.start_time,
          end_time: updatedReservation.end_time,
          details: updatedReservation.details_r,
          status: updatedReservation.status_r,
          updated_at: updatedReservation.updated_at
        }
      }

    } catch (error) {
      console.error('‚ùå Error updating reservation:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á (4.2.6)
  .delete('/:id', async ({ request, params, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }

    try {
      const { id } = params

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const existingReservation = await prisma.reservation.findUnique({
        where: { reservation_id: parseInt(id) },
        include: {
          meeting_room: {
            select: {
              room_name: true
            }
          }
        }
      })

      if (!existingReservation) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á
      if (existingReservation.user_id !== user.user_id) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ pending ‡πÅ‡∏•‡∏∞ approved
      if (existingReservation.status_r === 'rejected') {
        set.status = 400
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ'
        }
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô cancelled ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
      await prisma.reservation.update({
        where: { reservation_id: parseInt(id) },
        data: { 
          status_r: 'cancelled',
          updated_at: new Date()
        }
      })

      console.log(`‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${user.first_name} ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${existingReservation.meeting_room.room_name}`)

      return {
        success: true,
        message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        cancelled_reservation: {
          reservation_id: existingReservation.reservation_id,
          room_name: existingReservation.meeting_room.room_name,
          start_at: existingReservation.start_at,
          end_at: existingReservation.end_at,
          previous_status: existingReservation.status_r
        }
      }

    } catch (error) {
      console.error('‚ùå Error cancelling reservation:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User Dashboard)
  .get('/statistics/room-usage', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
      }
    }
    
    try {
      console.log('üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (User)')
      
      const { year, month } = query
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á date filter
      let dateFilter = {}
      if (year || month) {
        const startDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 1) - 1,
          1
        )
        const endDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 12),
          0
        )
        
        dateFilter = {
          start_at: {
            gte: startDate,
            lte: endDate
          }
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà approved)
      const roomUsage = await prisma.reservation.groupBy({
        by: ['room_id'],
        where: {
          status_r: 'approved',
          ...dateFilter
        },
        _count: {
          reservation_id: true
        }
      })
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const rooms = await prisma.meeting_room.findMany({
        select: {
          room_id: true,
          room_name: true,
          capacity: true,
          department: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      const roomUsageStats = rooms.map(room => {
        const usage = roomUsage.find(usage => usage.room_id === room.room_id)
        return {
          room_id: room.room_id,
          room_name: room.room_name,
          capacity: room.capacity,
          department: room.department,
          bookings: usage ? usage._count.reservation_id : 0
        }
      })
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
      roomUsageStats.sort((a, b) => b.bookings - a.bookings)
      
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á: ${roomUsageStats.length} ‡∏´‡πâ‡∏≠‡∏á (User)`)
      
      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
        data: roomUsageStats,
        total_rooms: roomUsageStats.length,
        filter: {
          year: year || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          month: month || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error getting room usage statistics (User):', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á',
        error: error.message
      }
    }
  })

  // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User Dashboard) 
  .get('/statistics/department-stats', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå user
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isUser(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
      }
    }
    
    try {
      console.log('üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞ (User)')
      
      const { year, month } = query
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á date filter
      let dateFilter = {}
      if (year || month) {
        const startDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 1) - 1,
          1
        )
        const endDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 12),
          0
        )
        
        dateFilter = {
          start_at: {
            gte: startDate,
            lte: endDate
          }
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà approved)
      const departmentStats = await prisma.reservation.groupBy({
        by: ['user_id'],
        where: {
          status_r: 'approved',
          ...dateFilter
        },
        _count: {
          reservation_id: true
        }
      })
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ department
      const userIds = departmentStats.map(stat => stat.user_id)
      const users = await prisma.users.findMany({
        where: {
          user_id: { in: userIds }
        },
        select: {
          user_id: true,
          department: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞
      const departmentMap = {}
      departmentStats.forEach(stat => {
        const userFound = users.find(u => u.user_id === stat.user_id)
        const department = userFound?.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞'
        
        if (departmentMap[department]) {
          departmentMap[department] += stat._count.reservation_id
        } else {
          departmentMap[department] = stat._count.reservation_id
        }
      })
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      const departmentStatsArray = Object.entries(departmentMap).map(([department, bookings]) => ({
        department,
        bookings
      }))
      
      departmentStatsArray.sort((a, b) => b.bookings - a.bookings)
      
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞: ${departmentStatsArray.length} ‡∏Ñ‡∏ì‡∏∞ (User)`)
      
      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞',
        data: departmentStatsArray,
        total_departments: departmentStatsArray.length,
        filter: {
          year: year || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          month: month || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error getting department statistics (User):', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞',
        error: error.message
      }
    }
  })

// ===================================================================
// Officer Reservation Management APIs (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)
// ===================================================================
export const officerReservationRoutes = new Elysia({ prefix: '/protected/officer/reservations' })
  
  // ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
  .get('/', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isOfficer(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { status = 'pending', limit = 20, offset = 0 } = query
      
      // ‚ö†Ô∏è SECURITY FIX: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      if (!user.position_department) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
        }
      }
      
      console.log(`üè¢ [OFFICER] ${user.position} can access department: ${user.position_department}`)
      
      // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)
      const today = new Date()
      today.setHours(0, 0, 0, 0) // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô
      
      const where = {
        meeting_room: {
          department: user.position_department // ‚ö†Ô∏è SECURITY FIX: ‡πÉ‡∏ä‡πâ position_department
        },
        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏¢‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        start_at: {
          gte: today // ‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        }
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç status ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'all'
      if (status && status !== 'all') {
        where.status_r = status
      }

      const reservations = await prisma.reservation.findMany({
        where,
        include: {
          users: {
            select: {
              first_name: true,
              last_name: true,
              email: true,
              department: true
            }
          },
          meeting_room: {
            select: {
              room_name: true,
              location_m: true,
              capacity: true
            }
          },
          officer: {
            select: {
              first_name: true,
              last_name: true
            }
          }
        },
        orderBy: { created_at: 'desc' }, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        take: parseInt(limit),
        skip: parseInt(offset)
      })

      const total = await prisma.reservation.count({ where })

      return {
        success: true,
        message: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞ ${user.department} (${reservations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
        department: user.department,
        reservations: reservations.map(r => {
          const isRoomDeleted = !r.meeting_room
          return {
          reservation_id: r.reservation_id,
          room_name: isRoomDeleted ? '‚ö†Ô∏è ‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : r.meeting_room.room_name,
          location: isRoomDeleted ? null : r.meeting_room.location_m,
          capacity: isRoomDeleted ? null : r.meeting_room.capacity,
          start_date: r.start_at,
          end_date: r.end_at,
          start_time: r.start_time,
          end_time: r.end_time,
          details: r.details_r,
          status: translateStatus(r.status_r),
          reserved_by: `${r.users.first_name} ${r.users.last_name}`,
          user_email: r.users.email,
          user_department: r.users.department,
          processed_by: r.officer ? `${r.officer.first_name} ${r.officer.last_name}` : null,
          created_at: r.created_at,
          updated_at: r.updated_at,
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° booking_dates ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å CSV ‡πÄ‡∏õ‡πá‡∏ô array
          booking_dates: r.booking_dates ? r.booking_dates.split(',').map(d => d.trim()) : null,
          is_multi_day: r.is_multi_day
          }
        }),
        pagination: {
          total,
          limit: parseInt(limit),
          offset: parseInt(offset),
          has_more: total > (parseInt(offset) + parseInt(limit))
        }
      }

    } catch (error) {
      console.error('‚ùå Error fetching officer reservations:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  .put('/:id/approve', async ({ request, params, body, set }) => {
    console.log('üî• [APPROVE API] Called with params:', params)
    console.log('üî• [APPROVE API] Body:', body)
    console.log('üî• [APPROVE API] Request method:', request.method)
    console.log('üî• [APPROVE API] Request URL:', request.url)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
    const user = await authMiddleware(request, set)
    console.log('üî• [APPROVE API] Auth result:', user)
    if (user.success === false) return user
    
    if (!isOfficer(user)) {
      console.log('üî• [APPROVE API] User is not officer:', user.role)
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const reservationId = parseInt(params.id)
      const { note } = body

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const reservation = await prisma.reservation.findUnique({
        where: { reservation_id: reservationId },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true
            }
          },
          users: {
            select: {
              first_name: true,
              last_name: true,
              email: true
            }
          }
        }
      })

      if (!reservation) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        }
      }

      // ‚ö†Ô∏è SECURITY FIX: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      if (!user.position_department) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
        }
      }
      
      if (reservation.meeting_room.department !== user.position_department) {
        set.status = 403
        return {
          success: false,
          message: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ${reservation.meeting_room.department} (‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ${user.position_department})`
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (reservation.status_r !== 'pending') {
        set.status = 400
        return {
          success: false,
          message: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${translateStatus(reservation.status_r)}" ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ`
        }
      }

      // ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const updatedReservation = await prisma.reservation.update({
        where: { reservation_id: reservationId },
        data: {
          status_r: 'approved',
          officer_id: user.officer_id, // ‚úÖ ‡πÉ‡∏ä‡πâ officer_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          details_r: note ? `${reservation.details_r}\n\n‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ${note}` : reservation.details_r,
          updated_at: new Date()
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              location_m: true
            }
          }
        }
      })

      console.log(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${user.first_name} ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${reservation.meeting_room.room_name}`)

      // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      try {
        const emailResult = await notifyUserReservationApproved(reservationId, user.officer_id)
        if (emailResult.success) {
          console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${reservation.users.email}`)
        } else {
          console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ: ${emailResult.reason || emailResult.error}`)
        }
      } catch (emailError) {
        console.error('‚ùå Error sending approval email:', emailError)
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Email error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      }

      return {
        success: true,
        message: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        reservation: {
          reservation_id: updatedReservation.reservation_id,
          room_name: updatedReservation.meeting_room.room_name,
          location: updatedReservation.meeting_room.location_m,
          start_date: updatedReservation.start_at,
          end_date: updatedReservation.end_at,
          start_time: updatedReservation.start_time,
          end_time: updatedReservation.end_time,
          details: updatedReservation.details_r,
          status: updatedReservation.status_r,
          approved_by: `${user.first_name} ${user.last_name}`,
          updated_at: updatedReservation.updated_at
        },
        notification: {
          user_name: `${reservation.users.first_name} ${reservation.users.last_name}`,
          user_email: reservation.users.email
        }
      }

    } catch (error) {
      console.error('‚ùå Error approving reservation:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  .put('/:id/reject', async ({ request, params, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isOfficer(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const reservationId = parseInt(params.id)
      const { reason } = body

      if (!reason || reason.trim() === '') {
        set.status = 400
        return {
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const reservation = await prisma.reservation.findUnique({
        where: { reservation_id: reservationId },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              department: true
            }
          },
          users: {
            select: {
              first_name: true,
              last_name: true,
              email: true
            }
          }
        }
      })

      if (!reservation) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        }
      }

      // ‚ö†Ô∏è SECURITY FIX: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      if (!user.position_department) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
        }
      }
      
      if (reservation.meeting_room.department !== user.position_department) {
        set.status = 403
        return {
          success: false,
          message: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ${reservation.meeting_room.department} (‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ${user.position_department})`
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (reservation.status_r !== 'pending') {
        set.status = 400
        return {
          success: false,
          message: `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${translateStatus(reservation.status_r)}" ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ`
        }
      }

      // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const updatedReservation = await prisma.reservation.update({
        where: { reservation_id: reservationId },
        data: {
          status_r: 'rejected',
          officer_id: user.officer_id, // ‚úÖ ‡πÉ‡∏ä‡πâ officer_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          rejected_reason: reason.trim(),  // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏¢‡∏Å
          updated_at: new Date()
        },
        include: {
          meeting_room: {
            select: {
              room_name: true,
              location_m: true
            }
          }
        }
      })

      console.log(`‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${user.first_name} ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${reservation.meeting_room.room_name}`)

      // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
      try {
        const emailResult = await notifyUserReservationRejected(reservationId, user.officer_id, reason.trim())
        if (emailResult.success) {
          console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${reservation.users.email}`)
        } else {
          console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ: ${emailResult.reason || emailResult.error}`)
        }
      } catch (emailError) {
        console.error('‚ùå Error sending rejection email:', emailError)
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Email error ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      }

      return {
        success: true,
        message: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        reservation: {
          reservation_id: updatedReservation.reservation_id,
          room_name: updatedReservation.meeting_room.room_name,
          location: updatedReservation.meeting_room.location_m,
          start_date: updatedReservation.start_at,
          end_date: updatedReservation.end_at,
          status: updatedReservation.status_r,
          rejected_by: `${user.first_name} ${user.last_name}`,
          rejection_reason: reason.trim(),
          updated_at: updatedReservation.updated_at
        },
        notification: {
          user_name: `${reservation.users.first_name} ${reservation.users.last_name}`,
          user_email: reservation.users.email
        }
      }

    } catch (error) {
      console.error('‚ùå Error rejecting reservation:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á'
      }
    }
  })

  // üìä API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
  .get('/statistics/room-usage', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isOfficer(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
      }
    }
    
    try {
      console.log('üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°')
      
      const { year, month, department } = query
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á date filter ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏
      let dateFilter = {}
      if (year || month) {
        const startDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 1) - 1,
          1
        )
        const endDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 12),
          0
        )
        
        dateFilter = {
          start_at: {
            gte: startDate,
            lte: endDate
          }
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á department filter ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      let departmentFilter = {}
      if (department) {
        departmentFilter = {
          users: {
            department: department
          }
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà approved
      const reservations = await prisma.reservation.groupBy({
        by: ['room_id'],
        where: {
          status_r: 'approved',
          ...dateFilter,
          ...departmentFilter
        },
        _count: {
          reservation_id: true
        }
      })
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const rooms = await prisma.meeting_room.findMany({
        select: {
          room_id: true,
          room_name: true,
          location_m: true,
          capacity: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      const roomUsageStats = rooms.map(room => {
        const reservationCount = reservations.find(r => r.room_id === room.room_id)
        return {
          room_id: room.room_id,
          room_name: room.room_name,
          location: room.location_m,
          capacity: room.capacity,
          bookings: reservationCount ? reservationCount._count.reservation_id : 0
        }
      })
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      roomUsageStats.sort((a, b) => b.bookings - a.bookings)
      
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${roomUsageStats.length} ‡∏´‡πâ‡∏≠‡∏á`)
      
      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
        data: roomUsageStats,
        total_rooms: roomUsageStats.length,
        filter: {
          year: year || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          month: month || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          department: department || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error getting room usage statistics:', error)
      console.error('Error details:', error.message)
      console.error('Error stack:', error.stack)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
        error: error.message
      }
    }
  })

  // üìä API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞
  .get('/statistics/department-stats', async ({ request, query, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isOfficer(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥'
      }
    }
    
    try {
      console.log('üìä ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞')
      
      const { year, month } = query
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á date filter
      let dateFilter = {}
      if (year || month) {
        const startDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 1) - 1,
          1
        )
        const endDate = new Date(
          parseInt(year || new Date().getFullYear()),
          parseInt(month || 12),
          0
        )
        
        dateFilter = {
          start_at: {
            gte: startDate,
            lte: endDate
          }
        }
      }
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞
      const departmentStats = await prisma.reservation.groupBy({
        by: ['user_id'],
        where: {
          status_r: 'approved',
          ...dateFilter
        },
        _count: {
          reservation_id: true
        }
      })
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤ department
      const userIds = departmentStats.map(stat => stat.user_id)
      const users = await prisma.users.findMany({
        where: {
          user_id: { in: userIds }
        },
        select: {
          user_id: true,
          department: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞
      const departmentMap = {}
      departmentStats.forEach(stat => {
        const user = users.find(u => u.user_id === stat.user_id)
        const department = user?.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        
        if (departmentMap[department]) {
          departmentMap[department] += stat._count.reservation_id
        } else {
          departmentMap[department] = stat._count.reservation_id
        }
      })
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
      const departmentStatsArray = Object.entries(departmentMap).map(([department, bookings]) => ({
        department,
        bookings
      }))
      
      departmentStatsArray.sort((a, b) => b.bookings - a.bookings)
      
      console.log(`‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞: ${departmentStatsArray.length} ‡∏Ñ‡∏ì‡∏∞`)
      
      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞',
        data: departmentStatsArray,
        total_departments: departmentStatsArray.length,
        filter: {
          year: year || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
          month: month || '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error getting department statistics:', error)
      console.error('Error details:', error.message)
      console.error('Error stack:', error.stack)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞',
        error: error.message
      }
    }
  })

  // ===== Officer Reports =====
  .get('/reports', async ({ request, query, set }) => {
    const user = await authMiddleware(request, set)
    if (user.success === false) return user

    if (!isOfficer(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Officer Reports - User:', user.email, 'Position:', user.position)
      const { period = 'current_month' } = query

      // ‚ö†Ô∏è SECURITY FIX: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
      if (!user.position_department) {
        set.status = 403
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
        }
      }

      console.log('üè¢ Officer department filter:', user.position_department)

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° period
      let startDate, endDate
      const now = new Date()
      
      switch (period) {
        case 'last_month':
          startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1)
          endDate = new Date(now.getFullYear(), now.getMonth(), 0)
          break
        case 'current_quarter':
          const currentQuarter = Math.floor(now.getMonth() / 3)
          startDate = new Date(now.getFullYear(), currentQuarter * 3, 1)
          endDate = new Date(now.getFullYear(), (currentQuarter + 1) * 3, 0)
          break
        case 'current_year':
          startDate = new Date(now.getFullYear(), 0, 1)
          endDate = new Date(now.getFullYear(), 11, 31)
          break
        default: // current_month
          startDate = new Date(now.getFullYear(), now.getMonth(), 1)
          endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0)
      }

      const whereCondition = {
        meeting_room: { department: user.position_department },
        created_at: {
          gte: startDate,
          lte: endDate
        }
      }

      console.log('üìÖ Date range:', { period, startDate, endDate })
      console.log('üîç Where condition:', JSON.stringify(whereCondition, null, 2))

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
      const reservationSummary = await prisma.reservation.groupBy({
        by: ['status_r'],
        where: whereCondition,
        _count: {
          reservation_id: true
        }
      })

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
      const roomUtilization = await prisma.reservation.groupBy({
        by: ['room_id'],
        where: whereCondition,
        _count: {
          reservation_id: true
        },
        orderBy: {
          _count: {
            reservation_id: 'desc'
          }
        }
      })

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤)
      const sixMonthsAgo = new Date()
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 5)
      sixMonthsAgo.setDate(1)

      const monthlyTrends = []
      for (let i = 0; i < 6; i++) {
        const monthStart = new Date(sixMonthsAgo.getFullYear(), sixMonthsAgo.getMonth() + i, 1)
        const monthEnd = new Date(sixMonthsAgo.getFullYear(), sixMonthsAgo.getMonth() + i + 1, 0)
        
        const count = await prisma.reservation.count({
          where: {
            meeting_room: { department: user.position_department },
            created_at: {
              gte: monthStart,
              lte: monthEnd
            }
          }
        })
        
        monthlyTrends.push({
          month: monthStart.toLocaleDateString('th-TH', { year: 'numeric', month: 'long' }),
          total_reservations: count
        })
      }

      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const reports = {
        reservation_summary: {
          approved: reservationSummary.find(s => s.status_r === 'approved')?._count.reservation_id || 0,
          pending: reservationSummary.find(s => s.status_r === 'pending')?._count.reservation_id || 0,
          rejected: reservationSummary.find(s => s.status_r === 'rejected')?._count.reservation_id || 0,
          cancelled: reservationSummary.find(s => s.status_r === 'cancelled')?._count.reservation_id || 0
        },
        room_utilization: [],
        monthly_trends: monthlyTrends
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      if (roomUtilization.length > 0) {
        const roomIds = roomUtilization.map(r => r.room_id)
        const rooms = await prisma.meeting_room.findMany({
          where: { room_id: { in: roomIds } },
          select: { room_id: true, room_name: true }
        })
        
        reports.room_utilization = roomUtilization.map(util => ({
          room_id: util.room_id,
          room_name: rooms.find(r => r.room_id === util.room_id)?.room_name || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠',
          total_reservations: util._count.reservation_id
        }))
      }

      console.log('üìä Officer reports generated:', {
        department: user.position_department,
        period,
        summary: reports.reservation_summary,
        rooms: reports.room_utilization.length,
        trends: reports.monthly_trends.length
      })

      return {
        success: true,
        message: `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô ${user.position_department}`,
        department: user.position_department,
        period,
        reports
      }
    } catch (error) {
      console.error('‚ùå Officer Reports Error:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
        error: error.message
      }
    }
  })
