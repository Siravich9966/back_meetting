// ===================================================================
// Meeting Room APIs - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:
// - GET /api/rooms - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
// - GET /api/rooms/:id - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
// 
// ‚ö†Ô∏è ADMIN ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// ‚úÖ OFFICER ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞/‡∏ï‡∏∂‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
// ===================================================================

import { Elysia } from 'elysia'
import prisma from '../lib/prisma.js'
import { authMiddleware, isOfficer, canManageRoom } from '../middleware/index.js'
import { getDepartmentFromPosition } from '../utils/positions.js'

// Public Room APIs (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication)
export const roomRoutes = new Elysia({ prefix: '/rooms' })
  
  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å database
  .get('/image/:id', async ({ params, set }) => {
    try {
      const roomId = parseInt(params.id)
      
      const room = await prisma.meeting_room.findUnique({
        where: { room_id: roomId },
        select: { image: true }
      })
      
      if (!room || !room.image) {
        set.status = 404
        set.headers['Content-Type'] = 'text/plain'
        return 'Image not found'
      }
      
      // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô binary response ‡∏ï‡∏£‡∏á‡πÜ
      set.headers['Content-Type'] = 'image/png'
      set.headers['Cache-Control'] = 'public, max-age=3600' // cache 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
      return room.image
      
    } catch (error) {
      console.error('‚ùå Error serving image:', error)
      set.status = 500
      return { success: false, message: 'Error serving image' }
    }
  })

  // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  .get('/', async ({ query, request, set }) => {
    try {
      const { status, capacity, search, department } = query
      
      // ‚ö†Ô∏è SECURITY CHECK: ‡∏´‡∏≤‡∏Å request ‡∏°‡∏µ Authorization header ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô authenticated user
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
      let authenticatedUser = null
      try {
        if (request.headers.authorization) {
          authenticatedUser = await authMiddleware(request, set)
          if (authenticatedUser.success === false) {
            // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ token ‡πÅ‡∏ï‡πà invalid ‡πÉ‡∏´‡πâ clear authenticatedUser
            authenticatedUser = null
          }
        }
      } catch (error) {
        // ‡∏´‡∏≤‡∏Å auth middleware ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô public request
        authenticatedUser = null
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter conditions
      const where = {}
      
      if (status) {
        where.status_m = status
      }
      
      if (capacity) {
        where.capacity = { gte: parseInt(capacity) }
      }

      // ‚ö†Ô∏è SECURITY FIX: Officer ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° department ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (authenticatedUser && authenticatedUser.role === 'officer') {
        if (authenticatedUser.department) {
          where.department = authenticatedUser.department // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° department
          console.log('üîê [SECURITY] Officer room filtering by department:', {
            officer_id: authenticatedUser.officer_id,
            department: authenticatedUser.department,
            filtered_by: authenticatedUser.department
          })
        } else {
          // ‡∏´‡∏≤‡∏Å Officer ‡πÑ‡∏°‡πà‡∏°‡∏µ department ‡πÉ‡∏´‡πâ return empty result
          where.room_id = -1 // Impossible room_id to return no results
          console.log('‚ö†Ô∏è [SECURITY] Officer without department blocked from viewing rooms:', authenticatedUser.email)
        }
      } else if (department) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ public request ‡πÉ‡∏´‡πâ filter ‡∏ï‡∏≤‡∏° parameter ‡∏õ‡∏Å‡∏ï‡∏¥
        where.department = department
      }
      
      if (search) {
        where.OR = [
          { room_name: { contains: search, mode: 'insensitive' } },
          { location_m: { contains: search, mode: 'insensitive' } },
          { details_m: { contains: search, mode: 'insensitive' } },
          { department: { contains: search, mode: 'insensitive' } }
        ]
      }

      const rooms = await prisma.meeting_room.findMany({
        where,
        select: {
          room_id: true,
          room_name: true,
          capacity: true,
          location_m: true,
          department: true,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° department
          status_m: true,
          image: true, // üñºÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° image ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          details_m: true,
          created_at: true,
          updated_at: true,
          equipment: {
            select: {
              equipment_id: true,
              equipment_n: true,
              quantity: true
            }
          },
          _count: {
            select: {
              reservation: {
                where: {
                  status_r: 'approved',
                  end_at: {
                    gte: new Date() // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                  }
                }
              },
              review: true
            }
          }
        },
        orderBy: { room_name: 'asc' }
      })

      // üñºÔ∏è ‡πÅ‡∏õ‡∏•‡∏á image binary ‡πÄ‡∏õ‡πá‡∏ô hasImage boolean ‡πÅ‡∏•‡∏∞‡∏•‡∏ö binary data ‡∏≠‡∏≠‡∏Å
      const roomsWithImageFlag = rooms.map(room => ({
        ...room,
        hasImage: !!room.image, // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô boolean
        has_image: !!room.image, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ compatibility
        active_bookings_count: room._count.reservation, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        image: undefined // ‡∏•‡∏ö binary data ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
      }))

      return {
        success: true,
        message: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
        rooms: roomsWithImageFlag,
        total: roomsWithImageFlag.length
      }

    } catch (error) {
      console.error('‚ùå Error fetching rooms:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
      }
    }
  })

  // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏≤‡∏° ID
  .get('/:id', async ({ params, set }) => {
    try {
      const roomId = parseInt(params.id)
      
      if (isNaN(roomId)) {
        set.status = 400
        return {
          success: false,
          message: 'ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        }
      }

      const room = await prisma.meeting_room.findUnique({
        where: { room_id: roomId },
        select: {
          room_id: true,
          room_name: true,
          capacity: true,
          location_m: true,
          department: true,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° department
          status_m: true,
          image: true,
          details_m: true,
          created_at: true,
          updated_at: true,
          equipment: {
            select: {
              equipment_id: true,
              equipment_n: true,
              quantity: true
            }
          },
          review: {
            select: {
              review_id: true,
              comment: true,
              rating: true,
              created_at: true,
              users: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            },
            orderBy: { created_at: 'desc' },
            take: 10 // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          },
          _count: {
            select: {
              reservation: true,
              review: true
            }
          }
        }
      })

      if (!room) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        }
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
      const reviews = await prisma.review.findMany({
        where: { room_id: roomId },
        select: { rating: true }
      })

      const averageRating = reviews.length > 0 
        ? reviews.reduce((sum, review) => sum + (review.rating || 0), 0) / reviews.length
        : 0

      return {
        success: true,
        message: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°',
        room: {
          ...room,
          average_rating: parseFloat(averageRating.toFixed(1)),
          total_reviews: reviews.length
        }
      }

    } catch (error) {
      console.error('‚ùå Error fetching room details:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
      }
    }
  })

// Protected Room Management APIs (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Officer ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
// ‚ö†Ô∏è Admin ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
export const officerRoomRoutes = new Elysia({ prefix: '/protected/officer' })
  .group('/rooms', app =>
    app
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ô department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      .post('/', async ({ request, body, set }) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å body (Elysia ‡πÑ‡∏î‡πâ parse FormData ‡πÅ‡∏•‡πâ‡∏ß)
          const room_name = body.room_name
          const capacity = body.capacity
          const location_m = body.location_m
          const status_m = body.status_m || 'available'
          const details_m = body.details_m || null
          
          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
          let equipment = []
          if (body.equipment) {
            try {
              equipment = typeof body.equipment === 'string' 
                ? JSON.parse(body.equipment) 
                : body.equipment
            } catch (e) {
              console.log('Equipment parsing error:', e)
              equipment = []
            }
          }

          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database ‡πÄ‡∏õ‡πá‡∏ô binary data
          let imageBuffer = null
          if (body.image && typeof body.image === 'object' && body.image.name) {
            try {
              // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database
              const arrayBuffer = await body.image.arrayBuffer()
              imageBuffer = Buffer.from(arrayBuffer)
              
              console.log('üì∑ Image converted to buffer, size:', imageBuffer.length, 'bytes')
            } catch (error) {
              console.error('‚ùå Error converting image to buffer:', error)
              imageBuffer = null
            }
          }

          if (!room_name || !capacity || !location_m) {
            set.status = 400
            return {
              success: false,
              message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà'
            }
          }

          // ‚ö†Ô∏è SECURITY FIX: ‡πÉ‡∏ä‡πâ department ‡∏à‡∏≤‡∏Å JWT middleware
          if (!user.department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }

          console.log('üîê [SECURITY] Officer room creation by department:', {
            officer_id: user.officer_id,
            department: user.department,
            creating_for_department: user.department
          })
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà (department ‡∏ï‡∏≤‡∏° department ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
          const newRoom = await prisma.meeting_room.create({
            data: {
              room_name,
              capacity: parseInt(capacity),
              location_m,
              department: user.department, // ‚ö†Ô∏è SECURITY FIX: ‡πÉ‡∏ä‡πâ department
              status_m,
              image: imageBuffer, // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô binary data ‡πÉ‡∏ô database
              details_m
            }
          })

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          if (equipment && Array.isArray(equipment) && equipment.length > 0) {
            await prisma.equipment.createMany({
              data: equipment.map(item => ({
                room_id: newRoom.room_id,
                equipment_n: item.equipment_n,
                quantity: parseInt(item.quantity)
              }))
            })
          }

          return {
            success: true,
            message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            room: newRoom
          }

        } catch (error) {
          console.error('‚ùå Error creating room:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
          }
        }
      })

      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      .put('/:id', async ({ request, params, body, set }) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          const roomId = parseInt(params.id)
          
          if (isNaN(roomId)) {
            set.status = 400
            return {
              success: false,
              message: 'ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô department ‡∏Ç‡∏≠‡∏á officer
          const existingRoom = await prisma.meeting_room.findUnique({
            where: { room_id: roomId }
          })

          if (!existingRoom) {
            set.status = 404
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            }
          }

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
          if (!(await canManageRoom(user, existingRoom.department))) {
            set.status = 403
            return {
              success: false,
              message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ'
            }
          }

          const { room_name, capacity, location_m, status_m, details_m } = body

          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö POST)
          let equipment = []
          if (body.equipment) {
            try {
              equipment = typeof body.equipment === 'string' 
                ? JSON.parse(body.equipment) 
                : body.equipment
              console.log('üõ†Ô∏è Equipment data received for update:', equipment)
            } catch (e) {
              console.log('Equipment parsing error:', e)
              equipment = []
            }
          }

          // ‚ö° ‡πÑ‡∏°‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô PUT API ‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ PUT /:id/image ‡πÅ‡∏ó‡∏ô)

          console.log('üîÑ Updating room with data:', {
            room_name,
            capacity: capacity ? parseInt(capacity) : undefined,
            location_m,
            status_m,
            details_m,
            note: 'Image handled separately via PUT /:id/image'
          })

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô department)
          const updatedRoom = await prisma.meeting_room.update({
            where: { room_id: roomId },
            data: {
              ...(room_name && { room_name }),
              ...(capacity && { capacity: parseInt(capacity) }),
              ...(location_m && { location_m }),
              ...(status_m && { status_m }),
              ...(details_m !== undefined && { details_m }),
              updated_at: new Date()  // ‚ö° ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
            }
          })

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå - ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
          await prisma.equipment.deleteMany({
            where: { room_id: roomId }
          })

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
          if (equipment && Array.isArray(equipment) && equipment.length > 0) {
            await prisma.equipment.createMany({
              data: equipment.map(item => ({
                room_id: roomId,
                equipment_n: item.equipment_n,
                quantity: parseInt(item.quantity)
              }))
            })
            console.log('üõ†Ô∏è Equipment updated:', equipment.length, 'items')
          } else {
            console.log('üõ†Ô∏è No equipment to update')
          }

          return {
            success: true,
            message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            room: updatedRoom
          }

        } catch (error) {
          console.error('‚ùå Error updating room:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
          }
        }
      })

      // üöÄ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å (Fast Image Upload)
      .put('/:id/image', async ({ request, params, body, set }) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          const roomId = parseInt(params.id)
          
          if (isNaN(roomId)) {
            set.status = 400
            return {
              success: false,
              message: 'ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô department ‡∏Ç‡∏≠‡∏á officer
          const existingRoom = await prisma.meeting_room.findUnique({
            where: { room_id: roomId }
          })

          if (!existingRoom) {
            set.status = 404
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            }
          }

          if (existingRoom.department !== user.department) {
            set.status = 403
            return {
              success: false,
              message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ'
            }
          }

          // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å FormData
          console.log('üìã Request body keys:', Object.keys(body))
          console.log('üìã Body image:', body.image)
          
          const image = body.image
          if (!image) {
            console.log('‚ùå No image found in body')
            set.status = 400
            return {
              success: false,
              message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
            }
          }

          if (!image.name) {
            console.log('‚ùå Image has no name property')
            set.status = 400
            return {
              success: false,
              message: '‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            }
          }

          console.log('üì∑ Image file details:', {
            name: image.name,
            size: image.size,
            type: image.type
          })

          console.log('üì∑ Processing image upload for room:', roomId)

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database
          let arrayBuffer, imageBuffer
          try {
            console.log('üîÑ Converting image to buffer...')
            arrayBuffer = await image.arrayBuffer()
            imageBuffer = Buffer.from(arrayBuffer)
            console.log('‚úÖ Image buffer created, size:', imageBuffer.length, 'bytes')
          } catch (bufferError) {
            console.error('‚ùå Error converting image to buffer:', bufferError)
            set.status = 500
            return {
              success: false,
              message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
            }
          }

          console.log('üíæ Saving image to database, size:', imageBuffer.length, 'bytes')

          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          let updatedRoom
          try {
            updatedRoom = await prisma.meeting_room.update({
              where: { room_id: roomId },
              data: {
                image: imageBuffer,
                updated_at: new Date()
              },
              select: {
                room_id: true,
                image: true,
                updated_at: true
              }
            })
            console.log('‚úÖ Database update successful')
          } catch (dbError) {
            console.error('‚ùå Database error:', dbError)
            set.status = 500
            return {
              success: false,
              message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
            }
          }

          console.log('‚úÖ Image updated successfully for room:', roomId)
          console.log('üìä Updated room image size:', updatedRoom.image ? updatedRoom.image.length : 0, 'bytes')
          console.log('üïí Updated at:', updatedRoom.updated_at)

          return {
            success: true,
            message: '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          }

        } catch (error) {
          console.error('‚ùå Error uploading image:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
          }
        }
      })

      // üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
      .delete('/:id/image', async ({ request, params, set }) => {
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
          const user = await authMiddleware(request, set)
          if (user.success === false) return user

          const roomId = parseInt(params.id)
          if (!roomId) {
            set.status = 400
            return {
              success: false,
              message: 'ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            }
          }

          console.log('üóëÔ∏è Deleting image for room:', roomId)

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô department ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
          const room = await prisma.meeting_room.findFirst({
            where: {
              room_id: roomId,
              department: user.department
            }
          })

          if (!room) {
            set.status = 404
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á'
            }
          }

          // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (set ‡πÄ‡∏õ‡πá‡∏ô null)
          await prisma.meeting_room.update({
            where: { room_id: roomId },
            data: {
              image: null,
              updated_at: new Date()
            }
          })

          console.log('‚úÖ Image deleted successfully for room:', roomId)

          return {
            success: true,
            message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          }

        } catch (error) {
          console.error('‚ùå Error deleting image:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
          }
        }
      })

      // ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      .delete('/:id', async ({ request, params, set }) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          const roomId = parseInt(params.id)
          
          if (isNaN(roomId)) {
            set.status = 400
            return {
              success: false,
              message: 'ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô department ‡∏Ç‡∏≠‡∏á officer
          const existingRoom = await prisma.meeting_room.findUnique({
            where: { room_id: roomId }
          })

          if (!existingRoom) {
            set.status = 404
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            }
          }

          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
          if (!(await canManageRoom(user, existingRoom.department))) {
            set.status = 403
            return {
              success: false,
              message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ'
            }
          }

          // üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå)
          console.log(`üóëÔ∏è Attempting to delete room ${roomId} - skipping reservation check as requested`)

          // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡∏≤‡∏° Foreign Key Dependencies)
          console.log(`üóëÔ∏è Starting cascade delete for room ${roomId}`)
          
          // 1. ‡∏•‡∏ö review ‡∏Å‡πà‡∏≠‡∏ô
          const reviewCount = await prisma.review.deleteMany({
            where: { room_id: roomId }
          })
          console.log(`üóëÔ∏è Deleted ${reviewCount.count} reviews`)

          // 2. ‡∏•‡∏ö equipment ‡∏Å‡πà‡∏≠‡∏ô
          const equipmentCount = await prisma.equipment.deleteMany({
            where: { room_id: roomId }
          })
          console.log(`üóëÔ∏è Deleted ${equipmentCount.count} equipment records`)

          // 3. ‡∏•‡∏ö reservations ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
          const reservationCount = await prisma.reservation.deleteMany({
            where: { room_id: roomId }
          })
          console.log(`üóëÔ∏è Deleted ${reservationCount.count} reservations`)

          // 4. ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
          await prisma.meeting_room.delete({
            where: { room_id: roomId }
          })
          console.log(`üóëÔ∏è Successfully deleted meeting room ${roomId}`)

          return {
            success: true,
            message: '‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          }

        } catch (error) {
          console.error('‚ùå Error deleting room:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
          }
        }
      })

      // ‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      .get('/', async ({ request, query, set }) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå officer
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          const { status, capacity, search } = query
          
          // ‚ö†Ô∏è SECURITY FIX: ‡πÉ‡∏ä‡πâ department ‡πÅ‡∏ó‡∏ô user.department  
          if (!user.department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter conditions (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ department ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
          const where = {
            department: user.department // ‚ö†Ô∏è SECURITY FIX: ‡πÉ‡∏ä‡πâ department
          }
          
          if (status) {
            where.status_m = status
          }
          
          if (capacity) {
            where.capacity = { gte: parseInt(capacity) }
          }
          
          if (search) {
            where.OR = [
              { room_name: { contains: search, mode: 'insensitive' } },
              { location_m: { contains: search, mode: 'insensitive' } },
              { details_m: { contains: search, mode: 'insensitive' } }
            ]
          }

          const rooms = await prisma.meeting_room.findMany({
            where,
            select: {
              room_id: true,
              room_name: true,
              capacity: true,
              location_m: true,
              department: true,
              status_m: true,
              // ÔøΩ ‡πÉ‡∏ä‡πâ _count ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á binary data ‡πÄ‡∏û‡∏∑‡πà‡∏≠ performance
              details_m: true,
              created_at: true,
              updated_at: true,
              equipment: {
                select: {
                  equipment_id: true,
                  equipment_n: true,
                  quantity: true
                }
              },
              _count: {
                select: {
                  reservation: true,
                  review: true
                }
              }
            },
            orderBy: { room_name: 'asc' }
          })

          // ÔøΩ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á binary data
          const roomsWithImageCheck = await Promise.all(
            rooms.map(async (room) => {
              // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ image ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á binary data
              const imageCheck = await prisma.meeting_room.findUnique({
                where: { room_id: room.room_id },
                select: { image: true }
              })
              
              // üë• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ
              const now = new Date()
              
              // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (UTC+7)
              const bangkokTime = new Date(now.getTime() + (7 * 60 * 60 * 1000))
              const today = bangkokTime.toISOString().split('T')[0] // YYYY-MM-DD
              const currentTime = bangkokTime.toISOString().split('T')[1].substring(0, 5) // HH:MM
              
              console.log(`üïê Checking current usage for room ${room.room_id}:`, {
                today,
                currentTime,
                currentDateTime: now.toISOString(),
                bangkokDateTime: bangkokTime.toISOString()
              })
              
              // ‡∏´‡∏≤ reservation ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö multi-day booking
              const allReservations = await prisma.reservation.findMany({
                where: {
                  room_id: room.room_id,
                  status_r: 'approved'
                },
                select: {
                  reservation_id: true,
                  user_id: true,
                  start_time: true,
                  end_time: true,
                  start_at: true,
                  is_multi_day: true,
                  booking_dates: true
                }
              })
              
              // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á active ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
              const activeReservations = allReservations.filter(reservation => {
                const currentDateTime = bangkokTime
                
                if (reservation.is_multi_day && reservation.booking_dates) {
                  // Multi-day booking: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                  const bookingDates = reservation.booking_dates.split(',')
                  const todayString = today
                  
                  // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á
                  const lastDate = bookingDates[bookingDates.length - 1]
                  
                  if (todayString <= lastDate) {
                    // ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
                    if (todayString === lastDate) {
                      // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤
                      return reservation.end_time > currentDateTime
                    } else {
                      // ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                      return true
                    }
                  } else {
                    return false // ‡∏´‡∏°‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                  }
                } else {
                  // Single day booking: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                  // ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
                  return reservation.end_time > currentDateTime
                }
              })
              
              // ‡πÉ‡∏ä‡πâ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ú‡∏• (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
              const currentUsers = activeReservations.length
              
              console.log(`üë• Room ${room.room_id} active reservations:`, {
                activeNow: currentUsers,
                activeDetails: activeReservations.map(r => ({
                  id: r.reservation_id,
                  start_datetime: r.start_time.toISOString(),
                  end_datetime: r.end_time.toISOString()
                }))
              })
              
              return {
                ...room,
                has_image: !!imageCheck?.image, // ‚úÖ ‡πÉ‡∏ä‡πâ snake_case ‡∏ï‡∏≤‡∏° Frontend
                current_users: currentUsers // üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              }
            })
          )

          return {
            success: true,
            message: `‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (${user.department})`,
            rooms: roomsWithImageCheck,
            total: roomsWithImageCheck.length,
            department: user.department,
            position_info: {
              department: user.department,
              position: user.position
            }
          }

        } catch (error) {
          console.error('‚ùå Error fetching officer rooms:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
          }
        }
      })
  )
