// ===================================================================
// Protected Routes - APIs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ JWT Authentication
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:
// - ‡πÉ‡∏ä‡πâ Auth Middleware ‡∏à‡∏≤‡∏Å ../middleware/auth.js
// - ‡πÅ‡∏¢‡∏Å level ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏° role: user/officer/admin
// ===================================================================

import { Elysia } from 'elysia'
import { authMiddleware, isAdmin, isOfficer, isUser } from '../middleware/index.js'
import prisma from '../lib/prisma.js'
import { getTableFromPosition } from '../utils/positions.js'

export const protectedRoutes = new Elysia({ prefix: '/protected' })
  // API ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á auth)
  .get('/test', () => ({
    message: 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!!',
    timestamp: new Date().toISOString()
  }))

  // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å database
  .get('/profile/image/:role/:id', async ({ params, set }) => {
    try {
      const { role, id } = params
      const userId = parseInt(id)
      
      let user
      if (role === 'admin') {
        user = await prisma.admin.findUnique({
          where: { admin_id: userId },
          select: { profile_image: true }
        })
      } else if (role === 'user') {
        user = await prisma.user.findUnique({
          where: { user_id: userId },
          select: { profile_image: true }
        })
      }
      
      if (!user || !user.profile_image) {
        set.status = 404
        return { success: false, message: 'Profile image not found' }
      }
      
      // ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô response
      set.headers['Content-Type'] = 'image/jpeg'
      return new Response(user.profile_image)
      
    } catch (error) {
      console.error('‚ùå Error serving profile image:', error)
      set.status = 500
      return { success: false, message: 'Error serving profile image' }
    }
  })

  // === User Routes (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user, officer, ‡∏´‡∏£‡∏∑‡∏≠ admin role) ===
  .group('/user', app =>
    app
      .get('/profile', async ({ request, set }) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
        const user = await authMiddleware(request, set)
        
        // ‡∏ñ‡πâ‡∏≤ middleware return error response
        if (user.success === false) {
          return user
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ role
        if (!isUser(user)) {
          set.status = 403
          return { 
            success: false, 
            message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
          }
        }
        
        return {
          success: true,
          message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
          profile: user
        }
      })
      .put('/profile', async ({ request, set, body }) => {
        try {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
          const user = await authMiddleware(request, set)
          
          // ‡∏ñ‡πâ‡∏≤ middleware return error response
          if (user.success === false) {
            return user
          }
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ role
          if (!isUser(user)) {
            set.status = 403
            return { 
              success: false, 
              message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
            }
          }

          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
          const allowedFields = ['first_name', 'last_name', 'email', 'citizen_id', 'position', 'department', 'zip_code']
          const updateData = {}
          
          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
          for (const field of allowedFields) {
            if (body[field] !== undefined) {
              updateData[field] = body[field]
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (Object.keys(updateData).length === 0) {
            set.status = 400
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'
            }
          }

          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° role
          let tableName
          let idField
          let userId

          switch (user.role) {
            case 'user':
              tableName = 'users'
              idField = 'user_id'
              userId = user.user_id
              break
            case 'officer':
              tableName = 'officer'
              idField = 'officer_id'
              userId = user.officer_id
              break
            case 'admin':
              tableName = 'admin'
              idField = 'admin_id'
              userId = user.admin_id
              break
            case 'executive':
              tableName = 'executive'
              idField = 'executive_id'
              userId = user.executive_id
              break
            default:
              set.status = 400
              return {
                success: false,
                message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ role ‡πÑ‡∏î‡πâ'
              }
          }

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await prisma[tableName].update({
            where: {
              [idField]: userId
            },
            data: {
              ...updateData,
              updated_at: new Date()
            }
          })

          return {
            success: true,
            message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            updated_fields: Object.keys(updateData)
          }

        } catch (error) {
          console.error('Error updating profile:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'
          }
        }
      })
      .post('/profile/image', async ({ request, set, body }) => {
        try {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
          const user = await authMiddleware(request, set)
          
          // ‡∏ñ‡πâ‡∏≤ middleware return error response
          if (user.success === false) {
            return user
          }
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ role
          if (!isUser(user)) {
            set.status = 403
            return { 
              success: false, 
              message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
          if (!body.profileImage || !(body.profileImage instanceof File)) {
            set.status = 400
            return {
              success: false,
              message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
            }
          }

          const file = body.profileImage
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
          const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
          const ext = file.name.substring(file.name.lastIndexOf('.')).toLowerCase()
          if (!allowedExtensions.includes(ext)) {
            set.status = 400
            return {
              success: false,
              message: '‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (JPEG, JPG, PNG, GIF, WebP)'
            }
          }

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
          if (file.size > 5 * 1024 * 1024) {
            set.status = 400
            return {
              success: false,
              message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB'
            }
          }

          // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÉ‡∏ô database ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ filesystem

          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡πÅ‡∏•‡∏∞ field ‡∏ï‡∏≤‡∏° role
          let tableName, idField, userId
          switch (user.role) {
            case 'admin':
              tableName = 'admin'
              idField = 'admin_id'
              userId = user.admin_id || user.user_id
              break
            case 'officer':
              tableName = 'officer'
              idField = 'officer_id'
              userId = user.officer_id || user.user_id
              break
            case 'executive':
              tableName = 'executive'
              idField = 'executive_id'
              userId = user.executive_id || user.user_id
              break
            default:
              tableName = 'users'
              idField = 'user_id'
              userId = user.user_id
          }

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô Buffer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô database
          const arrayBuffer = await file.arrayBuffer()
          const imageBuffer = Buffer.from(arrayBuffer)

          console.log('üì∑ Profile image converted to buffer, size:', imageBuffer.length, 'bytes')

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô binary data)
          const updatedUser = await prisma[tableName].update({
            where: { [idField]: userId },
            data: { 
              profile_image: imageBuffer,
              updated_at: new Date()
            }
          })

          // ‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÉ‡∏ô database ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          return {
            success: true,
            message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            hasProfileImage: true
          }

        } catch (error) {
          console.error('Error uploading profile image:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
            error: error.message
          }
        }
      })
      .delete('/profile/image', async ({ request, set }) => {
        try {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
          const user = await authMiddleware(request, set)
          
          // ‡∏ñ‡πâ‡∏≤ middleware return error response
          if (user.success === false) {
            return user
          }
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ role
          if (!isUser(user)) {
            set.status = 403
            return { 
              success: false, 
              message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
            }
          }

          // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î table ‡πÅ‡∏•‡∏∞ field ‡∏ï‡∏≤‡∏° role
          let tableName, idField, userId
          switch (user.role) {
            case 'admin':
              tableName = 'admin'
              idField = 'admin_id'
              userId = user.admin_id || user.user_id
              break
            case 'officer':
              tableName = 'officer'
              idField = 'officer_id'
              userId = user.officer_id || user.user_id
              break
            case 'executive':
              tableName = 'executive'
              idField = 'executive_id'
              userId = user.executive_id || user.user_id
              break
            default:
              tableName = 'users'
              idField = 'user_id'
              userId = user.user_id
          }

          // ‡∏´‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö
          const currentUser = await prisma[tableName].findUnique({
            where: { [idField]: userId },
            select: { profile_image: true }
          })

          if (!currentUser.profile_image) {
            set.status = 400
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö'
            }
          }

          // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
          const fs = await import('fs')
          const path = await import('path')
          const oldImagePath = path.join(process.cwd(), currentUser.profile_image.substring(1))
          if (fs.existsSync(oldImagePath)) {
            fs.unlinkSync(oldImagePath)
          }

          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ profile_image ‡πÄ‡∏õ‡πá‡∏ô null
          await prisma[tableName].update({
            where: { [idField]: userId },
            data: { 
              profile_image: null,
              updated_at: new Date()
            }
          })

          return {
            success: true,
            message: '‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          }

        } catch (error) {
          console.error('Error removing profile image:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
            error: error.message
          }
        }
      })
      .get('/area', async ({ request, set }) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
        const user = await authMiddleware(request, set)
        
        // ‡∏ñ‡πâ‡∏≤ middleware return error response
        if (user.success === false) {
          return user
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ role
        if (!isUser(user)) {
          set.status = 403
          return { 
            success: false, 
            message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á' 
          }
        }
        
        return {
          success: true,
          message: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.first_name || 'Unknown'} ${user.last_name || ''}`,
          area: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          your_role: user.role || 'unknown',
          user_data: user
        }
      })
  )

// === Officer Routes (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ officer ‡∏´‡∏£‡∏∑‡∏≠ admin role) ===
export const officerRoutes = new Elysia({ prefix: '/protected' })
  .group('/officer', app =>
    app
      .get('/area', async ({ request, set }) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
        const user = await authMiddleware(request, set)
        
        // ‡∏ñ‡πâ‡∏≤ middleware return error response
        if (user.success === false) {
          return user
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ role
        if (!isOfficer(user)) {
          set.status = 403
          return { 
            success: false, 
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' 
          }
        }
        
        return {
          success: true,
          message: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.first_name || 'Unknown'} ${user.last_name || ''} (‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)`,
          area: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
          permissions: ['approve_reservations', 'manage_rooms'],
          your_role: user.role || 'unknown',
          user_data: user
        }
      })


      // === Officer Reports === 
      .get('/reports', async ({ request, query, set }) => {
        const user = await authMiddleware(request, set)
        if (user.success === false) return user

        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'

          }
        }

        try {

          console.log('üìä Officer Reports - User:', user.email, 'Position:', user.position)
          const { period = 'current_month' } = query

          // ‚ö†Ô∏è SECURITY FIX: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
          if (!user.position_department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }

          console.log('üè¢ Officer department filter:', user.position_department)

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏° period
          let startDate, endDate
          const now = new Date()
          
          switch (period) {
            case 'last_month':
              startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1)
              endDate = new Date(now.getFullYear(), now.getMonth(), 0)
              break
            case 'last_3_months':
              startDate = new Date(now.getFullYear(), now.getMonth() - 3, 1)
              endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0)
              break
            case 'last_6_months':
              startDate = new Date(now.getFullYear(), now.getMonth() - 6, 1)
              endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0)
              break
            case 'current_quarter':
              const currentQuarter = Math.floor(now.getMonth() / 3)
              startDate = new Date(now.getFullYear(), currentQuarter * 3, 1)
              endDate = new Date(now.getFullYear(), (currentQuarter + 1) * 3, 0)
              break
            case 'current_year':
              startDate = new Date(now.getFullYear(), 0, 1)
              endDate = new Date(now.getFullYear(), 11, 31)
              break
            default: // current_month
              startDate = new Date(now.getFullYear(), now.getMonth(), 1)
              endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0)
          }

          console.log('üìÖ Date range:', startDate, 'to', endDate)

          // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          const reservation_summary = []
          const room_utilization = []
          const monthly_trends = []

          // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          const totalReservations = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              start_at: {
                gte: startDate,
                lte: endDate

              }
            }
          })


          const approvedReservations = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              start_at: {
                gte: startDate,
                lte: endDate
              },
              status_r: 'approved'
            }
          })

          const pendingReservations = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              start_at: {
                gte: startDate,
                lte: endDate
              },

              status_r: 'pending'
            }
          })


          const rejectedReservations = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              start_at: {
                gte: startDate,
                lte: endDate
              },
              status_r: 'rejected'
            }
          })

          reservation_summary.push({
            category: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            count: totalReservations,
            percentage: 100
          })

          if (totalReservations > 0) {
            reservation_summary.push({
              category: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
              count: approvedReservations,
              percentage: Math.round((approvedReservations / totalReservations) * 100)
            })

            reservation_summary.push({
              category: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
              count: pendingReservations,
              percentage: Math.round((pendingReservations / totalReservations) * 100)
            })

            reservation_summary.push({
              category: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
              count: rejectedReservations,
              percentage: Math.round((rejectedReservations / totalReservations) * 100)
            })
          }

          // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
          const roomUsageStats = await prisma.reservation.groupBy({
            by: ['room_id'],
            where: {
              meeting_room: {
                department: user.position_department
              },
              start_at: {
                gte: startDate,
                lte: endDate
              },
              status_r: 'approved'
            },
            _count: {
              reservation_id: true
            },
            orderBy: {
              _count: {
                reservation_id: 'desc'
              }
            }
          })

          for (const roomStat of roomUsageStats.slice(0, 10)) { // ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å
            const room = await prisma.meeting_room.findUnique({
              where: { room_id: roomStat.room_id },
              select: { room_name: true }
            })

            room_utilization.push({
              room_name: room?.room_name || `‡∏´‡πâ‡∏≠‡∏á ${roomStat.room_id}`,
              usage_count: roomStat._count.reservation_id,
              percentage: Math.round((roomStat._count.reservation_id / approvedReservations) * 100) || 0
            })
          }

          // ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)
          for (let i = 5; i >= 0; i--) {
            const monthDate = new Date(now.getFullYear(), now.getMonth() - i, 1)
            const nextMonth = new Date(now.getFullYear(), now.getMonth() - i + 1, 0)
            
            const monthlyReservations = await prisma.reservation.count({
              where: {
                meeting_room: {
                  department: user.position_department
                },
                start_at: {
                  gte: monthDate,
                  lte: nextMonth
                },
                status_r: 'approved'
              }
            })

            monthly_trends.push({
              month: monthDate.toLocaleDateString('th-TH', { year: 'numeric', month: 'short' }),
              reservations: monthlyReservations
            })
          }

          return {
            success: true,
            data: {
              reservation_summary,
              room_utilization,
              monthly_trends
            },
            meta: {
              department: user.position_department,
              period,
              date_range: {
                start: startDate.toISOString(),
                end: endDate.toISOString()
              }

            }
          }

        } catch (error) {

          console.error('‚ùå Error in officer reports:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
            error: error.message

          }
        }
      })

      // === Officer Reviews (‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞) ===
      .get('/reviews', async ({ request, query, set }) => {
        const user = await authMiddleware(request, set)
        if (user.success === false) return user

        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          // üìÑ Pagination parameters
          const page = parseInt(query.page) || 1
          const limit = parseInt(query.limit) || 5
          const offset = (page - 1) * limit

          console.log('üìù Officer Reviews - User:', user.email, 'Department:', user.position_department)
          console.log('üìÑ Pagination - Page:', page, 'Limit:', limit, 'Offset:', offset)

          // ‚ö†Ô∏è SECURITY: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
          if (!user.position_department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }

          // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          const totalReviews = await prisma.review.count({
            where: {
              meeting_room: {
                department: user.position_department
              }
            }
          })

          const reviews = await prisma.review.findMany({
            where: {
              meeting_room: {
                department: user.position_department
              }
            },
            include: {
              users: {
                select: {
                  user_id: true,
                  first_name: true,
                  last_name: true,
                  email: true,
                  profile_image: true,
                  department: true,
                  position: true,
                  citizen_id: true
                }
              },
              meeting_room: {
                select: {
                  room_id: true,
                  room_name: true,
                  department: true
                }
              }
            },
            orderBy: {
              created_at: 'desc'
            },
            skip: offset,
            take: limit
          })

          const formattedReviews = reviews.map(review => ({
            review_id: review.review_id,
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            user_name: review.users ? `${review.users.first_name || ''} ${review.users.last_name || ''}`.trim() : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
            first_name: review.users?.first_name || null,
            last_name: review.users?.last_name || null,
            user_email: review.users?.email || null,
            citizen_id: review.users?.citizen_id || null,
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (‡πÅ‡∏õ‡∏•‡∏á Bytes ‡πÄ‡∏õ‡πá‡∏ô base64 ‡∏´‡∏≤‡∏Å‡∏°‡∏µ)
            user_profile_image: review.users?.profile_image ? 
              `data:image/jpeg;base64,${Buffer.from(review.users.profile_image).toString('base64')}` : null,
            user_department: review.users?.department || null,
            user_position: review.users?.position || null,
            
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
            room_name: review.meeting_room?.room_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á',
            rating: review.rating,
            comment: review.comment,
            created_at: review.created_at,
            department: review.meeting_room?.department
          }))

          const totalPages = Math.ceil(totalReviews / limit)

          console.log('üìù Found', formattedReviews.length, 'reviews for department:', user.position_department)
          console.log('üìÑ Pagination info - Total:', totalReviews, 'Pages:', totalPages, 'Current page:', page)

          return {
            success: true,
            reviews: formattedReviews,
            pagination: {
              current_page: page,
              total_pages: totalPages,
              total_items: totalReviews,
              items_per_page: limit,
              has_prev: page > 1,
              has_next: page < totalPages
            },
            total: totalReviews,
            department: user.position_department
          }

        } catch (error) {
          console.error('‚ùå Error fetching officer reviews:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
            error: error.message
          }
        }
      })

      // === Officer Approval History (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥) ===
      .get('/approval-history', async ({ request, query, set }) => {
        const user = await authMiddleware(request, set)
        if (user.success === false) return user
        
        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          const { status = 'all', limit = 10, offset = 0, page = 1 } = query
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì offset ‡∏à‡∏≤‡∏Å page
          const actualOffset = (parseInt(page) - 1) * parseInt(limit)
          
          // ‚ö†Ô∏è SECURITY: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
          if (!user.position_department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }
          
          console.log(`üìã [APPROVAL HISTORY] ${user.position} accessing: ${user.position_department}`)
          
          // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏±‡∏ô) + ‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö
          const twoDaysAgo = new Date()
          twoDaysAgo.setDate(twoDaysAgo.getDate() - 2)
          
          const where = {
            // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
            meeting_room: {
              department: user.position_department
            },
            // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ß‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)
            created_at: {
              lt: twoDaysAgo
            }
          }
          
          // ‡∏Å‡∏£‡∏≠‡∏á status ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'all'
          if (status && status !== 'all') {
            where.status_r = status
          }

          // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°
          const total = await prisma.reservation.count({ where })
          
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤)
          const reservations = await prisma.reservation.findMany({
            where,
            include: {
              users: {
                select: {
                  first_name: true,
                  last_name: true,
                  email: true,
                  department: true
                }
              },
              meeting_room: {
                select: {
                  room_name: true,
                  location_m: true,
                  capacity: true
                }
              },
              officer: {
                select: {
                  first_name: true,
                  last_name: true
                }
              }
            },
            orderBy: {
              created_at: 'desc' // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏Å‡πà‡∏≤ (‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ approvals)
            },
            skip: actualOffset,
            take: parseInt(limit)
          })

          console.log(`üìã Found ${reservations.length} approval history records (total: ${total})`)

          return {
            success: true,
            message: `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏Ñ‡∏ì‡∏∞ ${user.position_department} (${total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
            department: user.position_department,
            reservations: reservations.map(r => {
              // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö - ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å details_r
              let roomName = r.meeting_room?.room_name
              let location = r.meeting_room?.location_m
              
              if (!roomName && r.details_r) {
                // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô details_r ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                const match = r.details_r.match(/\[‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: (.+?) \(.+?\) - ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß\]/)
                roomName = match ? `${match[1]} (‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß)` : '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß)'
                location = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
              }
              
              return {
                reservation_id: r.reservation_id,
                room_name: roomName || '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° (‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß)',
                location: location || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö',
                reserved_by: `${r.users.first_name} ${r.users.last_name}`,
                start_date: r.start_at,
                end_date: r.end_at,
                start_time: r.start_time,
                end_time: r.end_time,
                details: r.details_r,
                status: r.status_r,
                created_at: r.created_at,
                approved_by: r.officer ? `${r.officer.first_name} ${r.officer.last_name}` : null,
                rejected_reason: r.rejected_reason,
                updated_at: r.updated_at
              }
            }),
            pagination: {
              current_page: parseInt(page),
              total_pages: Math.ceil(total / parseInt(limit)),
              total_items: total,
              items_per_page: parseInt(limit),
              has_prev: parseInt(page) > 1,
              has_next: parseInt(page) < Math.ceil(total / parseInt(limit))
            }
          }

        } catch (error) {
          console.error('‚ùå Error fetching approval history:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
          }
        }
      })

      // === Officer Stats (Dashboard Statistics) ===
      .get('/stats', async ({ request, set }) => {
        const user = await authMiddleware(request, set)
        if (user.success === false) return user

        if (!isOfficer(user)) {
          set.status = 403
          return {
            success: false,
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
          }
        }

        try {
          console.log('üìä Officer Stats - User:', user.email, 'Position:', user.position)

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
          if (!user.position_department) {
            set.status = 403
            return {
              success: false,
              message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
            }
          }

          const today = new Date()
          const thisMonth = new Date(today.getFullYear(), today.getMonth(), 1)
          const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0)

          // 1. ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          const myRooms = await prisma.meeting_room.findMany({
            where: {
              department: user.position_department
            },
            include: {
              _count: {
                select: {
                  reservation: {
                    where: {
                      status_r: 'approved', // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
                      // ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                    }
                  }
                }
              }
            }
          })

          // 2. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≠‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà)
          const departmentReservationStats = await prisma.reservation.findMany({
            where: {
              meeting_room: {
                department: user.position_department
              },
              status_r: 'approved', // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
            },
            include: {
              users: {
                select: {
                  department: true
                }
              }
            }
          })

          // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á
          const departmentBookingStats = {}
          departmentReservationStats.forEach(reservation => {
            const userDepartment = reservation.users?.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô'
            if (!departmentBookingStats[userDepartment]) {
              departmentBookingStats[userDepartment] = 0
            }
            departmentBookingStats[userDepartment]++
          })

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
          const departmentStatsArray = Object.entries(departmentBookingStats).map(([department, bookings]) => ({
            department,
            bookings,
            percentage: 100 // ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÉ‡∏ô frontend
          })).sort((a, b) => b.bookings - a.bookings)

          // 3. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô
          const myDepartmentPendingApprovals = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              status_r: 'pending'
            }
          })

          // 4. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•
          const myDepartmentThisMonthReservations = await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.position_department
              },
              status_r: 'approved',
              start_at: {
                gte: thisMonth,
                lte: nextMonth
              }
            }
          })

          // 5. ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
          const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate())
          const todayEnd = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1)
          
          const todayReservations = await prisma.reservation.count({
            where: {
              start_at: {
                gte: todayStart,
                lt: todayEnd
              }
            }
          })

          // 6. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
          const allRooms = await prisma.meeting_room.findMany({
            include: {
              _count: {
                select: {
                  reservation: {
                    where: {
                      status_r: 'approved', // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
                    }
                  }
                }
              }
            },
            orderBy: {
              reservation: {
                _count: 'desc' // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              }
            }
          })

          // 7. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á)
          const allDepartmentReservationStats = await prisma.reservation.findMany({
            where: {
              status_r: 'approved', // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
            },
            include: {
              users: {
                select: {
                  department: true
                }
              }
            }
          })

          // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
          const allDepartmentBookingStats = {}
          allDepartmentReservationStats.forEach(reservation => {
            const userDepartment = reservation.users?.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô'
            if (!allDepartmentBookingStats[userDepartment]) {
              allDepartmentBookingStats[userDepartment] = 0
            }
            allDepartmentBookingStats[userDepartment]++
          })

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
          const totalAllBookings = allDepartmentReservationStats.length
          const allDepartmentStatsArray = Object.entries(allDepartmentBookingStats).map(([department, bookings]) => ({
            department,
            bookings,
            percentage: totalAllBookings > 0 ? ((bookings / totalAllBookings) * 100).toFixed(1) : 0
          })).sort((a, b) => b.bookings - a.bookings)

          const stats = {
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
            my_rooms_stats: {
              total_rooms: myRooms.length,
              rooms_detail: myRooms.map(room => ({
                room_id: room.room_id,
                room_name: room.room_name,
                capacity: room.capacity,
                department: room.department,
                bookings: room._count.reservation
              }))
            },
            
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•)
            department_booking_stats: {
              data: departmentStatsArray,
              total_bookings: departmentReservationStats.length
            },
            
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            all_rooms_stats: {
              total_rooms: allRooms.length,
              rooms_detail: allRooms.map(room => ({
                room_id: room.room_id,
                room_name: room.room_name,
                capacity: room.capacity,
                department: room.department,
                bookings: room._count.reservation
              })),
              total_bookings: allRooms.reduce((sum, room) => sum + room._count.reservation, 0)
            },
            
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
            all_department_booking_stats: {
              data: allDepartmentStatsArray,
              total_bookings: totalAllBookings
            },
            
            // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
            my_department_stats: {
              this_month_reservations: myDepartmentThisMonthReservations,
              pending_approvals: myDepartmentPendingApprovals,
              today_reservations: todayReservations
            }
          }

          console.log('‚úÖ Officer stats generated:', stats)

          return {
            success: true,
            message: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            stats: stats
          }

        } catch (error) {
          console.error('‚ùå Error in officer stats:', error)
          set.status = 500
          return {
            success: false,
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
            error: error.message
          }
        }
      })
  )

// === Admin Routes (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ admin role ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô) ===
export const adminAreaRoutes = new Elysia({ prefix: '/protected' })
  .group('/admin', app =>
    app
      .get('/area', async ({ request, set }) => {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ auth middleware
        const user = await authMiddleware(request, set)
        
        // ‡∏ñ‡πâ‡∏≤ middleware return error response
        if (user.success === false) {
          return user
        }
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ role
        if (!isAdmin(user)) {
          set.status = 403
          return { 
            success: false, 
            message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' 
          }
        }
        
        return {
          success: true,
          message: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.first_name || 'Unknown'} ${user.last_name || ''} (‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö)`,
          area: '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          permissions: ['manage_all_users', 'manage_all_rooms', 'system_settings'],
          access_level: 'Super Admin',
          user_data: user
        }
      })
  )
