// ===================================================================
// Executive Routes - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ì‡∏∞ (READ ONLY)
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ APIs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• report ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô):
// - University Executive: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞ (‡πÅ‡∏ï‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
// - Faculty Executive: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡πÅ‡∏ï‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
// 
// NOTE: ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Executive ‡πÑ‡∏î‡πâ
//       Executive ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ user ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
// ===================================================================

import { Elysia } from 'elysia'
import { Prisma } from '../generated/prisma/index.js'
import prisma from '../lib/prisma.js'
import { authMiddleware, isExecutive, isUniversityExecutive, isFacultyExecutive } from '../middleware/index.js'

export const executiveRoutes = new Elysia({ prefix: '/protected/executive' })

  // ===== Executive Dashboard =====
  .get('/dashboard', async ({ request, set }) => {
    const user = await authMiddleware(request, set)
    if (user.success === false) return user

    if (!isExecutive(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      let stats = {}

      if (isUniversityExecutive(user)) {
        // University Executive - ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞
        console.log('üìä University Executive: Dashboard')

        stats = {
          total_users: await prisma.users.count(),
          total_officers: await prisma.officer.count(),
          total_rooms: await prisma.meeting_room.count(),
          total_reservations: await prisma.reservation.count(),
          departments_summary: await prisma.meeting_room.groupBy({
            by: ['department'],
            _count: { room_id: true }
          })
        }

      } else if (isFacultyExecutive(user)) {
        // Faculty Executive - ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        console.log('üìä Faculty Executive: Dashboard for', user.department)

        stats = {
          my_department: user.department,
          department_rooms: await prisma.meeting_room.count({
            where: { department: user.department }
          }),
          department_reservations: await prisma.reservation.count({
            where: {
              meeting_room: {
                department: user.department
              }
            }
          }),
          recent_reservations: await prisma.reservation.findMany({
            where: {
              meeting_room: {
                department: user.department
              }
            },
            include: {
              meeting_room: {
                select: { room_name: true }
              },
              users: {
                select: { first_name: true, last_name: true }
              }
            },
            orderBy: { created_at: 'desc' },
            take: 10
          })
        }
      }

      return {
        success: true,
        message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
        executive_type: user.position,
        department: user.department,
        stats
      }

    } catch (error) {
      console.error('‚ùå Executive Dashboard Error:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard'
      }
    }
  })

  // ===== Executive Reports =====
  .get('/reports', async ({ request, query, set }) => {
    const user = await authMiddleware(request, set)
    if (user.success === false) return user

    if (!isExecutive(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { department, month, year } = query
      let whereCondition = {}

      // University Executive ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞, Faculty Executive ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      if (isFacultyExecutive(user)) {
        whereCondition.meeting_room = { department: user.department }
      } else if (department && isUniversityExecutive(user)) {
        whereCondition.meeting_room = { department }
      }

      // Filter by month/year if provided
      if (month && year) {
        const startDate = new Date(parseInt(year), parseInt(month) - 1, 1)
        const endDate = new Date(parseInt(year), parseInt(month), 0)
        whereCondition.created_at = {
          gte: startDate,
          lte: endDate
        }
      }

      const reports = {
        reservation_summary: await prisma.reservation.groupBy({
          by: ['status_r'],
          where: whereCondition,
          _count: { reservation_id: true }
        }),

        room_utilization: await prisma.reservation.groupBy({
          by: ['room_id'],
          where: whereCondition,
          _count: { reservation_id: true }
        }),

        monthly_trends: await prisma.$queryRaw`
          SELECT 
            DATE_TRUNC('month', r.created_at) as month,
            COUNT(*) as reservation_count,
            mr.department
          FROM reservation r
          JOIN meeting_room mr ON r.room_id = mr.room_id
          ${isFacultyExecutive(user) ?
            Prisma.sql`WHERE mr.department = ${user.department}` :
            (department ? Prisma.sql`WHERE mr.department = ${department}` : Prisma.sql``)
          }
          GROUP BY DATE_TRUNC('month', r.created_at), mr.department
          ORDER BY month DESC
          LIMIT 12
        `
      }

      // Add room details to utilization data
      if (reports.room_utilization.length > 0) {
        const roomIds = reports.room_utilization.map(r => r.room_id)
        const rooms = await prisma.meeting_room.findMany({
          where: { room_id: { in: roomIds } },
          select: { room_id: true, room_name: true, department: true }
        })

        reports.room_utilization = reports.room_utilization.map(util => ({
          ...util,
          meeting_room: rooms.find(room => room.room_id === util.room_id)
        }))
      }

      return {
        success: true,
        message: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
        executive_type: user.position,
        department: isFacultyExecutive(user) ? user.department : '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞',
        reports
      }

    } catch (error) {
      console.error('‚ùå Executive Reports Error:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'
      }
    }
  })

  // ===== Executive Room Overview =====
  .get('/rooms', async ({ request, query, set }) => {
    const user = await authMiddleware(request, set)
    if (user.success === false) return user

    if (!isExecutive(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      let whereCondition = {}

      // Faculty Executive ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ì‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      if (isFacultyExecutive(user)) {
        whereCondition.department = user.department
      }

      const rooms = await prisma.meeting_room.findMany({
        where: whereCondition,
        select: {
          room_id: true,
          room_name: true,
          capacity: true,
          location_m: true,
          department: true,
          status_m: true,
          created_at: true
        },
        orderBy: { department: 'asc' }
      })

      return {
        success: true,
        message: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
        executive_type: user.position,
        accessible_departments: isFacultyExecutive(user) ? [user.department] : '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ì‡∏∞',
        rooms
      }

    } catch (error) {
      console.error('‚ùå Executive Rooms Error:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°'
      }
    }
  })

export default executiveRoutes
