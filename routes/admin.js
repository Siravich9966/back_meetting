// ===================================================================
// Admin API - New 3-Table System
// ===================================================================

import { Elysia } from 'elysia'
import prisma from '../lib/prisma.js'
import { authMiddleware, isAdmin } from '../middleware/index.js'
import {
  isValidPosition,
  getDepartmentFromPosition,
  getExecutivePositionType,
  ALL_OFFICER_POSITIONS,
  POSITIONS
} from '../utils/positions.js'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£
const positionDisplay = (role, position, department) => {
  // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ executive ‡πÄ‡∏Å‡πá‡∏ö position ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
  return position || null
}

export const adminRoutes = new Elysia({ prefix: '/protected/admin' })
  
  // ============================
  // üë• ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .get('/users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üë• Admin: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å table ‡∏û‡∏£‡πâ‡∏≠‡∏° address fields
      const [users, officers, executives, admins] = await Promise.all([
        prisma.users.findMany({
          select: {
            user_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          },
          orderBy: {
            created_at: 'asc'  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
          }
        }),
        prisma.officer.findMany({
          select: {
            officer_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          },
          orderBy: {
            created_at: 'asc'  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
          }
        }),
        prisma.executive.findMany({
          select: {
            executive_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          },
          orderBy: {
            created_at: 'asc'  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
          }
        }),
        prisma.admin.findMany({
          select: {
            admin_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          },
          orderBy: {
            created_at: 'asc'  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
          }
        })
      ])

      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° role + position_display (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
      const allUsers = [
        ...users.map(u => ({ ...u, role: 'user' })),
        ...officers.map(o => ({ ...o, role: 'officer' })),
        ...executives.map(e => ({ ...e, role: 'executive' })),
        ...admins.map(a => ({ ...a, role: 'admin' }))
      ].map(u => ({
        ...u,
        position_display: positionDisplay(u.role, u.position, u.department)
      }))

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° created_at ‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      allUsers.sort((a, b) => new Date(a.created_at) - new Date(b.created_at))
      
      return {
        success: true,
        message: `‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${allUsers.length} ‡∏Ñ‡∏ô)`,
        data: allUsers
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // ============================
  .get('/users/:userId/:role', async ({ request, set, params }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId, role } = params
      console.log(`üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID=${userId}, Role=${role}`)
      
      let userData = null
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° role ‡∏û‡∏£‡πâ‡∏≠‡∏° address information
      if (role === 'user') {
        userData = await prisma.users.findUnique({
          where: { user_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'officer') {
        userData = await prisma.officer.findUnique({
          where: { officer_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'executive') {
        userData = await prisma.executive.findUnique({
          where: { executive_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'admin') {
        userData = await prisma.admin.findUnique({
          where: { admin_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      }

      if (!userData) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        }
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address + position_display
      const responseData = {
        ...userData,
        role,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
        province_name: userData.province?.province_name || null,
        district_name: userData.district?.district_name || null,
        subdistrict_name: userData.subdistrict?.subdistrict_name || null,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        position_display: positionDisplay(role, userData.position, userData.department)
      }

      return {
        success: true,
        message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.first_name} ${userData.last_name}`,
        data: responseData
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      }
    }
  })

  // ============================
  // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .post('/users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const body = await request.json()
      console.log(`‚ûï Admin: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ${body.first_name} ${body.last_name} (${body.role})`)
      console.log(`üìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î=${body.province_id}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠=${body.district_id}, ‡∏ï‡∏≥‡∏ö‡∏•=${body.subdistrict_id}, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå=${body.zip_code}`)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (!body.email || !body.password || !body.first_name || !body.last_name || !body.role) {
        set.status = 400
        return { success: false, message: '‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ first_name, last_name, email, password, role)' }
      }

      // Hash password ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      const bcrypt = await import('bcryptjs')
      const hashedPassword = await bcrypt.hash(body.password, 10)

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ unique lookup ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 409
      const existingInUsers = await prisma.users.findUnique({ where: { email: body.email } })
      const existingInOfficer = await prisma.officer.findUnique({ where: { email: body.email } })
      const existingInExecutive = await prisma.executive.findUnique({ where: { email: body.email } })
      const existingInAdmin = await prisma.admin.findUnique({ where: { email: body.email } })

      if (existingInUsers || existingInOfficer || existingInExecutive || existingInAdmin) {
        set.status = 409
        return { success: false, message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' }
      }

      let newUser
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô table ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° role
      switch(body.role) {
        case 'user':
          newUser = await prisma.users.create({
            data: {
              role_id: 1, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
              email: body.email,
              password: hashedPassword,
              first_name: body.first_name,
              last_name: body.last_name,
              position: body.position || null,
              department: body.department || null,
              // Address fields
              province_id: body.province_id ? parseInt(body.province_id) : null,
              district_id: body.district_id ? parseInt(body.district_id) : null,
              subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
              zip_code: body.zip_code ? parseInt(body.zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        case 'officer':
          // officer ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ position ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
          if (!body.position || !ALL_OFFICER_POSITIONS.includes(body.position)) {
            set.status = 400
            return { success: false, message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
          }

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì department ‡∏à‡∏≤‡∏Å position ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
          {
            const derivedDept = getDepartmentFromPosition(body.position)
            const finalDept = body.department || derivedDept || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
            newUser = await prisma.officer.create({
              data: {
                role_id: 2, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer
                email: body.email,
                password: hashedPassword,
                first_name: body.first_name,
                last_name: body.last_name,
                position: body.position, // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                department: finalDept,
                // Address fields
                province_id: body.province_id ? parseInt(body.province_id) : null,
                district_id: body.district_id ? parseInt(body.district_id) : null,
                subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
                zip_code: body.zip_code ? parseInt(body.zip_code) : null,
                created_at: new Date()
              }
            })
          }
          break
          
        case 'executive':
          // executive ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
          if (!body.position || !isValidPosition(body.position)) {
            set.status = 400
            return { success: false, message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
          }

          {
            const execType = getExecutivePositionType(body.position) // 'university_executive' | 'faculty_executive'
            if (!execType) {
              set.status = 400
              return { success: false, message: '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
            }

            // department: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ ‚Üí ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ì‡∏∞ ‚Üí ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å position ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            const derivedDept = execType === 'university_executive'
              ? '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ'
              : (getDepartmentFromPosition(body.position) || body.department)

            if (execType === 'faculty_executive' && !derivedDept) {
              set.status = 400
              return { success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ì‡∏∞' }
            }

            newUser = await prisma.executive.create({
              data: {
                role_id: 4, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö executive
                email: body.email,
                password: hashedPassword,
                first_name: body.first_name,
                last_name: body.last_name,
                position: body.position, // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                department: derivedDept,
                // Address fields
                province_id: body.province_id ? parseInt(body.province_id) : null,
                district_id: body.district_id ? parseInt(body.district_id) : null,
                subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
                zip_code: body.zip_code ? parseInt(body.zip_code) : null,
                created_at: new Date()
              }
            })
          }
          break
          
        case 'admin':
          newUser = await prisma.admin.create({
            data: {
              role_id: 3, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
              email: body.email,
              password: hashedPassword,
              first_name: body.first_name,
              last_name: body.last_name,
              position: body.position || '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
              department: body.department || '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ',
              // Address fields
              province_id: body.province_id ? parseInt(body.province_id) : null,
              district_id: body.district_id ? parseInt(body.district_id) : null,
              subdistrict_id: body.subdistrict_id ? parseInt(body.subdistrict_id) : null,
              zip_code: body.zip_code ? parseInt(body.zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        default:
          throw new Error('Invalid role specified')
      }
      
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password ‡∏Å‡∏•‡∏±‡∏ö + ‡πÄ‡∏ï‡∏¥‡∏° position_display (‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢)
      const { password, ...safeUser } = newUser || {}
      const responseData = {
        ...safeUser,
        role: body.role,
        position_display: positionDisplay(body.role, safeUser.position, safeUser.department)
      }
      return {
        success: true,
        message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${body.role} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: responseData
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .put('/users/:userId', async ({ request, set, params }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId } = params
      const { first_name, last_name, email, department, originalRole, zip_code, province_id, district_id, subdistrict_id } = await request.json()
      
      console.log(`‚úèÔ∏è Admin: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID=${userId}, Role=${originalRole}`)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      const existingEmail = await Promise.all([
        prisma.users.findFirst({ where: { email, NOT: { user_id: originalRole === 'user' ? parseInt(userId) : undefined } } }),
        prisma.officer.findFirst({ where: { email, NOT: { officer_id: originalRole === 'officer' ? parseInt(userId) : undefined } } }),
        prisma.executive.findFirst({ where: { email, NOT: { executive_id: originalRole === 'executive' ? parseInt(userId) : undefined } } }),
        prisma.admin.findFirst({ where: { email, NOT: { admin_id: originalRole === 'admin' ? parseInt(userId) : undefined } } })
      ])
      
      if (existingEmail.some(result => result !== null)) {
        set.status = 400
        return {
          success: false,
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          error: 'email already exists'
        }
      }
      


      let updatedUser
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role)
      switch(originalRole) {
          case 'user':
            updatedUser = await prisma.users.update({
              where: { user_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'officer':
            updatedUser = await prisma.officer.update({
              where: { officer_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'executive':
            updatedUser = await prisma.executive.update({
              where: { executive_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'admin':
            updatedUser = await prisma.admin.update({
              where: { admin_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
        }
      
      return {
        success: true,
        message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: {
          ...updatedUser,
          role: originalRole,
          position_display: positionDisplay(originalRole, updatedUser.position, updatedUser.department)
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .delete('/users/:userId', async ({ request, set, params }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId } = params
      const body = await request.json()
      const { role } = body

      console.log(`üóëÔ∏è Admin: ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID=${userId}, Role=${role}`)
      
      let deleteResult
      
      // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å table ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° role
      switch(role) {
        case 'user':
          // ‡∏•‡∏ö reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedUserReservations = await prisma.reservation.deleteMany({
            where: { user_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedUserReservations.count} reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö user ID=${userId}`)
          
          // ‡∏•‡∏ö reviews ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedUserReviews = await prisma.review.deleteMany({
            where: { user_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedUserReviews.count} reviews ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö user ID=${userId}`)
          
          deleteResult = await prisma.users.delete({
            where: { user_id: parseInt(userId) }
          })
          break
        case 'officer':
          // ‡∏•‡∏ö reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedReservations = await prisma.reservation.deleteMany({
            where: { officer_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedReservations.count} reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö officer ID=${userId}`)
          
          deleteResult = await prisma.officer.delete({
            where: { officer_id: parseInt(userId) }
          })
          break
        case 'executive':
          deleteResult = await prisma.executive.delete({
            where: { executive_id: parseInt(userId) }
          })
          break
        case 'admin':
          deleteResult = await prisma.admin.delete({
            where: { admin_id: parseInt(userId) }
          })
          break
        default:
          throw new Error('Invalid role specified')
      }
      
      return {
        success: true,
        message: `‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${role} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        data: deleteResult
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  // ============================
  // ============================
  // üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á 3 tables
  // ============================
  .get('/stats', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Admin: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ó‡∏∏‡∏Å 4 tables)')
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô users table
      const userCount = await prisma.users.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô officer table
      const officerCount = await prisma.officer.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô admin table
      const adminCount = await prisma.admin.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô executive table - ‡∏ó‡∏µ‡πà admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const executiveCount = await prisma.executive.count()
      
      return {
        success: true,
        message: 'Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏ß‡∏° executives)',
        stats: {
          total: userCount + officerCount + adminCount + executiveCount,
          users: userCount,
          officers: officerCount,
          admins: adminCount,
          executives: executiveCount
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
      }
    }
  })
  
  // ============================
  // ÔøΩ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
  // ============================
  .get('/department-stats', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Admin: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞')
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å users table ‡∏ï‡∏≤‡∏° department
      const usersByDept = await prisma.users.groupBy({
        by: ['department'],
        _count: {
          user_id: true
        }
      })
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô officer ‡∏ï‡∏≤‡∏° department
      const officersByDept = await prisma.officer.groupBy({
        by: ['department'],
        _count: {
          officer_id: true
        }
      })
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô executive ‡∏ï‡∏≤‡∏° department
      const executivesByDept = await prisma.executive.groupBy({
        by: ['department'],
        _count: {
          executive_id: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏° department
      const departmentStats = new Map()
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users (filter out null/empty department)
      usersByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).users = item._count.user_id
        }
      })
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• officers (filter out null/empty department)
      officersByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).officers = item._count.officer_id
        }
      })
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• executives (filter out null/empty department)
      executivesByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).executives = item._count.executive_id
        }
      })
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total ‡πÅ‡∏ï‡πà‡∏•‡∏∞ department
      departmentStats.forEach(dept => {
        dept.total = dept.users + dept.officers + dept.executives
      })
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° total ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      const sortedStats = Array.from(departmentStats.values())
        .sort((a, b) => b.total - a.total)
      
      return {
        success: true,
        message: `‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞ (${sortedStats.length} ‡∏Ñ‡∏ì‡∏∞)`,
        data: sortedStats
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ì‡∏∞:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ì‡∏∞',
        error: error.message
      }
    }
  })
  
  // ============================
  // ÔøΩüëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  // ============================
  .get('/executives', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      
      let executives = await prisma.executive.findMany({
        select: {
          executive_id: true,
          role_id: true,
          first_name: true,
          last_name: true,
          email: true,
          position: true,
          department: true,
          citizen_id: true,
          zip_code: true,
          created_at: true
        }
      })
      // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
      executives = executives.map(e => ({
        ...e,
        position_display: positionDisplay('executive', e.position, e.department)
      }))
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${executives.length} ‡∏Ñ‡∏ô)`,
        executives
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive' 
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  // ============================
  .get('/all-users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å 4 tables')
      
      const [users, officers, admins, executives] = await Promise.all([
        prisma.users.findMany({
          select: {
            user_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.officer.findMany({
          select: {
            officer_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.admin.findMany({
          select: {
            admin_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.executive.findMany({
          select: {
            executive_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        })
      ])
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏à‡∏≤‡∏Å 4 tables`,
        data: {
          users: users.map(u => ({
            ...u,
            role: 'user',
            position_display: positionDisplay('user', u.position, u.department)
          })),
          officers: officers.map(o => ({
            ...o,
            role: 'officer',
            position_display: positionDisplay('officer', o.position, o.department)
          })),
          admins: admins.map(a => ({
            ...a,
            role: 'admin',
            position_display: positionDisplay('admin', a.position, a.department)
          })),
          executives: executives.map(e => ({
            ...e,
            role: 'executive',
            position_display: positionDisplay('executive', e.position, e.department)
          }))
        },
        summary: {
          total: users.length + officers.length + admins.length + executives.length,
          users: users.length,
          officers: officers.length,
          admins: admins.length,
          executives: executives.length
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer
  // ============================
  .post('/promote/user-to-officer', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const auth = await authMiddleware(request, set)
    if (auth.success === false) return auth
    
    if (!isAdmin(auth)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer')
      
      if (!body.email) {
        set.status = 400
        return { 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' 
        }
      }
      
      // Simple promotion logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà role-transfer function
      const targetUser = await prisma.users.findUnique({
        where: { email: body.email }
      })
      
      if (!targetUser) {
        set.status = 404
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö user: ${body.email}`
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingOfficer = await prisma.officer.findUnique({
        where: { email: body.email }
      })
      
      if (existingOfficer) {
        set.status = 409
        return {
          success: false,
          message: `‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}`
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á officer ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
      await prisma.officer.create({
        data: {
          role_id: 2, // officer role
          first_name: targetUser.first_name,
          last_name: targetUser.last_name,
          email: targetUser.email,
          password: targetUser.password,
          citizen_id: targetUser.citizen_id,
          position: targetUser.position,
          department: targetUser.department,
          province_id: targetUser.province_id,
          district_id: targetUser.district_id,
          subdistrict_id: targetUser.subdistrict_id,
          zip_code: targetUser.zip_code
        }
      })
      
      // ‡∏•‡∏ö user ‡πÄ‡∏î‡∏¥‡∏°
      await prisma.users.delete({ where: { email: body.email } })

      return { success: true, message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${body.email} ‡πÄ‡∏õ‡πá‡∏ô Officer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin
  // ============================
  .post('/promote/officer-to-admin', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const auth = await authMiddleware(request, set)
    if (auth.success === false) return auth
    if (!isAdmin(auth)) {
      set.status = 403
      return { success: false, message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin')
      if (!body?.email) {
        set.status = 400
        return { success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' }
      }

      const officer = await prisma.officer.findUnique({ where: { email: body.email } })
      if (!officer) {
        set.status = 404
        return { success: false, message: `‡πÑ‡∏°‡πà‡∏û‡∏ö officer: ${body.email}` }
      }

      const existingAdmin = await prisma.admin.findUnique({ where: { email: body.email } })
      if (existingAdmin) {
        set.status = 409
        return { success: false, message: `‡∏°‡∏µ admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}` }
      }

      await prisma.admin.create({
        data: {
          role_id: 3,
          first_name: officer.first_name,
          last_name: officer.last_name,
          email: officer.email,
          password: officer.password,
          citizen_id: officer.citizen_id,
          position: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          department: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ',
          province_id: officer.province_id,
          district_id: officer.district_id,
          subdistrict_id: officer.subdistrict_id,
          zip_code: officer.zip_code
        }
      })

      await prisma.officer.delete({ where: { email: body.email } })

      return { success: true, message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${body.email} ‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` }
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' }
    }
  })

  // ============================
  // üìß ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // ============================
  .post('/check-email', async ({ request, set, body }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { email, userId, role } = body

      console.log(`üìß Admin: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ - ${email} (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ${role} ID: ${userId})`)
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å table ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const [existingUsers, existingOfficers, existingExecutives, existingAdmins] = await Promise.all([
        prisma.users.findFirst({
          where: {
            email,
            NOT: role === 'user' ? { user_id: parseInt(userId) } : undefined
          }
        }),
        prisma.officer.findFirst({
          where: {
            email,
            NOT: role === 'officer' ? { officer_id: parseInt(userId) } : undefined
          }
        }),
        prisma.executive.findFirst({
          where: {
            email,
            NOT: role === 'executive' ? { executive_id: parseInt(userId) } : undefined
          }
        }),
        prisma.admin.findFirst({
          where: {
            email,
            NOT: role === 'admin' ? { admin_id: parseInt(userId) } : undefined
          }
        })
      ])

      const emailExists = existingUsers || existingOfficers || existingExecutives || existingAdmins

      return {
        success: true,
        available: !emailExists,
        message: emailExists ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' : '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
      }
    }
  })



export default adminRoutes