// ===================================================================
// Admin API - New 3-Table System
// ===================================================================

import { Elysia } from 'elysia'
import prisma from '../lib/prisma.js'
import { authMiddleware, isAdmin } from '../middleware/index.js'

export const adminRoutes = new Elysia({ prefix: '/protected/admin' })
  
  // ============================
  // üë• ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .get('/users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üë• Admin: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å table ‡∏û‡∏£‡πâ‡∏≠‡∏° address fields
      const [users, officers, executives, admins] = await Promise.all([
        prisma.users.findMany({
          select: {
            user_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          }
        }),
        prisma.officer.findMany({
          select: {
            officer_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          }
        }),
        prisma.executive.findMany({
          select: {
            executive_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          }
        }),
        prisma.admin.findMany({
          select: {
            admin_id: true,
            first_name: true,
            last_name: true,
            email: true,
            citizen_id: true,
            position: true,
            department: true,
            profile_image: true,
            province_id: true,
            district_id: true,
            subdistrict_id: true,
            zip_code: true,
            created_at: true
          }
        })
      ])

      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° role
      const allUsers = [
        ...users.map(u => ({ ...u, role: 'user' })),
        ...officers.map(o => ({ ...o, role: 'officer' })),
        ...executives.map(e => ({ ...e, role: 'executive' })),
        ...admins.map(a => ({ ...a, role: 'admin' }))
      ]

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° created_at ‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      allUsers.sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
      
      return {
        success: true,
        message: `‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${allUsers.length} ‡∏Ñ‡∏ô)`,
        data: allUsers
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .post('/users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { first_name, last_name, email, citizen_id, position, department, role, password, province_id, district_id, subdistrict_id, zip_code } = await request.json()
      
      console.log(`‚ûï Admin: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ${first_name} ${last_name} (${role})`)
      console.log(`üìç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î=${province_id}, ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠=${district_id}, ‡∏ï‡∏≥‡∏ö‡∏•=${subdistrict_id}, ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå=${zip_code}`)
      
      // Hash password
      const hashedPassword = await Bun.password.hash(password)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
      const existingEmail = await Promise.all([
        prisma.users.findFirst({ where: { email } }),
        prisma.officer.findFirst({ where: { email } }),
        prisma.executive.findFirst({ where: { email } }),
        prisma.admin.findFirst({ where: { email } })
      ])
      
      if (existingEmail.some(result => result !== null)) {
        set.status = 400
        return {
          success: false,
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          error: 'email already exists'
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ã‡πâ‡∏≥
      const existingCitizenId = await Promise.all([
        prisma.users.findFirst({ where: { citizen_id } }),
        prisma.officer.findFirst({ where: { citizen_id } }),
        prisma.executive.findFirst({ where: { citizen_id } }),
        prisma.admin.findFirst({ where: { citizen_id } })
      ])
      
      if (existingCitizenId.some(result => result !== null)) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          error: 'citizen_id already exists'
        }
      }

      let newUser
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô table ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° role
      switch(role) {
        case 'user':
          newUser = await prisma.users.create({
            data: {
              role_id: 1, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
              first_name,
              last_name,
              email,
              citizen_id,
              position: position || null,
              department: department || null,
              password: hashedPassword, // ‡πÉ‡∏ä‡πâ password ‡πÅ‡∏ó‡∏ô password_hash
              // Address fields
              province_id: province_id ? parseInt(province_id) : null,
              district_id: district_id ? parseInt(district_id) : null,
              subdistrict_id: subdistrict_id ? parseInt(subdistrict_id) : null,
              zip_code: zip_code ? parseInt(zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        case 'officer':
          newUser = await prisma.officer.create({
            data: {
              role_id: 2, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö officer
              first_name,
              last_name,
              email,
              citizen_id,
              position: position || '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà',
              department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
              password: hashedPassword, // ‡πÉ‡∏ä‡πâ password ‡πÅ‡∏ó‡∏ô password_hash
              // Address fields
              province_id: province_id ? parseInt(province_id) : null,
              district_id: district_id ? parseInt(district_id) : null,
              subdistrict_id: subdistrict_id ? parseInt(subdistrict_id) : null,
              zip_code: zip_code ? parseInt(zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        case 'executive':
          newUser = await prisma.executive.create({
            data: {
              role_id: 3, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö executive
              first_name,
              last_name,
              email,
              citizen_id,
              position: position || '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
              department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
              password: hashedPassword, // ‡πÉ‡∏ä‡πâ password ‡πÅ‡∏ó‡∏ô password_hash
              // Address fields
              province_id: province_id ? parseInt(province_id) : null,
              district_id: district_id ? parseInt(district_id) : null,
              subdistrict_id: subdistrict_id ? parseInt(subdistrict_id) : null,
              zip_code: zip_code ? parseInt(zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        case 'admin':
          newUser = await prisma.admin.create({
            data: {
              role_id: 4, // role_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
              first_name,
              last_name,
              email,
              citizen_id,
              position: position || '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
              department: department || '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏≠‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏î‡∏µ',
              password: hashedPassword, // ‡πÉ‡∏ä‡πâ password ‡πÅ‡∏ó‡∏ô password_hash
              // Address fields
              province_id: province_id ? parseInt(province_id) : null,
              district_id: district_id ? parseInt(district_id) : null,
              subdistrict_id: subdistrict_id ? parseInt(subdistrict_id) : null,
              zip_code: zip_code ? parseInt(zip_code) : null,
              created_at: new Date()
            }
          })
          break
          
        default:
          throw new Error('Invalid role specified')
      }
      
      return {
        success: true,
        message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${role} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: { ...newUser, role }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .put('/users/:userId', async ({ request, set, params }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId } = params
      const { first_name, last_name, email, citizen_id, department, originalRole, zip_code, province_id, district_id, subdistrict_id } = await request.json()
      
      console.log(`‚úèÔ∏è Admin: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID=${userId}, Role=${originalRole}`)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      const existingEmail = await Promise.all([
        prisma.users.findFirst({ where: { email, NOT: { user_id: originalRole === 'user' ? parseInt(userId) : undefined } } }),
        prisma.officer.findFirst({ where: { email, NOT: { officer_id: originalRole === 'officer' ? parseInt(userId) : undefined } } }),
        prisma.executive.findFirst({ where: { email, NOT: { executive_id: originalRole === 'executive' ? parseInt(userId) : undefined } } }),
        prisma.admin.findFirst({ where: { email, NOT: { admin_id: originalRole === 'admin' ? parseInt(userId) : undefined } } })
      ])
      
      if (existingEmail.some(result => result !== null)) {
        set.status = 400
        return {
          success: false,
          message: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          error: 'email already exists'
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      const existingCitizenId = await Promise.all([
        prisma.users.findFirst({ where: { citizen_id, NOT: { user_id: originalRole === 'user' ? parseInt(userId) : undefined } } }),
        prisma.officer.findFirst({ where: { citizen_id, NOT: { officer_id: originalRole === 'officer' ? parseInt(userId) : undefined } } }),
        prisma.executive.findFirst({ where: { citizen_id, NOT: { executive_id: originalRole === 'executive' ? parseInt(userId) : undefined } } }),
        prisma.admin.findFirst({ where: { citizen_id, NOT: { admin_id: originalRole === 'admin' ? parseInt(userId) : undefined } } })
      ])
      
      if (existingCitizenId.some(result => result !== null)) {
        set.status = 400
        return {
          success: false,
          message: '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß',
          error: 'citizen_id already exists'
        }
      }

      let updatedUser
      
      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table ‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role)
      switch(originalRole) {
          case 'user':
            updatedUser = await prisma.users.update({
              where: { user_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                citizen_id,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'officer':
            updatedUser = await prisma.officer.update({
              where: { officer_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                citizen_id,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'executive':
            updatedUser = await prisma.executive.update({
              where: { executive_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                citizen_id,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
          case 'admin':
            updatedUser = await prisma.admin.update({
              where: { admin_id: parseInt(userId) },
              data: {
                first_name,
                last_name,
                email,
                citizen_id,
                department: department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
                zip_code: zip_code ? parseInt(zip_code, 10) : null,
                province_id: province_id ? parseInt(province_id, 10) : null,
                district_id: district_id ? parseInt(district_id, 10) : null,
                subdistrict_id: subdistrict_id ? parseInt(subdistrict_id, 10) : null
              }
            })
            break
        }
      
      return {
        success: true,
        message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: { ...updatedUser, role: originalRole }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // üóëÔ∏è ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
  // ============================
  .delete('/users/:userId', async ({ request, set, params }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId } = params
      const body = await request.json()
      const { role } = body

      console.log(`üóëÔ∏è Admin: ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID=${userId}, Role=${role}`)
      
      let deleteResult
      
      // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å table ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° role
      switch(role) {
        case 'user':
          // ‡∏•‡∏ö reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedUserReservations = await prisma.reservation.deleteMany({
            where: { user_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedUserReservations.count} reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö user ID=${userId}`)
          
          // ‡∏•‡∏ö reviews ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedUserReviews = await prisma.review.deleteMany({
            where: { user_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedUserReviews.count} reviews ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö user ID=${userId}`)
          
          deleteResult = await prisma.users.delete({
            where: { user_id: parseInt(userId) }
          })
          break
        case 'officer':
          // ‡∏•‡∏ö reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô (Cascade Delete)
          const deletedReservations = await prisma.reservation.deleteMany({
            where: { officer_id: parseInt(userId) }
          })
          console.log(`üóëÔ∏è ‡∏•‡∏ö ${deletedReservations.count} reservations ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö officer ID=${userId}`)
          
          deleteResult = await prisma.officer.delete({
            where: { officer_id: parseInt(userId) }
          })
          break
        case 'executive':
          deleteResult = await prisma.executive.delete({
            where: { executive_id: parseInt(userId) }
          })
          break
        case 'admin':
          deleteResult = await prisma.admin.delete({
            where: { admin_id: parseInt(userId) }
          })
          break
        default:
          throw new Error('Invalid role specified')
      }
      
      return {
        success: true,
        message: `‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${role} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
        data: deleteResult
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
        error: error.message
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  // ============================
  // ============================
  // üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á 3 tables
  // ============================
  .get('/stats', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Admin: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ó‡∏∏‡∏Å 4 tables)')
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô users table
      const userCount = await prisma.users.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô officer table
      const officerCount = await prisma.officer.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô admin table
      const adminCount = await prisma.admin.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô executive table - ‡∏ó‡∏µ‡πà admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const executiveCount = await prisma.executive.count()
      
      return {
        success: true,
        message: 'Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏ß‡∏° executives)',
        stats: {
          total: userCount + officerCount + adminCount + executiveCount,
          users: userCount,
          officers: officerCount,
          admins: adminCount,
          executives: executiveCount
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
      }
    }
  })
  
  // ============================
  // ÔøΩ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
  // ============================
  .get('/department-stats', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Admin: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞')
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å users table ‡∏ï‡∏≤‡∏° department
      const usersByDept = await prisma.users.groupBy({
        by: ['department'],
        _count: {
          user_id: true
        }
      })
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô officer ‡∏ï‡∏≤‡∏° department
      const officersByDept = await prisma.officer.groupBy({
        by: ['department'],
        _count: {
          officer_id: true
        }
      })
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô executive ‡∏ï‡∏≤‡∏° department
      const executivesByDept = await prisma.executive.groupBy({
        by: ['department'],
        _count: {
          executive_id: true
        }
      })
      
      // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏° department
      const departmentStats = new Map()
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users (filter out null/empty department)
      usersByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).users = item._count.user_id
        }
      })
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• officers (filter out null/empty department)
      officersByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).officers = item._count.officer_id
        }
      })
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• executives (filter out null/empty department)
      executivesByDept.forEach(item => {
        const dept = item.department
        if (dept && dept.trim() !== '') { // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined, ‡πÅ‡∏•‡∏∞ empty string
          if (!departmentStats.has(dept)) {
            departmentStats.set(dept, { department: dept, users: 0, officers: 0, executives: 0, total: 0 })
          }
          departmentStats.get(dept).executives = item._count.executive_id
        }
      })
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total ‡πÅ‡∏ï‡πà‡∏•‡∏∞ department
      departmentStats.forEach(dept => {
        dept.total = dept.users + dept.officers + dept.executives
      })
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° total ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      const sortedStats = Array.from(departmentStats.values())
        .sort((a, b) => b.total - a.total)
      
      return {
        success: true,
        message: `‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ì‡∏∞ (${sortedStats.length} ‡∏Ñ‡∏ì‡∏∞)`,
        data: sortedStats
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ì‡∏∞:', error)
      set.status = 500
      return { 
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ì‡∏∞',
        error: error.message
      }
    }
  })
  
  // ============================
  // ÔøΩüëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  // ============================
  .get('/executives', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      
      const executives = await prisma.executive.findMany({
        select: {
          executive_id: true,
          role_id: true,
          first_name: true,
          last_name: true,
          email: true,
          position: true,
          department: true,
          citizen_id: true,
          zip_code: true,
          created_at: true
        }
      })
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${executives.length} ‡∏Ñ‡∏ô)`,
        executives
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive' 
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  // ============================
  .get('/all-users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å 4 tables')
      
      const [users, officers, admins, executives] = await Promise.all([
        prisma.users.findMany({
          select: {
            user_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.officer.findMany({
          select: {
            officer_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.admin.findMany({
          select: {
            admin_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.executive.findMany({
          select: {
            executive_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        })
      ])
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏à‡∏≤‡∏Å 4 tables`,
        data: {
          users: users.map(u => ({...u, role: 'user'})),
          officers: officers.map(o => ({...o, role: 'officer'})),
          admins: admins.map(a => ({...a, role: 'admin'})),
          executives: executives.map(e => ({...e, role: 'executive'}))
        },
        summary: {
          total: users.length + officers.length + admins.length + executives.length,
          users: users.length,
          officers: officers.length,
          admins: admins.length,
          executives: executives.length
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer
  // ============================
  .post('/promote/user-to-officer', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer')
      
      if (!body.email) {
        set.status = 400
        return { 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' 
        }
      }
      
      // Simple promotion logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà role-transfer function
      const user = await prisma.users.findUnique({
        where: { email: body.email }
      })
      
      if (!user) {
        set.status = 404
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö user: ${body.email}`
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingOfficer = await prisma.officer.findUnique({
        where: { email: body.email }
      })
      
      if (existingOfficer) {
        set.status = 409
        return {
          success: false,
          message: `‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}`
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á officer ‡πÉ‡∏´‡∏°‡πà
      await prisma.officer.create({
        data: {
          role_id: 2, // officer role
          first_name: user.first_name,
          last_name: user.last_name,
          email: user.email,
          password: user.password,
          citizen_id: user.citizen_id,
          position: user.position,
          department: user.department,
          zip_code: user.zip_code
        }
      })
      
      // ‡∏•‡∏ö user ‡πÄ‡∏î‡∏¥‡∏°
      await prisma.users.delete({
        where: { email: body.email }
      })
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin
  // ============================
  .post('/promote/officer-to-admin', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin')
      
      if (!body.email) {
        set.status = 400
        return { 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' 
        }
      }
      
      // Simple promotion logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà role-transfer function  
      const officer = await prisma.officer.findUnique({
        where: { email: body.email }
      })
      
      if (!officer) {
        set.status = 404
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö officer: ${body.email}`
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingAdmin = await prisma.admin.findUnique({
        where: { email: body.email }
      })
      
      if (existingAdmin) {
        set.status = 409
        return {
          success: false,
          message: `‡∏°‡∏µ admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}`
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin ‡πÉ‡∏´‡∏°‡πà
      await prisma.admin.create({
        data: {
          role_id: 1, // admin role
          first_name: officer.first_name,
          last_name: officer.last_name,
          email: officer.email,
          password: officer.password,
          citizen_id: officer.citizen_id,
          position: officer.position,
          department: officer.department,
          zip_code: officer.zip_code
        }
      })
      
      // ‡∏•‡∏ö officer ‡πÄ‡∏î‡∏¥‡∏°
      await prisma.officer.delete({
        where: { email: body.email }
      })
      
      return {
        success: true,
        message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${body.email} ‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' 
      }
    }
  })

  // ============================
  // üë§ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // ============================
  .get('/users/:userId/:role', async ({ params, request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { userId, role } = params
      console.log(`üë§ Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ID: ${userId}, Role: ${role}`)
      
      let userData = null
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° role ‡∏û‡∏£‡πâ‡∏≠‡∏° address information
      if (role === 'user') {
        userData = await prisma.users.findUnique({
          where: { user_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'officer') {
        userData = await prisma.officer.findUnique({
          where: { officer_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'executive') {
        userData = await prisma.executive.findUnique({
          where: { executive_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      } else if (role === 'admin') {
        userData = await prisma.admin.findUnique({
          where: { admin_id: parseInt(userId) },
          include: {
            province: true,
            district: true,
            subdistrict: true
          }
        })
      }

      if (!userData) {
        set.status = 404
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
        }
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address
      const responseData = {
        ...userData,
        role,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
        province_name: userData.province?.province_name || null,
        district_name: userData.district?.district_name || null,
        subdistrict_name: userData.subdistrict?.subdistrict_name || null,
      }

      return {
        success: true,
        message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userData.first_name} ${userData.last_name}`,
        data: responseData
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      }
    }
  })

  // ============================
  // üìß ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // ============================
  .post('/check-email', async ({ request, set, body }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { email, userId, role } = body

      console.log(`üìß Admin: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ - ${email} (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ${role} ID: ${userId})`)
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å table ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const [existingUsers, existingOfficers, existingExecutives, existingAdmins] = await Promise.all([
        prisma.users.findFirst({
          where: {
            email,
            NOT: role === 'user' ? { user_id: parseInt(userId) } : undefined
          }
        }),
        prisma.officer.findFirst({
          where: {
            email,
            NOT: role === 'officer' ? { officer_id: parseInt(userId) } : undefined
          }
        }),
        prisma.executive.findFirst({
          where: {
            email,
            NOT: role === 'executive' ? { executive_id: parseInt(userId) } : undefined
          }
        }),
        prisma.admin.findFirst({
          where: {
            email,
            NOT: role === 'admin' ? { admin_id: parseInt(userId) } : undefined
          }
        })
      ])

      const emailExists = existingUsers || existingOfficers || existingExecutives || existingAdmins

      return {
        success: true,
        available: !emailExists,
        message: emailExists ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' : '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
      }
    }
  })

  // ============================
  // üÜî ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ã‡πâ‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // ============================
  .post('/check-citizen-id', async ({ request, set, body }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      const { citizen_id, userId, role } = body

      console.log(`üÜî Admin: ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ã‡πâ‡∏≥ - ${citizen_id} (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ${role} ID: ${userId})`)
      
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å table ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const [existingUsers, existingOfficers, existingExecutives, existingAdmins] = await Promise.all([
        prisma.users.findFirst({
          where: {
            citizen_id,
            NOT: role === 'user' ? { user_id: parseInt(userId) } : undefined
          }
        }),
        prisma.officer.findFirst({
          where: {
            citizen_id,
            NOT: role === 'officer' ? { officer_id: parseInt(userId) } : undefined
          }
        }),
        prisma.executive.findFirst({
          where: {
            citizen_id,
            NOT: role === 'executive' ? { executive_id: parseInt(userId) } : undefined
          }
        }),
        prisma.admin.findFirst({
          where: {
            citizen_id,
            NOT: role === 'admin' ? { admin_id: parseInt(userId) } : undefined
          }
        })
      ])

      const citizenIdExists = existingUsers || existingOfficers || existingExecutives || existingAdmins

      return {
        success: true,
        available: !citizenIdExists,
        message: citizenIdExists ? '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' : '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:', error)
      set.status = 500
      return {
        success: false,
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'
      }
    }
  })

export default adminRoutes