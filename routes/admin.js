// ===================================================================
// Admin API - New 3-Table System
// ===================================================================

import { Elysia } from 'elysia'
import prisma from '../lib/prisma.js'
import { authMiddleware, isAdmin } from '../middleware/index.js'

export const adminRoutes = new Elysia({ prefix: '/protected/admin' })
  // ============================
  // üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á 3 tables
  // ============================
  .get('/stats', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üìä Admin: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ó‡∏∏‡∏Å 4 tables)')
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô users table
      const userCount = await prisma.users.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô officer table
      const officerCount = await prisma.officer.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô admin table
      const adminCount = await prisma.admin.count()
      
      // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô executive table - ‡∏ó‡∏µ‡πà admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const executiveCount = await prisma.executive.count()
      
      return {
        success: true,
        message: 'Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡∏£‡∏ß‡∏° executives)',
        stats: {
          total: userCount + officerCount + adminCount + executiveCount,
          users: userCount,
          officers: officerCount,
          admins: adminCount,
          executives: executiveCount
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
  // ============================
  .get('/executives', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      
      const executives = await prisma.executive.findMany({
        select: {
          executive_id: true,
          role_id: true,
          first_name: true,
          last_name: true,
          email: true,
          position: true,
          department: true,
          citizen_id: true,
          zip_code: true,
          created_at: true
        }
      })
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (${executives.length} ‡∏Ñ‡∏ô)`,
        executives
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Executive' 
      }
    }
  })
  
  // ============================
  // üëÅÔ∏è ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  // ============================
  .get('/all-users', async ({ request, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÅÔ∏è Admin: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å 4 tables')
      
      const [users, officers, admins, executives] = await Promise.all([
        prisma.users.findMany({
          select: {
            user_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.officer.findMany({
          select: {
            officer_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.admin.findMany({
          select: {
            admin_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        }),
        prisma.executive.findMany({
          select: {
            executive_id: true,
            first_name: true,
            last_name: true,
            email: true,
            position: true,
            department: true,
            created_at: true
          }
        })
      ])
      
      return {
        success: true,
        message: `Admin ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏à‡∏≤‡∏Å 4 tables`,
        data: {
          users: users.map(u => ({...u, role: 'user'})),
          officers: officers.map(o => ({...o, role: 'officer'})),
          admins: admins.map(a => ({...a, role: 'admin'})),
          executives: executives.map(e => ({...e, role: 'executive'}))
        },
        summary: {
          total: users.length + officers.length + admins.length + executives.length,
          users: users.length,
          officers: officers.length,
          admins: admins.length,
          executives: executives.length
        }
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer
  // ============================
  .post('/promote/user-to-officer', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô User ‚Üí Officer')
      
      if (!body.email) {
        set.status = 400
        return { 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' 
        }
      }
      
      // Simple promotion logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà role-transfer function
      const user = await prisma.users.findUnique({
        where: { email: body.email }
      })
      
      if (!user) {
        set.status = 404
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö user: ${body.email}`
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingOfficer = await prisma.officer.findUnique({
        where: { email: body.email }
      })
      
      if (existingOfficer) {
        set.status = 409
        return {
          success: false,
          message: `‡∏°‡∏µ officer ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}`
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á officer ‡πÉ‡∏´‡∏°‡πà
      await prisma.officer.create({
        data: {
          role_id: 2, // officer role
          first_name: user.first_name,
          last_name: user.last_name,
          email: user.email,
          password: user.password,
          citizen_id: user.citizen_id,
          position: user.position,
          department: user.department,
          zip_code: user.zip_code
        }
      })
      
      // ‡∏•‡∏ö user ‡πÄ‡∏î‡∏¥‡∏°
      await prisma.users.delete({
        where: { email: body.email }
      })
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' 
      }
    }
  })
  
  // ============================
  // üëÜ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin
  // ============================
  .post('/promote/officer-to-admin', async ({ request, body, set }) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå admin
    const user = await authMiddleware(request, set)
    if (user.success === false) return user
    
    if (!isAdmin(user)) {
      set.status = 403
      return {
        success: false,
        message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      }
    }

    try {
      console.log('üëÜ Admin: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Officer ‚Üí Admin')
      
      if (!body.email) {
        set.status = 400
        return { 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' 
        }
      }
      
      // Simple promotion logic - ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà role-transfer function  
      const officer = await prisma.officer.findUnique({
        where: { email: body.email }
      })
      
      if (!officer) {
        set.status = 404
        return {
          success: false,
          message: `‡πÑ‡∏°‡πà‡∏û‡∏ö officer: ${body.email}`
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingAdmin = await prisma.admin.findUnique({
        where: { email: body.email }
      })
      
      if (existingAdmin) {
        set.status = 409
        return {
          success: false,
          message: `‡∏°‡∏µ admin ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${body.email}`
        }
      }
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin ‡πÉ‡∏´‡∏°‡πà
      await prisma.admin.create({
        data: {
          role_id: 1, // admin role
          first_name: officer.first_name,
          last_name: officer.last_name,
          email: officer.email,
          password: officer.password,
          citizen_id: officer.citizen_id,
          position: officer.position,
          department: officer.department,
          zip_code: officer.zip_code
        }
      })
      
      // ‡∏•‡∏ö officer ‡πÄ‡∏î‡∏¥‡∏°
      await prisma.officer.delete({
        where: { email: body.email }
      })
      
      return {
        success: true,
        message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${body.email} ‡πÄ‡∏õ‡πá‡∏ô Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
      }
      
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
      set.status = 500
      return { 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role' 
      }
    }
  })

export default adminRoutes
