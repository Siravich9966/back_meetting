// ===================================================================
// JWT Authentication Middleware
// ===================================================================
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Database
// ===================================================================

import jwt from 'jsonwebtoken'
import prisma from '../lib/prisma.js'
import { getDepartmentFromPosition } from '../utils/positions.js'

// JWT Authentication Middleware
export const authMiddleware = async (request, set) => {
  // ‡πÅ‡∏õ‡∏•‡∏á Headers object ‡πÄ‡∏õ‡πá‡∏ô plain object ‡∏ú‡πà‡∏≤‡∏ô JSON
  const headersString = JSON.stringify(request.headers)
  const headersObj = JSON.parse(headersString)
  const authHeader = headersObj.authorization

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    set.status = 401
    return { success: false, message: '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô' }
  }

  try {
    // ‡πÅ‡∏¢‡∏Å token
    const token = authHeader.substring(7)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
    const decoded = jwt.verify(token, process.env.JWT_SECRET)

    // Log token verification details
    const timeLeft = decoded.exp * 1000 - Date.now()
    const minutesLeft = Math.round(timeLeft / (1000 * 60))
    console.log(`üîç Token Verification - Role: ${decoded.role}, Time left: ${minutesLeft} minutes`)

    if (timeLeft <= 0) {
      console.log('‚è∞ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß')
      set.status = 401
      return {
        success: false,
        message: 'Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
        expired: true
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å table ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô token
    let user = null
    const userTable = decoded.userTable // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å token

    // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° token
    if (userTable === 'users') {
      user = await prisma.users.findUnique({
        where: { user_id: decoded.userId },
        select: {
          user_id: true,
          email: true,
          first_name: true,
          last_name: true,
          citizen_id: true,
          position: true,
          department: true,
          zip_code: true,
          // üî• ‡∏•‡∏ö profile_image: true ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
          created_at: true,
          updated_at: true,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address
          province_id: true,
          district_id: true,
          subdistrict_id: true,
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      // üî• ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á profile_image ‡πÉ‡∏ô JWT response - ‡πÉ‡∏´‡πâ frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
      // if (user) {
      //   user.profile_image = `/api/upload/profile-image/${user.user_id}`
      // }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
      if (user && (user.province_id || user.district_id || user.subdistrict_id)) {
        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
        if (user.province_id) {
          const province = await prisma.province.findUnique({
            where: { province_id: user.province_id },
            select: { province_name: true }
          })
          user.province_name = province?.province_name || null
        }

        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
        if (user.district_id) {
          const district = await prisma.district.findUnique({
            where: { district_id: user.district_id },
            select: { district_name: true }
          })
          user.district_name = district?.district_name || null
        }

        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•
        if (user.subdistrict_id) {
          const subdistrict = await prisma.subdistrict.findUnique({
            where: { subdistrict_id: user.subdistrict_id },
            select: { subdistrict_name: true }
          })
          user.subdistrict_name = subdistrict?.subdistrict_name || null
        }
      }
    } else if (userTable === 'officer') {
      user = await prisma.officer.findUnique({
        where: { officer_id: decoded.userId },
        select: {
          officer_id: true,
          email: true,
          first_name: true,
          last_name: true,
          citizen_id: true,
          position: true,
          department: true,
          zip_code: true,
          // üî• ‡∏•‡∏ö profile_image: true ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
          created_at: true,
          updated_at: true,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address
          province_id: true,
          district_id: true,
          subdistrict_id: true,
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      if (user) {
        console.log(`üîç [JWT] Found officer: officer_id=${user.officer_id}, email=${user.email}`)
        
        // üî• ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á profile_image ‡πÉ‡∏ô JWT response - ‡πÉ‡∏´‡πâ frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
        // user.profile_image = `/api/upload/profile-image/${user.officer_id}`
        
        // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô officer_id ‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
        if (user.province_id || user.district_id || user.subdistrict_id) {
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
          if (user.province_id) {
            const province = await prisma.province.findUnique({
              where: { province_id: user.province_id },
              select: { province_name: true }
            })
            user.province_name = province?.province_name || null
          }

          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
          if (user.district_id) {
            const district = await prisma.district.findUnique({
              where: { district_id: user.district_id },
              select: { district_name: true }
            })
            user.district_name = district?.district_name || null
          }

          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•
          if (user.subdistrict_id) {
            const subdistrict = await prisma.subdistrict.findUnique({
              where: { subdistrict_id: user.subdistrict_id },
              select: { subdistrict_name: true }
            })
            user.subdistrict_name = subdistrict?.subdistrict_name || null
          }
        }
      }
    } else if (userTable === 'admin') {
      user = await prisma.admin.findUnique({
        where: { admin_id: decoded.userId },
        select: {
          admin_id: true,
          email: true,
          first_name: true,
          last_name: true,
          citizen_id: true,
          position: true,
          department: true,
          zip_code: true,
          // üî• ‡∏•‡∏ö profile_image: true ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
          created_at: true,
          updated_at: true,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address
          province_id: true,
          district_id: true,
          subdistrict_id: true,
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      if (user) {
        console.log(`üîç [JWT] Found admin: admin_id=${user.admin_id}, email=${user.email}`)
        
        // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° profile_image ‡πÄ‡∏õ‡πá‡∏ô path ‡πÅ‡∏ó‡∏ô binary
        // üî• ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á profile_image ‡πÉ‡∏ô JWT response - ‡πÉ‡∏´‡πâ frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
        // user.profile_image = `/api/upload/profile-image/${user.admin_id}`
        
        // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô admin_id ‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
        if (user.province_id || user.district_id || user.subdistrict_id) {
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
          if (user.province_id) {
            const province = await prisma.province.findUnique({
              where: { province_id: user.province_id },
              select: { province_name: true }
            })
            user.province_name = province?.province_name || null
          }
          
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
          if (user.district_id) {
            const district = await prisma.district.findUnique({
              where: { district_id: user.district_id },
              select: { district_name: true }
            })
            user.district_name = district?.district_name || null
          }
          
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•
          if (user.subdistrict_id) {
            const subdistrict = await prisma.subdistrict.findUnique({
              where: { subdistrict_id: user.subdistrict_id },
              select: { subdistrict_name: true }
            })
            user.subdistrict_name = subdistrict?.subdistrict_name || null
          }
        }
      }
    } else if (userTable === 'executive') {
      user = await prisma.executive.findUnique({
        where: { executive_id: decoded.userId },
        select: {
          executive_id: true,
          email: true,
          first_name: true,
          last_name: true,
          citizen_id: true,
          position: true,
          department: true,
          zip_code: true,
          // üî• ‡∏•‡∏ö profile_image: true ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
          created_at: true,
          updated_at: true,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address
          province_id: true,
          district_id: true,
          subdistrict_id: true,
          roles: {
            select: {
              role_name: true
            }
          }
        }
      })

      if (user) {
        console.log(`üîç [JWT] Found executive: executive_id=${user.executive_id}, email=${user.email}`)
        
        // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏° profile_image ‡πÄ‡∏õ‡πá‡∏ô path ‡πÅ‡∏ó‡∏ô binary
        // üî• ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á profile_image ‡πÉ‡∏ô JWT response - ‡πÉ‡∏´‡πâ frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
        // user.profile_image = `/api/upload/profile-image/${user.executive_id}`
        
        // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô executive_id ‡πÄ‡∏õ‡πá‡∏ô user_id ‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
        
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• address ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
        if (user.province_id || user.district_id || user.subdistrict_id) {
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
          if (user.province_id) {
            const province = await prisma.province.findUnique({
              where: { province_id: user.province_id },
              select: { province_name: true }
            })
            user.province_name = province?.province_name || null
          }
          
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
          if (user.district_id) {
            const district = await prisma.district.findUnique({
              where: { district_id: user.district_id },
              select: { district_name: true }
            })
            user.district_name = district?.district_name || null
          }
          
          // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•
          if (user.subdistrict_id) {
            const subdistrict = await prisma.subdistrict.findUnique({
              where: { subdistrict_id: user.subdistrict_id },
              select: { subdistrict_name: true }
            })
            user.subdistrict_name = subdistrict?.subdistrict_name || null
          }
        }
      }
    }

    if (!user) {
      set.status = 401
      return { success: false, message: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô user object
    const userWithRole = {
      ...user,
      role: decoded.role || user.roles?.role_name || 'user', // ‡πÉ‡∏ä‡πâ role ‡∏à‡∏≤‡∏Å token ‡∏Å‡πà‡∏≠‡∏ô
      userTable: userTable // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å table ‡πÑ‡∏´‡∏ô
    }

    // ‚ö†Ô∏è SECURITY: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Officer ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° position_department ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    if (userTable === 'officer' && user.position) {
      const positionDepartment = getDepartmentFromPosition(user.position)
      userWithRole.position_department = positionDepartment
      
      console.log(`üîê [SECURITY] Officer position-based department:`, {
        officer_id: user.officer_id,
        current_department: user.department,
        position: user.position,
        position_department: positionDepartment
      })
    }

    // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á ID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ role ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà ID ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (userTable === 'users') {
      delete userWithRole.officer_id
      delete userWithRole.admin_id  
      delete userWithRole.executive_id
    } else if (userTable === 'officer') {
      delete userWithRole.user_id
      delete userWithRole.admin_id
      delete userWithRole.executive_id
    } else if (userTable === 'admin') {
      delete userWithRole.user_id
      delete userWithRole.officer_id
      delete userWithRole.executive_id
    } else if (userTable === 'executive') {
      delete userWithRole.user_id
      delete userWithRole.officer_id
      delete userWithRole.admin_id
    }

    // ‡πÅ‡∏õ‡∏•‡∏á profile_image binary data ‡πÄ‡∏õ‡πá‡∏ô URL
    if (userWithRole.profile_image) {
      const userId = userWithRole.user_id || userWithRole.officer_id || userWithRole.admin_id || userWithRole.executive_id
      const role = decoded.role || 'user' // ‡πÉ‡∏ä‡πâ role ‡∏à‡∏≤‡∏Å token
      userWithRole.profile_image = `/api/upload/profile-image/${userId}/${role}`
      console.log(`üñºÔ∏è [JWT] Set profile_image URL for ${userTable} ID ${userId}: ${userWithRole.profile_image}`)
    }

    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ user ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return userWithRole

  } catch (error) {
    console.log('‚ùå JWT Error:', error.name, error.message)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    if (error.name === 'TokenExpiredError') {
      set.status = 401
      return {
        success: false,
        message: 'Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß',
        expired: true
      }
    } else if (error.name === 'JsonWebTokenError') {
      set.status = 401
      return {
        success: false,
        message: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        invalid: true
      }
    } else if (error.name === 'NotBeforeError') {
      set.status = 401
      return {
        success: false,
        message: 'Token ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
        notActive: true
      }
    }

    // ‡∏Å‡∏£‡∏ì‡∏µ error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    set.status = 401
    return { success: false, message: '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' }
  }
}
