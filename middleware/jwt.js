// ===================================================================
// JWT Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Elysia Framework
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token ‡πÅ‡∏•‡∏∞ Role-based Access:
// 
// Functions:
// - verifyToken()     - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token ‡∏î‡πâ‡∏ß‡∏¢ jsonwebtoken
// - jwtMiddleware     - Elysia middleware ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á token ‡πÄ‡∏õ‡πá‡∏ô user data
// - authenticate      - ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login (‡∏°‡∏µ user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
// - restrictTo()      - ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ role ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
// 
// Exports:
// - requireAuth       - ‡∏ï‡πâ‡∏≠‡∏á login (user, officer, admin ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
// - requireOfficer    - ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà + admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// - requireAdmin      - admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
// - requireUser       - user + officer + admin (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
// ===================================================================

import { Elysia } from 'elysia'
import { PrismaClient } from '@prisma/client'

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Prisma client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö middleware
const prisma = new PrismaClient()

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
const verifyToken = async (token) => {
  try {
    const jwt = await import('jsonwebtoken')
    return jwt.verify(token, process.env.JWT_SECRET)
  } catch (error) {
    throw error
  }
}

// JWT Middleware ‡∏´‡∏•‡∏±‡∏Å
export const jwtMiddleware = new Elysia()
  .derive(async ({ headers }) => {
    console.log('üöÄ JWT Middleware started')
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Authorization header
    const authHeader = headers.authorization
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return { user: null }
    }

    try {
      // ‡πÅ‡∏¢‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
      const token = authHeader.substring(7)
      const decoded = await verifyToken(token)
      
      console.log('üîç Token decoded:', { userId: decoded.userId, email: decoded.email })

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const user = await prisma.users.findUnique({
        where: { user_id: decoded.userId },
        include: {
          roles: {
            select: {
              role_name: true,
              role_status: true
            }
          }
        }
      })

      if (!user) {
        console.log('‚ùå User not found')
        return { user: null }
      }

      if (user.roles?.role_status !== 'active') {
        console.log('‚ùå User role inactive')
        return { user: null }
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö routes
      const userData = {
        user_id: user.user_id,
        email: user.email,
        first_name: user.first_name,
        last_name: user.last_name,
        role_id: user.role_id,
        role_name: user.roles?.role_name,
        department: user.department
      }

      console.log('‚úÖ User authenticated:', userData.email)
      return { user: userData }

    } catch (error) {
      console.error('JWT Error:', error.message)
      return { user: null }
    }
  })

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á authentication
export const authenticate = new Elysia()
  .use(jwtMiddleware)
  .guard(
    {
      beforeHandle({ user, set }) {
        if (!user) {
          set.status = 401
          return { 
            success: false,
            error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' 
          }
        }
      }
    }
  )

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö role
export const restrictTo = (...allowedRoles) => {
  return new Elysia()
    .use(jwtMiddleware)
    .guard({
      beforeHandle({ user, set }) {
        if (!user) {
          set.status = 401
          return { 
            success: false,
            error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö' 
          }
        }
        
        if (!allowedRoles.includes(user.role_name)) {
          set.status = 403
          return { 
            success: false,
            error: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ' 
          }
        }
      }
    })
}

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
export const requireAuth = authenticate
export const requireAdmin = new Elysia().use(authenticate).use(restrictTo('admin'))
export const requireOfficer = new Elysia().use(authenticate).use(restrictTo('officer', 'admin'))
export const requireUser = new Elysia().use(authenticate).use(restrictTo('user', 'officer', 'admin'))
