// ===================================================================
// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Multi-day Booking Logic - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
// ===================================================================
// Test Case ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
// 1. ‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: 1-3 ‡πÄ‡∏ß‡∏•‡∏≤ 07:00-17:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1) ‡πÅ‡∏•‡∏∞ 07:00-12:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3)
// 2. ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢ 13:00-17:00 ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏î‡πâ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö)
// 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô

import prisma from './lib/prisma.js'

console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Multi-day Booking Logic\n')

async function testMultiDayLogic() {
  try {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    await prisma.reservation.deleteMany({
      where: {
        details_r: { contains: 'TEST_MULTIDAY' }
      }
    })
    console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡πà‡∏≤\n')

    // ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const room = await prisma.meeting_room.findFirst()
    if (!room) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö')
      return
    }

    // ‡∏î‡∏∂‡∏á user ‡πÅ‡∏£‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const user = await prisma.users.findFirst({
      where: { role: 'user' }
    })
    if (!user) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö')
      return
    }

    console.log(`üìç ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á: ${room.room_name} (ID: ${room.room_id})`)
    console.log(`üë§ ‡πÉ‡∏ä‡πâ user: ${user.first_name} ${user.last_name}\n`)

    // ===================================================================
    // Test Case 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (1-3 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2025)
    // ===================================================================
    console.log('üìÖ Test Case 1: ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô')
    
    const multiDayReservation = await prisma.reservation.create({
      data: {
        user_id: user.user_id,
        room_id: room.room_id,
        start_at: new Date('2025-01-01'), // 1 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°
        end_at: new Date('2025-01-03'),   // 3 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°
        start_time: new Date('2025-01-01T07:00:00'), // 07:00 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
        end_time: new Date('2025-01-03T12:00:00'),   // 12:00 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3
        details_r: 'TEST_MULTIDAY - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô',
        status_r: 'approved'
      }
    })

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: ${multiDayReservation.reservation_id}`)
    console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 1-3 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2025`)
    console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: 07:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1) ‡∏ñ‡∏∂‡∏á 12:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3)\n`)

    // ===================================================================
    // Test Case 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢ (‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏î‡πâ)
    // ===================================================================
    console.log('üìÖ Test Case 2: ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 3 ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢ (13:00-17:00)')
    console.log('   ‚ùì ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö 07:00-12:00\n')

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const startDate = new Date('2025-01-03') // 3 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°
    const endDate = new Date('2025-01-03')   // ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const startTime = new Date('2025-01-03T13:00:00') // 13:00
    const endTime = new Date('2025-01-03T17:00:00')   // 17:00

    // Query ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô API
    const conflictReservations = await prisma.reservation.findMany({
      where: {
        room_id: room.room_id,
        status_r: {
          in: ['pending', 'approved']
        },
        AND: [
          { start_at: { lt: endDate } },   // startExisting < endNew
          { end_at: { gt: startDate } }    // endExisting > startNew
        ]
      }
    })

    console.log(`üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö: ${conflictReservations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    
    conflictReservations.forEach((existing, index) => {
      console.log(`   ${index + 1}. ID: ${existing.reservation_id}`)
      console.log(`      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${existing.start_at.toISOString().split('T')[0]} ‡∏ñ‡∏∂‡∏á ${existing.end_at.toISOString().split('T')[0]}`)
      console.log(`      ‡πÄ‡∏ß‡∏•‡∏≤: ${existing.start_time.toTimeString().slice(0,5)} ‡∏ñ‡∏∂‡∏á ${existing.end_time.toTimeString().slice(0,5)}`)
    })

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const hasTimeConflict = conflictReservations.some(existing => {
      const existingStartDate = new Date(existing.start_at)
      const existingEndDate = new Date(existing.end_at)
      const existingStartTime = new Date(existing.start_time)
      const existingEndTime = new Date(existing.end_time)

      console.log(`\nüßÆ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö conflict ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID: ${existing.reservation_id}`)

      // Case 1: Multi-day booking 
      const isMultiDayNew = startDate.getTime() !== endDate.getTime()
      const isMultiDayExisting = existingStartDate.getTime() !== existingEndDate.getTime()

      console.log(`   üìä Multi-day check:`)
      console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô multi-day: ${isMultiDayNew}`)
      console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô multi-day: ${isMultiDayExisting}`)

      if (isMultiDayNew || isMultiDayExisting) {
        console.log(`   ‚ùå Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: Multi-day = conflict ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏ú‡∏¥‡∏î!)`)
        return true // ‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ!
      }

      // Case 2: Same-day booking
      const isSameDay = (
        startDate.getFullYear() === existingStartDate.getFullYear() &&
        startDate.getMonth() === existingStartDate.getMonth() &&
        startDate.getDate() === existingStartDate.getDate()
      )

      console.log(`   üìä Same-day check: ${isSameDay}`)

      if (isSameDay) {
        const newStartMinutes = startTime.getHours() * 60 + startTime.getMinutes()
        const newEndMinutes = endTime.getHours() * 60 + endTime.getMinutes()
        const existingStartMinutes = existingStartTime.getHours() * 60 + existingStartTime.getMinutes()
        const existingEndMinutes = existingEndTime.getHours() * 60 + existingEndTime.getMinutes()

        console.log(`   ‚è∞ Time comparison:`)
        console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: ${newStartMinutes} - ${newEndMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`)
        console.log(`      ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤: ${existingStartMinutes} - ${existingEndMinutes} ‡∏ô‡∏≤‡∏ó‡∏µ`)

        const timeOverlap = (newStartMinutes < existingEndMinutes) && (existingStartMinutes < newEndMinutes)
        console.log(`      Time overlap: ${timeOverlap}`)
        
        return timeOverlap
      }

      console.log(`   ‚úÖ Different days - no conflict`)
      return false
    })

    console.log(`\nüéØ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${hasTimeConflict ? 'CONFLICT ‚ùå' : 'NO CONFLICT ‚úÖ'}`)
    console.log(`   Expected: NO CONFLICT ‚úÖ (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ 13:00-17:00 ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ö 07:00-12:00)`)
    console.log(`   Actual: ${hasTimeConflict ? 'CONFLICT ‚ùå' : 'NO CONFLICT ‚úÖ'}`)

    if (hasTimeConflict) {
      console.log(`\nüêõ BUG CONFIRMED: Logic ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ú‡∏¥‡∏î!`)
      console.log(`   ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Multi-day booking ‡∏ñ‡∏π‡∏Å assume ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô`)
      console.log(`   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô multi-day`)
    } else {
      console.log(`\n‚úÖ Logic ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`)
    }

    // ===================================================================
    // Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    // ===================================================================
    console.log(`\nüìÖ Test Case 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`)
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: 30 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° - 2 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå
    const crossMonthReservation = await prisma.reservation.create({
      data: {
        user_id: user.user_id,
        room_id: room.room_id,
        start_at: new Date('2025-01-30'), // 30 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°
        end_at: new Date('2025-02-02'),   // 2 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå
        start_time: new Date('2025-01-30T09:00:00'), // 09:00 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 30
        end_time: new Date('2025-02-02T15:00:00'),   // 15:00 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2
        details_r: 'TEST_MULTIDAY - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        status_r: 'approved'
      }
    })

    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${crossMonthReservation.reservation_id}`)
    console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 30 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° - 2 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2025`)
    console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: 09:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 30) ‡∏ñ‡∏∂‡∏á 15:00 (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 2)`)

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô (‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
    console.log(`\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 16:00-18:00`)
    console.log(`   ‚ùì ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`)

    // Logic test ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    const crossMonthTestDate = new Date('2025-02-01')
    const crossMonthTestTime1 = new Date('2025-02-01T16:00:00')
    const crossMonthTestTime2 = new Date('2025-02-01T18:00:00')

    const crossMonthConflicts = await prisma.reservation.findMany({
      where: {
        room_id: room.room_id,
        status_r: { in: ['pending', 'approved'] },
        AND: [
          { start_at: { lt: crossMonthTestDate } },
          { end_at: { gt: crossMonthTestDate } }
        ]
      }
    })

    console.log(`   üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö: ${crossMonthConflicts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)
    console.log(`   üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞ reject ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà`)

    // ===================================================================
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    // ===================================================================
    await prisma.reservation.deleteMany({
      where: {
        details_r: { contains: 'TEST_MULTIDAY' }
      }
    })
    console.log(`\nüßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`)

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// ‡∏£‡∏±‡∏ô test
testMultiDayLogic()
