#!/usr/bin/env bun
// ===================================================================
// Fix Officer Department Mismatch
// ===================================================================
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ department ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö position_department
// ===================================================================

import { PrismaClient } from './generated/prisma/index.js'
import { getDepartmentFromPosition } from './utils/positions.js'

const prisma = new PrismaClient()

console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Officer Department Mismatch...\n')

try {
  // ‡∏î‡∏∂‡∏á Officer ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
  const officers = await prisma.officer.findMany({
    select: {
      officer_id: true,
      email: true,
      first_name: true,
      last_name: true,
      position: true,
      department: true
    }
  })

  console.log(`üìä ‡∏û‡∏ö Officer ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${officers.length} ‡∏Ñ‡∏ô\n`)

  let updatedCount = 0
  let checkedCount = 0

  for (const officer of officers) {
    if (!officer.position) {
      console.log(`‚ö†Ô∏è Officer ID ${officer.officer_id}: ‡πÑ‡∏°‡πà‡∏°‡∏µ position ‡∏Ç‡πâ‡∏≤‡∏°...`)
      continue
    }

    checkedCount++
    
    const positionDepartment = getDepartmentFromPosition(officer.position)
    
    console.log(`üîç Officer ID ${officer.officer_id} (${officer.first_name} ${officer.last_name}):`)
    console.log(`   ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: "${officer.position}"`)
    console.log(`   Department (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô): "${officer.department}"`)
    console.log(`   Position Department: "${positionDepartment}"`)
    
    if (officer.department !== positionDepartment) {
      console.log(`   üîß ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${officer.department} ‚Üí ${positionDepartment}`)
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï department ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö position
      const updated = await prisma.officer.update({
        where: {
          officer_id: officer.officer_id
        },
        data: {
          department: positionDepartment
        }
      })
      
      console.log(`   ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!`)
      updatedCount++
    } else {
      console.log(`   ‚úÖ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`)
    }
    
    console.log('')
  }

  console.log('=' .repeat(80))
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:')
  console.log('=' .repeat(80))
  console.log(`üë• Officer ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${checkedCount} ‡∏Ñ‡∏ô`)
  console.log(`üîß Officer ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: ${updatedCount} ‡∏Ñ‡∏ô`)
  console.log(`‚úÖ Officer ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${checkedCount - updatedCount} ‡∏Ñ‡∏ô`)
  
  if (updatedCount > 0) {
    console.log(`\nüéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ department ‡∏à‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö position ‡πÅ‡∏•‡πâ‡∏ß`)
  } else {
    console.log(`\n‚ú® ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤! Officer ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ department ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö position ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`)
  }

} catch (error) {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message)
  console.error(error.stack)
} finally {
  await prisma.$disconnect()
}