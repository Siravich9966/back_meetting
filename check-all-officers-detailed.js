#!/usr/bin/env bun
// ===================================================================
// Check All Officers - Detailed Analysis  
// ===================================================================
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Officer ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
// ===================================================================

import { PrismaClient } from './generated/prisma/index.js'
import { getDepartmentFromPosition } from './utils/positions.js'

const prisma = new PrismaClient()

console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Officer ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n')

try {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Officer ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const officers = await prisma.officer.findMany({
    select: {
      officer_id: true,
      email: true,
      first_name: true,
      last_name: true,
      position: true,
      department: true,
      role_id: true,
      created_at: true
    },
    orderBy: {
      officer_id: 'asc'
    }
  })

  console.log(`üìä ‡∏û‡∏ö Officer ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${officers.length} ‡∏Ñ‡∏ô\n`)
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö department
  const rooms = await prisma.meeting_room.findMany({
    select: {
      room_id: true,
      room_name: true,
      department: true
    }
  })

  console.log(`üè¢ ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${rooms.length} ‡∏´‡πâ‡∏≠‡∏á`)
  const uniqueDepartments = [...new Set(rooms.map(room => room.department))].sort()
  console.log(`üìã Department ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${uniqueDepartments.join(', ')}\n`)

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
  let activeOfficers = 0
  let hasRoomAccess = 0
  let noRoomAccess = 0
  
  console.log('=' .repeat(100))
  console.log('üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Officer ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô:')
  console.log('=' .repeat(100))

  for (const officer of officers) {
    activeOfficers++
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position_department ‡∏à‡∏≤‡∏Å position
    const positionDepartment = getDepartmentFromPosition(officer.position)
    
    // ‡∏´‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà officer ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
    const managableRooms = rooms.filter(room => room.department === positionDepartment)
    
    // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á
    const accessStatus = managableRooms.length > 0 ? '‚úÖ' : '‚ùå'
    if (managableRooms.length > 0) {
      hasRoomAccess++
    } else {
      noRoomAccess++
    }
    
    console.log(`üë§ Officer ID: ${officer.officer_id}`)
    console.log(`   üìß Email: ${officer.email}`)
    console.log(`   üë®‚Äçüíº ‡∏ä‡∏∑‡πà‡∏≠: ${officer.first_name} ${officer.last_name}`)
    console.log(`   üèõÔ∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: "${officer.position}"`)
    console.log(`   üè¢ Department (DB): "${officer.department || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}"`)
    console.log(`   üéØ Position Department: "${positionDepartment || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ'}"`)
    console.log(`   üë• Role ID: ${officer.role_id}`)
    console.log(`   ${accessStatus} ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á: ${managableRooms.length} ‡∏´‡πâ‡∏≠‡∏á`)
    
    if (managableRooms.length > 0) {
      console.log(`   üìç ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ:`)
      managableRooms.forEach(room => {
        console.log(`      - ${room.room_name} (ID: ${room.room_id})`)
      })
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const issues = []
    
    if (!positionDepartment) {
      issues.push('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position_department ‡πÑ‡∏î‡πâ')
    }
    
    if (officer.department !== positionDepartment && positionDepartment) {
      issues.push(`‚ö†Ô∏è department (${officer.department}) ‚â† position_department (${positionDepartment})`)
    }
    
    if (managableRooms.length === 0 && positionDepartment) {
      issues.push(`‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô department "${positionDepartment}"`)
    }
    
    if (issues.length > 0) {
      console.log(`   üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:`)
      issues.forEach(issue => console.log(`      ${issue}`))
    }
    
    console.log(`   üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(officer.created_at).toLocaleString('th-TH')}`)
    console.log('-'.repeat(80))
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  console.log('\n' + '=' .repeat(100))
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:')
  console.log('=' .repeat(100))
  console.log(`üë• Officer ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${officers.length} ‡∏Ñ‡∏ô`)
  console.log(`‚úÖ Officer ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${activeOfficers} ‡∏Ñ‡∏ô`)
  console.log(`üè¢ Officer ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á: ${hasRoomAccess} ‡∏Ñ‡∏ô`)
  console.log(`üö´ Officer ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á: ${noRoomAccess} ‡∏Ñ‡∏ô`)
  
  // ‡πÅ‡∏™‡∏î‡∏á Department ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ Officer
  const officerDepartments = [...new Set(officers
    .filter(o => o.position)
    .map(o => getDepartmentFromPosition(o.position))
    .filter(Boolean)
  )].sort()
  
  console.log(`\nüìã Department ‡∏ó‡∏µ‡πà‡∏°‡∏µ Officer: ${officerDepartments.join(', ')}`)
  console.log(`üè¢ Department ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${uniqueDepartments.join(', ')}`)
  
  // ‡∏´‡∏≤ Department ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
  const missingRoomDepts = officerDepartments.filter(dept => !uniqueDepartments.includes(dept))
  const missingOfficerDepts = uniqueDepartments.filter(dept => !officerDepartments.includes(dept))
  
  if (missingRoomDepts.length > 0) {
    console.log(`\n‚ö†Ô∏è Department ‡∏ó‡∏µ‡πà‡∏°‡∏µ Officer ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á: ${missingRoomDepts.join(', ')}`)
  }
  
  if (missingOfficerDepts.length > 0) {
    console.log(`\n‚ö†Ô∏è Department ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Officer: ${missingOfficerDepts.join(', ')}`)
  }

} catch (error) {
  console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message)
  console.error(error.stack)
} finally {
  await prisma.$disconnect()
}