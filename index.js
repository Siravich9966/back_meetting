// ===================================================================
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° - Main Backend Server
// ===================================================================
// ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Backend API Server ‡πÉ‡∏ä‡πâ:
// - Bun Runtime + Elysia Framework
// - PostgreSQL Database ‡∏ú‡πà‡∏≤‡∏ô Prisma ORM
// - JWT Authentication with Role-based Access
// 
// API Routes:
// - /api/auth/*      - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å/‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (routes/auth.js)
// - /api/protected/* - APIs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á authentication (routes/protected.js)
// ===================================================================

import { Elysia } from 'elysia'
import { cors } from '@elysiajs/cors'
import { staticPlugin } from '@elysiajs/static'
import 'dotenv/config'
import prisma from './lib/prisma.js'  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database connection test

// ===== Import API Routes =====
import { authRoutes } from './routes/auth.js'        // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å/‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
import { protectedRoutes, officerRoutes, adminAreaRoutes } from './routes/protected.js' // APIs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á authentication
import { roomRoutes, officerRoomRoutes } from './routes/rooms.js' // APIs ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
import { adminRoutes } from './routes/admin.js' // Admin APIs (3-table system)
import executiveRoutes from './routes/executive.js' // Executive APIs
import { departmentRoutes } from './routes/departments.js' // Department APIs
import positionRoutes from './routes/positions.js' // Position APIs
import { reservationRoutes, userReservationRoutes, officerReservationRoutes } from './routes/reservations.js' // Reservation APIs

// Configuration
const PORT = process.env.PORT || 8000

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Elysia app
const app = new Elysia()

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS
app.use(cors({
  origin: '*', // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization'],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
}))

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ static file serving ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
app.use(staticPlugin({
  assets: 'uploads',
  prefix: '/uploads'
}))

// Global Error Handler (‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
app.onError(({ code, error, set }) => {
  console.error('API Error:', error)
  
  if (code === 'NOT_FOUND') {
    set.status = 404
    return { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£' }
  }
  
  set.status = 500
  return { error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' }
})

// Routes ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
app.get('/', () => {
  return { 
    message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° API',
    status: 'running',
    timestamp: new Date().toISOString()
  }
})

// Health check endpoint
app.get('/health', async () => {
  let databaseStatus = 'disconnected'
  let databaseInfo = null
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query ‡πÄ‡∏ö‡∏≤‡πÜ
    await prisma.$queryRaw`SELECT 1`
    databaseStatus = 'connected'
    
    // ‡∏•‡∏≠‡∏á‡∏ô‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏≤‡πÜ
    const roomCount = await prisma.meeting_room.count()
    databaseInfo = { tables_accessible: true, room_count: roomCount }
  } catch (error) {
    databaseStatus = 'error'
    databaseInfo = { error: error.message }
  }
  
  return { 
    status: 'healthy',
    database: databaseStatus,
    database_info: databaseInfo,
    server_time: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  }
})

// API Routes
app.group('/api', app => app
  .get('/test', () => ({ message: 'API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!' }))
  // Simple database test (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication)
  .get('/test-db', async () => {
    try {
      const roomCount = await prisma.meeting_room.count()
      const reservationCount = await prisma.reservation.count()
      const userCount = await prisma.users.count()
      
      return {
        success: true,
        message: 'Database ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!',
        data: {
          rooms: roomCount,
          reservations: reservationCount,
          users: userCount
        }
      }
    } catch (error) {
      console.error('Database test error:', error)
      return {
        success: false,
        message: 'Database ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        error: error.message
      }
    }
  })
  .use(authRoutes) // Authentication APIs: /api/auth/register, /api/auth/login
  .use(roomRoutes) // Room APIs: /api/rooms/*
  .use(positionRoutes) // Position APIs: /api/positions/*
  .use(departmentRoutes) // Department APIs: /api/departments/*
  .use(reservationRoutes) // Reservation APIs: /api/reservations/*
  .use(protectedRoutes) // Protected APIs: /api/protected/*
  .use(userReservationRoutes) // User Reservation APIs: /api/protected/reservations/*
  .use(officerRoutes) // Officer APIs: /api/protected/officer/*
  .use(officerReservationRoutes) // Officer Reservation APIs: /api/protected/officer/reservations/*
  .use(adminAreaRoutes) // Admin Area API: /api/protected/admin/area
  .use(officerRoomRoutes) // Officer Room Management APIs: /api/protected/officer/rooms/*
  .use(adminRoutes) // Admin Role Management APIs (3-table): /api/protected/admin/*
  .use(executiveRoutes) // Executive APIs: /api/protected/executive/*
)

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
async function startServer() {
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
    await prisma.$connect()
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message)
    console.log('üìù ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)')
  }
  
  console.log(`üöÄ Server ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port ${PORT}`)
  console.log(`üìö API Docs: http://localhost:${PORT}`)
  console.log(`üîç Health Check: http://localhost:${PORT}/health`)
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∞‡∏≠‡∏≤‡∏î
process.on('SIGINT', async () => {
  console.log('üõë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö...')
  try {
    await prisma.$disconnect()
    console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
  } catch (error) {
    console.log('‚ö†Ô∏è ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
  }
  console.log('‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
  process.exit(0)
})

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
startServer()

// ‡πÄ‡∏£‡∏¥‡πà‡∏° Elysia server ‡∏õ‡∏Å‡∏ï‡∏¥
app.listen(PORT)

export default app
