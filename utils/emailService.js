// ===================================================================
// Email Service - ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
// ===================================================================

import nodemailer from 'nodemailer'
import prisma from '../lib/prisma.js'
import {
  createEmailTemplate,
  createAlertBox,
  createDetailsBox,
  createButtonGroup,
  emailStyles,
  emailColors
} from './emailTemplateStyles.js'

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Gmail transporter (singleton pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
let transporter = null
const createTransporter = () => {
  if (!transporter) {
    console.log('üîß [EMAIL] Creating new Gmail transporter...')
    console.log(`üìß [EMAIL] Gmail User: ${process.env.GMAIL_USER}`)
    console.log(`üîë [EMAIL] App Password exists: ${process.env.GMAIL_APP_PASSWORD ? 'YES' : 'NO'}`)
    
    transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER,
        pass: process.env.GMAIL_APP_PASSWORD
      },
      pool: true, // ‡πÉ‡∏ä‡πâ connection pool
      maxConnections: 5, // ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 connections ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      maxMessages: 100, // ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πà‡∏≠ connection
      tls: {
        rejectUnauthorized: false // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï self-signed certificates
      },
      debug: false, // ‡∏õ‡∏¥‡∏î debug mode - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ logs ‡∏¢‡∏≤‡∏ß‡πÜ
      logger: false // ‡∏õ‡∏¥‡∏î logging - ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SMTP details
    })
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡πÉ‡∏´‡∏°‡πà
    transporter.verify((error, success) => {
      if (error) {
        console.error('‚ùå [EMAIL] Gmail connection failed:', error.message)
      } else {
        console.log('‚úÖ [EMAIL] Gmail connection verified successfully')
      }
    })
  }
  return transporter
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (‡∏à‡∏≥‡∏Å‡∏±‡∏î 450/‡∏ß‡∏±‡∏ô)
const checkEmailQuota = async () => {
  try {
    const today = new Date().toISOString().split('T')[0]
    const emailLogs = await prisma.email_log.findMany({
      where: {
        sent_date: {
          gte: new Date(today),
          lt: new Date(new Date(today).getTime() + 24 * 60 * 60 * 1000)
        }
      }
    })

    const sentToday = emailLogs.length
    const maxPerDay = 450

    console.log(`üìß [EMAIL-QUOTA] ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ: ${sentToday}/${maxPerDay} ‡∏≠‡∏µ‡πÄ‡∏°‡∏•`)
    return sentToday < maxPerDay
  } catch (error) {
    console.error('‚ùå [EMAIL-QUOTA] Error:', error)
    return false
  }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const logEmailSent = async (to, subject, type = 'notification') => {
  try {
    await prisma.email_log.create({
      data: {
        recipient: to,
        subject: subject,
        email_type: type,
        sent_date: new Date(),
        status: 'sent'
      }
    })
  } catch (error) {
    console.error('‚ùå [EMAIL-LOG] Error:', error)
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
const sendEmail = async (to, subject, html, text = '') => {
  try {
    console.log(`üìß [SEND-EMAIL] Preparing to send email to: ${to}`)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤
    const canSend = await checkEmailQuota()
    if (!canSend) {
      throw new Error('‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô (450 ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)')
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter
    let emailTransporter = createTransporter()

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const mailOptions = {
      from: {
        name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° - ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°',
        address: process.env.GMAIL_USER
      },
      to: to,
      subject: subject,
      html: html,
      text: text || subject // ‡πÉ‡∏ä‡πâ subject ‡πÄ‡∏õ‡πá‡∏ô text fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ text
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏° retry mechanism
    let info
    let retryCount = 0
    const maxRetries = 3
    
    while (retryCount < maxRetries) {
      try {
        console.log(`üìß [SEND-EMAIL] Attempt ${retryCount + 1}/${maxRetries} to send email to: ${to}`)
        info = await emailTransporter.sendMail(mailOptions)
        console.log(`‚úÖ [SEND-EMAIL] Email sent successfully to: ${to}`)
        console.log(`üìã [SEND-EMAIL] Message ID: ${info.messageId}`)
        break // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
      } catch (emailError) {
        retryCount++
        console.error(`‚ùå [SEND-EMAIL] Attempt ${retryCount} failed:`, emailError.message)
        
        if (retryCount >= maxRetries) {
          throw emailError // ‡∏Ñ‡∏£‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ throw error
        }
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô retry (exponential backoff)
        await new Promise(resolve => setTimeout(resolve, 1000 * retryCount))
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö retry
        transporter = null // reset global transporter
        emailTransporter = createTransporter() // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    try {
      await logEmailSent(to, subject, 'approval')
    } catch (logError) {
      console.error('‚ùå [SEND-EMAIL] Failed to log email:', logError.message)
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà fail ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ log
    }

    return {
      success: true,
      messageId: info.messageId
    }

  } catch (error) {
    console.error(`‚ùå [SEND-EMAIL] Failed to send email to: ${to}`, error.message)
    console.error(`‚ùå [SEND-EMAIL] Error details:`, error)
    
    // Return error info ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    return {
      success: false,
      error: error.message,
      details: error.code || 'UNKNOWN_ERROR'
    }
  }
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
const formatReservationDates = (reservation) => {
  console.log('üîç Full Reservation data:', JSON.stringify(reservation, null, 2))

  const allDates = []

  // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å field ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  if (reservation.booking_dates && Array.isArray(reservation.booking_dates) && reservation.booking_dates.length > 0) {
    console.log('üìÖ Found booking_dates array:', reservation.booking_dates)
    reservation.booking_dates.forEach(dateStr => {
      const date = new Date(dateStr)
      allDates.push(date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      }))
    })
  } else if (typeof reservation.booking_dates === 'string' && reservation.booking_dates.trim() !== '') {
    console.log('üìÖ Found booking_dates string:', reservation.booking_dates)
    const dateStrings = reservation.booking_dates.split(',').map(d => d.trim())
    dateStrings.forEach(dateStr => {
      const date = new Date(dateStr)
      allDates.push(date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      }))
    })
  } else {
    console.log('üìÖ Using single date from start_at:', reservation.start_at)
    const date = new Date(reservation.start_at)
    allDates.push(date.toLocaleDateString('th-TH', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    }))
  }

  console.log('üìÖ Final dates array:', allDates)

  return allDates.length > 1
    ? `${allDates.join(', ')} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allDates.length} ‡∏ß‡∏±‡∏ô)`
    : allDates[0]
}

// Template ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà - ‡πÉ‡∏ä‡πâ Template System
const getNewReservationTemplate = (reservation, user) => {
  const dateDisplay = formatReservationDates(reservation)
  const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
  const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

  return `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f8f9fa;">
      <div style="background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
        
        <div style="text-align: center; margin-bottom: 20px;">
          <h1 style="color: black; margin: 0;">‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà</h1>
          <p style="color: black; margin: 3px 0 0 0;">‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</p>
        </div>

        <div style="background: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 15px 0; border-radius: 4px;">
          <p style="margin: 0; color: black; font-weight: bold;">‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
        </div>

        <div style="background: #f3f4f6; padding: 20px; border-radius: 6px; margin: 15px 0;">
          <h3 style="color: black; margin-top: 0; margin-bottom: 15px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
          
          <div style="display: flex; flex-wrap: wrap; gap: 15px;">
            <div style="flex: 1; min-width: 200px;">
              <p style="margin: 8px 0; color: black;"><strong>‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:</strong> ${reservation.meeting_room.room_name}</p>
              <p style="margin: 8px 0; color: black;"><strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> ${user.first_name} ${user.last_name}</p>
              <p style="margin: 8px 0; color: black;"><strong>‡∏Ñ‡∏ì‡∏∞:</strong> ${user.department}</p>
            </div>
            <div style="flex: 1; min-width: 200px;">
              <p style="margin: 8px 0; color: black;"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${dateDisplay}</p>
              <p style="margin: 8px 0; color: black;"><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${startTime} - ${endTime}</p>
              <p style="margin: 8px 0; color: black;"><strong>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:</strong> ${reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
            </div>
          </div>
        </div>

    
        <div style="text-align: center; margin: 20px 0;">
          <a href="${process.env.FRONTEND_URL}/dashboard/officer/approvals" 
             style="background: #10b981; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: bold;">
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
          </a>
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid #e5e7eb;">
          <p style="color: #6b7280; font-size: 12px; margin: 0; line-height: 1.4;">
            <strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</strong><br>
            ¬© 2025 Rajabhat Maha Sarakham University. All rights reserved.<br>
            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - ‡∏Åÿ±‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®
          </p>
        </div>

      </div>
    </div>
  `
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
const notifyOfficersNewReservation = async (reservationId) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ID: ${reservationId}`)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤
    if (!(await checkEmailQuota())) {
      console.log('‚ùå [EMAIL] ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ')
      return { success: false, reason: 'quota_exceeded' }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: {
        meeting_room: true,
        users: true
      }
    })

    if (!reservation) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á')
    }

    // ‡∏´‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ì‡∏∞)
    const allOfficers = await prisma.officer.findMany({
      where: {
        position: {
          contains: reservation.meeting_room.department
        }
      }
    })

    const officers = allOfficers.filter(officer => officer.email && officer.email.trim() !== '')

    if (officers.length === 0) {
      console.log(`‚ö†Ô∏è [EMAIL] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${reservation.meeting_room.department}`)
      return { success: false, reason: 'no_officers_email' }
    }

    const transporter = createTransporter()
    const subject = `üîî ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà - ${reservation.meeting_room.room_name}`
    const html = getNewReservationTemplate(reservation, reservation.users)

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡πÉ‡∏ä‡πâ Promise.all ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
    const emailPromises = officers.map(async (officer) => {
      try {
        await transporter.sendMail({
          from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
          to: officer.email,
          subject: subject,
          html: html
        })

        await logEmailSent(officer.email, subject, 'new_reservation')
        console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${officer.email}`)
        return { success: true, email: officer.email }
      } catch (error) {
        console.error(`‚ùå [EMAIL] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${officer.email}:`, error.message)
        return { success: false, email: officer.email, error: error.message }
      }
    })

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
    const results = await Promise.allSettled(emailPromises)
    const successCount = results.filter(result => 
      result.status === 'fulfilled' && result.value.success
    ).length

    return { success: true, sentTo: successCount, total: officers.length }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
const notifyUserReservationApproved = async (reservationId, officerId) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ID: ${reservationId}`)

    if (!(await checkEmailQuota())) {
      return { success: false, reason: 'quota_exceeded' }
    }

    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: { meeting_room: true, users: true }
    })

    const officer = await prisma.officer.findUnique({
      where: { officer_id: officerId }
    })

    if (!reservation?.users.email) {
      return { success: false, reason: 'no_user_email' }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const allDates = []
    if (reservation.booking_dates && Array.isArray(reservation.booking_dates) && reservation.booking_dates.length > 0) {
      reservation.booking_dates.forEach(dateStr => {
        const date = new Date(dateStr)
        allDates.push(date.toLocaleDateString('th-TH', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        }))
      })
    } else if (typeof reservation.booking_dates === 'string' && reservation.booking_dates.trim() !== '') {
      const dateStrings = reservation.booking_dates.split(',').map(d => d.trim())
      dateStrings.forEach(dateStr => {
        const date = new Date(dateStr)
        allDates.push(date.toLocaleDateString('th-TH', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        }))
      })
    } else {
      const date = new Date(reservation.start_at)
      allDates.push(date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      }))
    }

    const dateDisplay = allDates.length > 1
      ? `${allDates.join(', ')} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allDates.length} ‡∏ß‡∏±‡∏ô)`
      : allDates[0]

    const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

    const transporter = createTransporter()
    const subject = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ${reservation.meeting_room.room_name}`
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</title>
    </head>
    <body style="margin: 0; padding: 20px; font-family: system-ui, -apple-system, sans-serif; background-color: #f5f5f5; line-height: 1.5;">
      
      <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; padding: 20px;">
        
        <h2 style="margin: 0 0 20px 0; font-size: 18px; font-weight: 600; color: #333; text-align: center;">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</h2>
        
        <div style="background: #f8f8f8; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
          <h3 style="margin: 0 0 15px 0; font-size: 16px; color: #333;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h3>
          
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:</strong> ${reservation.meeting_room.room_name}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> ${reservation.users.first_name} ${reservation.users.last_name}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢:</strong> ${officer?.first_name || ''} ${officer?.last_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${dateDisplay}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${startTime} - ${endTime}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:</strong> ${reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
        </div>

        <div style="text-align: center; margin: 20px 0;">
          <a href="${process.env.FRONTEND_URL}/my-reservations" 
             style="display: inline-block; background: #5865f2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-size: 14px;">
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </a>
        </div>

        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;">
          <p style="color: #666; font-size: 12px; margin: 5px 0; line-height: 1.4;">
            <strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</strong><br>
            ¬© 2025 Rajabhat Maha Sarakham University. All rights reserved.<br>
            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®
          </p>  
        </div>

      </div>

    </body>
    </html>
    `

    await transporter.sendMail({
      from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
      to: reservation.users.email,
      subject: subject,
      html: html  
    })

    await logEmailSent(reservation.users.email, subject, 'reservation_approved')
    console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${reservation.users.email}`)

    return { success: true }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
const notifyUserReservationRejected = async (reservationId, officerId, reason = null) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ID: ${reservationId}`)

    if (!(await checkEmailQuota())) {
      return { success: false, reason: 'quota_exceeded' }
    }

    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: { meeting_room: true, users: true }
    })

    if (!reservation?.users.email) {
      return { success: false, reason: 'no_user_email' }
    }

    const officer = await prisma.officer.findUnique({
      where: { officer_id: officerId }
    })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const allDates = []
    if (reservation.booking_dates && Array.isArray(reservation.booking_dates) && reservation.booking_dates.length > 0) {
      reservation.booking_dates.forEach(dateStr => {
        const date = new Date(dateStr)
        allDates.push(date.toLocaleDateString('th-TH', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        }))
      })
    } else if (typeof reservation.booking_dates === 'string' && reservation.booking_dates.trim() !== '') {
      const dateStrings = reservation.booking_dates.split(',').map(d => d.trim())
      dateStrings.forEach(dateStr => {
        const date = new Date(dateStr)
        allDates.push(date.toLocaleDateString('th-TH', {
          day: 'numeric',
          month: 'short',
          year: 'numeric'
        }))
      })
    } else {
      const date = new Date(reservation.start_at)
      allDates.push(date.toLocaleDateString('th-TH', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      }))
    }

    const dateDisplay = allDates.length > 1
      ? `${allDates.join(', ')} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allDates.length} ‡∏ß‡∏±‡∏ô)`
      : allDates[0]

    const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

    const transporter = createTransporter()
    const subject = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ${reservation.meeting_room.room_name}`
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</title>
    </head>
    <body style="margin: 0; padding: 20px; font-family: system-ui, -apple-system, sans-serif; background-color: #f5f5f5; line-height: 1.5;">
      
      <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; padding: 20px;">
        
        <h2 style="margin: 0 0 20px 0; font-size: 18px; font-weight: 600; color: #333; text-align: center;">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h2>
        
        <div style="background: #f8f8f8; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
          <h3 style="margin: 0 0 15px 0; font-size: 16px; color: #333;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</h3>
          
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:</strong> ${reservation.meeting_room.room_name}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á:</strong> ${reservation.users.first_name} ${reservation.users.last_name}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏î‡∏¢:</strong> ${officer?.first_name || ''} ${officer?.last_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${dateDisplay}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡πÄ‡∏ß‡∏•‡∏≤:</strong> ${startTime} - ${endTime}</p>
          <p style="margin: 8px 0; color: #333; font-size: 14px;"><strong>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:</strong> ${reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
        </div>

        ${reason ? `
        <div style="background: #fef2f2; padding: 15px; border-radius: 6px; margin-bottom: 20px; border-left: 3px solid #ef4444;">
          <h3 style="margin: 0 0 10px 0; font-size: 16px; color: #333;">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò:</h3>
          <p style="margin: 0; color: #333; font-size: 14px;">${reason}</p>
        </div>
        ` : ''}

        <div style="text-align: center; margin: 20px 0;">
          <a href="${process.env.FRONTEND_URL}/my-reservations" 
             style="display: inline-block; background: #5865f2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; font-size: 14px;">
            ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </a>
        </div>

        <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center;">
          <p style="color: #666; font-size: 12px; margin: 5px 0; line-height: 1.4;">
            <strong>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏£‡∏≤‡∏ä‡∏†‡∏±‡∏è‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°</strong><br>
            ¬© 2025 Rajabhat Maha Sarakham University. All rights reserved.<br>
            ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö<br>
            ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®
          </p>
        </div>

      </div>

    </body>
    </html>
    `

    await transporter.sendMail({
      from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
      to: reservation.users.email,
      subject: subject,
      html: html
    })

    await logEmailSent(reservation.users.email, subject, 'reservation_rejected')
    console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${reservation.users.email}`)

    return { success: true }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

export {
  sendEmail,
  notifyOfficersNewReservation,
  notifyUserReservationApproved,
  notifyUserReservationRejected,
  checkEmailQuota
}
