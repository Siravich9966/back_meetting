// ===================================================================
// Email Service V2 - ‡πÉ‡∏ä‡πâ Template System
// ===================================================================

import nodemailer from 'nodemailer'
import prisma from '../lib/prisma.js'
import { 
  createEmailTemplate, 
  createAlertBox, 
  createDetailsBox, 
  createButtonGroup,
  emailStyles,
  emailColors 
} from './emailTemplateStyles.js'

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Gmail transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_APP_PASSWORD
    }
  })
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
const checkEmailQuota = async () => {
  try {
    const today = new Date().toISOString().split('T')[0]
    const emailLogs = await prisma.email_log.findMany({
      where: {
        sent_date: {
          gte: new Date(today),
          lt: new Date(new Date(today).getTime() + 24 * 60 * 60 * 1000)
        }
      }
    })
    
    const sentToday = emailLogs.length
    const maxPerDay = 450
    
    console.log(`üìß [EMAIL-QUOTA] ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ: ${sentToday}/${maxPerDay} ‡∏≠‡∏µ‡πÄ‡∏°‡∏•`)
    return sentToday < maxPerDay
  } catch (error) {
    console.error('‚ùå [EMAIL-QUOTA] Error:', error)
    return false
  }
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const logEmailSent = async (to, subject, type = 'notification') => {
  try {
    await prisma.email_log.create({
      data: {
        recipient: to,
        subject: subject,
        email_type: type,
        sent_date: new Date(),
        status: 'sent'
      }
    })
  } catch (error) {
    console.error('‚ùå [EMAIL-LOG] Error:', error)
  }
}

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
const formatReservationDates = (reservation) => {
  console.log('üîç Full Reservation data:', JSON.stringify(reservation, null, 2))
  
  const allDates = []
  
  if (reservation.booking_dates && Array.isArray(reservation.booking_dates) && reservation.booking_dates.length > 0) {
    console.log('üìÖ Found booking_dates array:', reservation.booking_dates)
    reservation.booking_dates.forEach(dateStr => {
      const date = new Date(dateStr)
      allDates.push(date.toLocaleDateString('th-TH', { 
        day: 'numeric', 
        month: 'short', 
        year: 'numeric' 
      }))
    })
  } else if (typeof reservation.booking_dates === 'string' && reservation.booking_dates.trim() !== '') {
    console.log('üìÖ Found booking_dates string:', reservation.booking_dates)
    const dateStrings = reservation.booking_dates.split(',').map(d => d.trim())
    dateStrings.forEach(dateStr => {
      const date = new Date(dateStr)
      allDates.push(date.toLocaleDateString('th-TH', { 
        day: 'numeric', 
        month: 'short', 
        year: 'numeric' 
      }))
    })
  } else {
    console.log('üìÖ Using single date from start_at:', reservation.start_at)
    const date = new Date(reservation.start_at)
    allDates.push(date.toLocaleDateString('th-TH', { 
      day: 'numeric', 
      month: 'short', 
      year: 'numeric' 
    }))
  }
  
  console.log('üìÖ Final dates array:', allDates)
  
  return allDates.length > 1 
    ? `${allDates.join(', ')} (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allDates.length} ‡∏ß‡∏±‡∏ô)`
    : allDates[0]
}

// Template ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà - ‡πÉ‡∏ä‡πâ Template System
const getNewReservationTemplate = (reservation, user) => {
  const dateDisplay = formatReservationDates(reservation)
  const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
  const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á content sections ‡∏î‡πâ‡∏ß‡∏¢ Template System
  const alertBox = createAlertBox("‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", "warning")
  
  const detailsData = {
    "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°": reservation.meeting_room.room_name,
    "‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á": `${user.first_name} ${user.last_name}`,
    "‡∏Ñ‡∏ì‡∏∞": user.department,
    "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á": dateDisplay,
    "‡πÄ‡∏ß‡∏•‡∏≤": `${startTime} - ${endTime}`,
    "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå": reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
  const detailsBox = createDetailsBox("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", detailsData)
  
  const noteBox = `
    <div style="${emailStyles.alertInfo}">
      <p style="margin: 0; color: black; font-size: 14px;">
        <strong>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:</strong><br>
        ‚Ä¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥<br>
        ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á<br>
        ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
      </p>
    </div>
  `
  
  const buttonGroup = createButtonGroup([
    {
      url: `${process.env.FRONTEND_URL}/dashboard/officer/approvals`,
      text: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
      style: emailStyles.buttonSuccess
    }
  ])
  
  const content = alertBox + detailsBox + noteBox + buttonGroup
  
  return createEmailTemplate(content, "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà", emailColors.info)
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
const notifyOfficersNewReservation = async (reservationId) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ID: ${reservationId}`)
    
    if (!(await checkEmailQuota())) {
      console.log('‚ùå [EMAIL] ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ')
      return { success: false, reason: 'quota_exceeded' }
    }

    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: {
        meeting_room: true,
        users: true
      }
    })

    if (!reservation) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á')
    }

    const allOfficers = await prisma.officer.findMany({
      where: {
        position: {
          contains: reservation.meeting_room.department
        }
      }
    })
    
    const officers = allOfficers.filter(officer => officer.email && officer.email.trim() !== '')

    if (officers.length === 0) {
      console.log(`‚ö†Ô∏è [EMAIL] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${reservation.meeting_room.department}`)
      return { success: false, reason: 'no_officers_email' }
    }

    const transporter = createTransporter()
    const subject = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà - ${reservation.meeting_room.room_name}`
    const html = getNewReservationTemplate(reservation, reservation.users)

    for (const officer of officers) {
      try {
        await transporter.sendMail({
          from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
          to: officer.email,
          subject: subject,
          html: html
        })

        await logEmailSent(officer.email, subject, 'new_reservation')
        console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${officer.email}`)
      } catch (error) {
        console.error(`‚ùå [EMAIL] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${officer.email}:`, error.message)
      }
    }

    return { success: true, sentTo: officers.length }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ‡πÉ‡∏ä‡πâ Template System
const notifyUserReservationApproved = async (reservationId, officerId) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ID: ${reservationId}`)
    
    if (!(await checkEmailQuota())) {
      return { success: false, reason: 'quota_exceeded' }
    }

    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: { meeting_room: true, users: true }
    })

    const officer = await prisma.officer.findUnique({
      where: { officer_id: officerId }
    })

    if (!reservation?.users.email) {
      return { success: false, reason: 'no_user_email' }
    }

    const dateDisplay = formatReservationDates(reservation)
    const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á content ‡∏î‡πâ‡∏ß‡∏¢ Template System
    const alertBox = createAlertBox("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
    
    const detailsData = {
      "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°": reservation.meeting_room.room_name,
      "‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á": `${reservation.users.first_name} ${reservation.users.last_name}`,
      "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢": `${officer?.first_name || ''} ${officer?.last_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'}`,
      "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á": dateDisplay,
      "‡πÄ‡∏ß‡∏•‡∏≤": `${startTime} - ${endTime}`,
      "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå": reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    }
    const detailsBox = createDetailsBox("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", detailsData)
    
    const guidelinesBox = `
      <div style="${emailStyles.alertInfo}">
        <p style="margin: 0; color: black; font-size: 14px;">
          <strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥:</strong><br>
          ‚Ä¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î<br>
          ‚Ä¢ ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°<br>
          ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á<br>
          ‚Ä¢ ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        </p>
      </div>
    `
    
    const buttonGroup = createButtonGroup([
      {
        url: `${process.env.FRONTEND_URL}/my-reservations`,
        text: "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
        style: emailStyles.buttonPrimary
      }
    ])
    
    const content = alertBox + detailsBox + guidelinesBox + buttonGroup
    const html = createEmailTemplate(content, "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", emailColors.success)

    const transporter = createTransporter()
    const subject = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ${reservation.meeting_room.room_name}`

    await transporter.sendMail({
      from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
      to: reservation.users.email,
      subject: subject,
      html: html
    })

    await logEmailSent(reservation.users.email, subject, 'reservation_approved')
    console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${reservation.users.email}`)

    return { success: true }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò - ‡πÉ‡∏ä‡πâ Template System
const notifyUserReservationRejected = async (reservationId, officerId, reason = null) => {
  try {
    console.log(`üìß [EMAIL] ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ID: ${reservationId}`)
    
    if (!(await checkEmailQuota())) {
      return { success: false, reason: 'quota_exceeded' }
    }

    const reservation = await prisma.reservation.findUnique({
      where: { reservation_id: reservationId },
      include: { meeting_room: true, users: true }
    })

    const officer = await prisma.officer.findUnique({
      where: { officer_id: officerId }
    })

    if (!reservation?.users.email) {
      return { success: false, reason: 'no_user_email' }
    }

    const dateDisplay = formatReservationDates(reservation)
    const startTime = new Date(reservation.start_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
    const endTime = new Date(reservation.end_time).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á content ‡∏î‡πâ‡∏ß‡∏¢ Template System
    const alertBox = createAlertBox("‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", "error")
    
    const detailsData = {
      "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°": reservation.meeting_room.room_name,
      "‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á": `${reservation.users.first_name} ${reservation.users.last_name}`,
      "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏î‡∏¢": `${officer?.first_name || ''} ${officer?.last_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'}`,
      "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á": dateDisplay,
      "‡πÄ‡∏ß‡∏•‡∏≤": `${startTime} - ${endTime}`,
      "‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå": reservation.details_r || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
    }
    const detailsBox = createDetailsBox("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", detailsData)
    
    const reasonBox = reason ? `
      <div style="${emailStyles.alertWarning}">
        <h4 style="color: black; margin-top: 0;">‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:</h4>
        <p style="margin: 0; color: black; font-size: 14px;">${reason}</p>
      </div>
    ` : ''
    
    const suggestionsBox = `
      <div style="${emailStyles.alertInfo}">
        <p style="margin: 0; color: black; font-size: 14px;">
          <strong>‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong><br>
          ‚Ä¢ ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô<br>
          ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á<br>
          ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á<br>
          ‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
        </p>
      </div>
    `
    
    const buttonGroup = createButtonGroup([
      {
        url: `${process.env.FRONTEND_URL}/reserve`,
        text: "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÉ‡∏´‡∏°‡πà",
        style: emailStyles.buttonPrimary
      },
      {
        url: `${process.env.FRONTEND_URL}/my-reservations`,
        text: "‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á",
        style: emailStyles.buttonSecondary
      }
    ])
    
    const content = alertBox + detailsBox + reasonBox + suggestionsBox + buttonGroup
    const html = createEmailTemplate(content, "‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", emailColors.error)

    const transporter = createTransporter()
    const subject = `‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ${reservation.meeting_room.room_name}`

    await transporter.sendMail({
      from: `"${process.env.FROM_EMAIL_NAME}" <${process.env.GMAIL_USER}>`,
      to: reservation.users.email,
      subject: subject,
      html: html
    })

    await logEmailSent(reservation.users.email, subject, 'reservation_rejected')
    console.log(`‚úÖ [EMAIL] ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${reservation.users.email}`)

    return { success: true }
  } catch (error) {
    console.error('‚ùå [EMAIL] Error:', error)
    return { success: false, error: error.message }
  }
}

export {
  notifyOfficersNewReservation,
  notifyUserReservationApproved,
  notifyUserReservationRejected,
  checkEmailQuota
}