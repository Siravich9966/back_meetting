// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö conflict detection
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function testConflictBooking() {
  try {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö conflict detection')
    console.log('=' * 50)

    // ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 17 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568 (2025)
    const testDate = new Date('2025-08-17')
    
    console.log('\n1. ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 17 ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏° 2568:')
    const existingBookings = await prisma.reservation.findMany({
      where: {
        start_at: {
          gte: new Date('2025-08-17T00:00:00.000Z'),
          lt: new Date('2025-08-18T00:00:00.000Z')
        },
        room_id: 7, // IT Lab
        status_r: {
          in: ['pending', 'approved']
        }
      },
      include: {
        users: {
          select: {
            first_name: true,
            last_name: true
          }
        },
        meeting_room: {
          select: {
            room_name: true
          }
        }
      },
      orderBy: {
        start_time: 'asc'
      }
    })

    console.log(`‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ${existingBookings.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:`)
    existingBookings.forEach((booking, i) => {
      console.log(`${i+1}. ${booking.users?.first_name || 'N/A'} ${booking.users?.last_name || 'N/A'}`)
      console.log(`   ‡∏´‡πâ‡∏≠‡∏á: ${booking.meeting_room?.room_name || 'N/A'}`)
      console.log(`   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${booking.start_at.toISOString().split('T')[0]} ‡∏ñ‡∏∂‡∏á ${booking.end_at.toISOString().split('T')[0]}`)
      console.log(`   ‡πÄ‡∏ß‡∏•‡∏≤: ${booking.start_time.toTimeString().slice(0,5)} - ${booking.end_time.toTimeString().slice(0,5)}`)
      console.log(`   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${booking.status_r}`)
      console.log(`   ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${booking.details_r}`)
      console.log(`   ID: ${booking.reservation_id}`)
      console.log('')
    })

    console.log('\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô:')
    
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß 08:00-09:00
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà 08:00-09:00 (‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ä‡πà‡∏ß‡∏á)
    console.log('‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡∏á 08:00-09:00 (‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡πÄ‡∏ï‡πá‡∏°‡∏ä‡πà‡∏ß‡∏á)')
    await testBookingConflict({
      room_id: 7, // ‡πÉ‡∏ä‡πâ room_id 7 ‡∏ï‡∏≤‡∏° IT Lab
      start_at: '2025-08-17',
      end_at: '2025-08-17', 
      start_time: '08:00',
      end_time: '09:00'
    })

    console.log('\n‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡∏á 08:00-10:00 (‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)')
    await testBookingConflict({
      room_id: 7, // ‡πÉ‡∏ä‡πâ room_id 7 ‡∏ï‡∏≤‡∏° IT Lab
      start_at: '2025-08-17',
      end_at: '2025-08-17',
      start_time: '08:00', 
      end_time: '10:00'
    })

    console.log('\n‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡∏á 09:00-10:00 (‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≠)')
    await testBookingConflict({
      room_id: 7, // ‡πÉ‡∏ä‡πâ room_id 7 ‡∏ï‡∏≤‡∏° IT Lab
      start_at: '2025-08-17',
      end_at: '2025-08-17',
      start_time: '09:00',
      end_time: '10:00'
    })

    console.log('\n‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 4: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≠‡∏á 11:00-12:00 (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö)')
    await testBookingConflict({
      room_id: 7, // ‡πÉ‡∏ä‡πâ room_id 7 ‡∏ï‡∏≤‡∏° IT Lab
      start_at: '2025-08-17',
      end_at: '2025-08-17',
      start_time: '11:00',
      end_time: '12:00'
    })

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  } finally {
    await prisma.$disconnect()
  }
}

async function testBookingConflict(bookingData) {
  try {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á API
    const startDate = new Date(bookingData.start_at + 'T00:00:00.000Z')
    const endDate = new Date(bookingData.end_at + 'T23:59:59.999Z')
    
    const [startHour, startMinute] = bookingData.start_time.split(':').map(Number)
    const [endHour, endMinute] = bookingData.end_time.split(':').map(Number)
    
    const startTime = new Date()
    startTime.setHours(startHour, startMinute, 0, 0)
    
    const endTime = new Date()
    endTime.setHours(endHour, endMinute, 0, 0)

    console.log(`   üìÖ ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${startDate.toISOString().split('T')[0]}`)
    console.log(`   ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${bookingData.start_time} - ${bookingData.end_time}`)
    console.log(`   üîé startDate: ${startDate.toISOString()}`)
    console.log(`   üîé endDate: ${endDate.toISOString()}`)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö (‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏à‡∏≤‡∏Å API ‡∏à‡∏£‡∏¥‡∏á)
    const conflictReservations = await prisma.reservation.findMany({
      where: {
        room_id: parseInt(bookingData.room_id),
        status_r: {
          in: ['pending', 'approved'] // ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö rejected
        },
        AND: [
          // ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô: (startNew < endExisting) AND (startExisting < endNew)
          { start_at: { lt: endDate } },   // startExisting < endNew
          { end_at: { gt: startDate } }    // endExisting > startNew
        ]
      }
    })

    console.log(`   üîç ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: ${conflictReservations.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö time conflict ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const hasTimeConflict = conflictReservations.some(existing => {
      const existingStartDate = new Date(existing.start_at)
      const existingEndDate = new Date(existing.end_at)
      const existingStartTime = new Date(existing.start_time)
      const existingEndTime = new Date(existing.end_time)

      console.log(`     - ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: ${existingStartTime.toTimeString().slice(0,5)}-${existingEndTime.toTimeString().slice(0,5)}`)

      // ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
      const overlapStart = new Date(Math.max(startDate.getTime(), existingStartDate.getTime()))
      const overlapEnd = new Date(Math.min(endDate.getTime(), existingEndDate.getTime()))

      // ‡∏ß‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
      let currentDate = new Date(overlapStart)
      while (currentDate <= overlapEnd) {
        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        let dayExistingStartTime, dayExistingEndTime
        
        if (currentDate.getTime() === existingStartDate.getTime() && currentDate.getTime() === existingEndDate.getTime()) {
          // Single day booking - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
          dayExistingStartTime = existingStartTime
          dayExistingEndTime = existingEndTime
        } else if (currentDate.getTime() === existingEndDate.getTime()) {
          // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á multi-day booking
          dayExistingStartTime = existingStartTime
          dayExistingEndTime = existingEndTime
        } else {
          // ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á multi-day booking
          dayExistingStartTime = existingStartTime
          dayExistingEndTime = new Date(existingStartTime.getTime())
          dayExistingEndTime.setHours(22, 0, 0, 0)
        }

        // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        let dayNewStartTime, dayNewEndTime
        
        if (currentDate.getTime() === startDate.getTime() && currentDate.getTime() === endDate.getTime()) {
          // Single day booking ‡πÉ‡∏´‡∏°‡πà
          dayNewStartTime = startTime
          dayNewEndTime = endTime
        } else if (currentDate.getTime() === endDate.getTime()) {
          // ‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          dayNewStartTime = startTime
          dayNewEndTime = endTime
        } else {
          // ‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          dayNewStartTime = startTime
          dayNewEndTime = new Date(startTime.getTime())
          dayNewEndTime.setHours(22, 0, 0, 0)
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ time overlap ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        const newStartMinutes = dayNewStartTime.getHours() * 60 + dayNewStartTime.getMinutes()
        const newEndMinutes = dayNewEndTime.getHours() * 60 + dayNewEndTime.getMinutes()
        const existingStartMinutes = dayExistingStartTime.getHours() * 60 + dayExistingStartTime.getMinutes()
        const existingEndMinutes = dayExistingEndTime.getHours() * 60 + dayExistingEndTime.getMinutes()

        console.log(`       - ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏ß‡∏•‡∏≤: ‡πÉ‡∏´‡∏°‡πà ${Math.floor(newStartMinutes/60).toString().padStart(2,'0')}:${(newStartMinutes%60).toString().padStart(2,'0')}-${Math.floor(newEndMinutes/60).toString().padStart(2,'0')}:${(newEndMinutes%60).toString().padStart(2,'0')} vs ‡πÄ‡∏Å‡πà‡∏≤ ${Math.floor(existingStartMinutes/60).toString().padStart(2,'0')}:${(existingStartMinutes%60).toString().padStart(2,'0')}-${Math.floor(existingEndMinutes/60).toString().padStart(2,'0')}:${(existingEndMinutes%60).toString().padStart(2,'0')}`)

        // Time slots overlap if: (start1 < end2) AND (start2 < end1)
        const hasTimeOverlapToday = (newStartMinutes < existingEndMinutes) && (existingStartMinutes < newEndMinutes)
        
        if (hasTimeOverlapToday) {
          console.log(`       ‚ö†Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö conflict ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${currentDate.toDateString()}`)
          return true
        }

        // ‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        currentDate.setDate(currentDate.getDate() + 1)
      }

      return false
    })

    if (hasTimeConflict) {
      console.log('   ‚ùå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ (‡∏°‡∏µ conflict)')
    } else {
      console.log('   ‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ')
    }

  } catch (error) {
    console.error('   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error)
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
testConflictBooking()
