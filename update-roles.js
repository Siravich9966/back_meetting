// ===================================================================
// Update User Role Script
// ===================================================================
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á user ‡πÄ‡∏õ‡πá‡∏ô officer ‡∏´‡∏£‡∏∑‡∏≠ admin
// ===================================================================

import prisma from './lib/prisma.js'

async function updateUserRole() {
  console.log('üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Ç‡∏≠‡∏á user...')
  
  try {
    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ users ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const users = await prisma.users.findMany({
      select: {
        user_id: true,
        email: true,
        first_name: true,
        last_name: true,
        department: true,
        role_id: true,
        roles: {
          select: {
            role_name: true
          }
        }
      }
    })
    
    console.log('\nüë• ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Users ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')
    users.forEach(user => {
      console.log(`   ID: ${user.user_id} | ${user.first_name} ${user.last_name} | ${user.email} | ${user.department} | Role: ${user.roles.role_name}`)
    })
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô user ‡∏ó‡∏µ‡πà‡∏°‡∏µ email ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô officer
    const emailsToPromote = [
      'officer.it1@company.com',  // user ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏õ
      'testuser@company.com',     // user ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
      'officer.finance@company.com', 
      'officer.sales@company.com',
      'officer.hr@company.com'
    ]
    
    for (const email of emailsToPromote) {
      const user = await prisma.users.findUnique({
        where: { email }
      })
      
      if (user) {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô officer (role_id = 2)
        await prisma.users.update({
          where: { email },
          data: { role_id: 2 }
        })
        console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ${email} ‡πÄ‡∏õ‡πá‡∏ô Officer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
      } else {
        console.log(`‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö user: ${email}`)
      }
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    console.log('\nüéâ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role:')
    const updatedUsers = await prisma.users.findMany({
      select: {
        user_id: true,
        email: true,
        first_name: true,
        last_name: true,
        department: true,
        role_id: true,
        roles: {
          select: {
            role_name: true
          }
        }
      }
    })
    
    updatedUsers.forEach(user => {
      console.log(`   ID: ${user.user_id} | ${user.first_name} ${user.last_name} | ${user.email} | ${user.department} | Role: ${user.roles.role_name}`)
    })
    
    // ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏° role
    const roleCounts = await prisma.users.groupBy({
      by: ['role_id'],
      _count: {
        user_id: true
      }
    })
    
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Users ‡∏ï‡∏≤‡∏° Role:')
    for (const count of roleCounts) {
      const role = await prisma.roles.findUnique({
        where: { role_id: count.role_id }
      })
      console.log(`   ${role.role_name}: ${count._count.user_id} ‡∏Ñ‡∏ô`)
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error)
  } finally {
    await prisma.$disconnect()
  }
}

updateUserRole()
